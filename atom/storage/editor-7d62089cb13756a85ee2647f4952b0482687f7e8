{"mode":"editor","version":1,"windowDimensions":{"x":1255,"y":23,"width":1256,"height":1413,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/muhammad/workspace/weebly"],"buffers":[{"text":"<?php\n\nuse User\\Model\\UserModel;\n\nrequire_once __DIR__ . '/init.php';\nrequire_once CONFIG_INCL_PATH . '/utils.php';\nrequire_once CONFIG_INCL_PATH . '/check_authentication.php';\n\n// Trigger any Billing A/B Tests\n\\ABTest\\Triggers::billing($_SESSION[\"user_id\"]);\n\n// This page should be working off of the logged_in_user instead of the user_id.\n// We'll have to fake the session and restore it at the end.\n$prevUserID = null;\nif ($_SESSION['user_id'] != $_SESSION['logged_in_user']) {\n\t$prevUserID = $_SESSION['user_id'];\n\t$_SESSION['user_id'] = $_SESSION['logged_in_user'];\n\t$GLOBALS['db'] = mysql_db::getShardDB($_SESSION['logged_in_user']);\n}\n\n$session_id = $_GET['sessionid'] ?: $_POST['sessionid'];\nif ($session_id) {\n\t$_COOKIE['WeeblySession'] = $session_id;\n}\n\n$memberVerify = \\Spam\\Consequences\\MemberVerify::getInstance($_SESSION['user_id']); // TODO: test\nif ($memberVerify->memberMustVerify() === true) {\n\t$redirectUrl = $_SERVER['SERVER_NAME'] . $_SERVER['REQUEST_URI'];\n\t$memberVerify->storeRedirectUrl($redirectUrl);\n\theader('Location: ' . $memberVerify->getVerifyUrl());\n}\n\n$type = $_GET['type'];\n$level = $_GET['level'];\n\nif ($type == 'starter') {\n\t$level = \\AccessControl\\UpgradeRestrictions::STARTER_LEVEL;\n}\n\nif ($type == 'pro' || $type == 'Weebly.proAccount' || $type == 'Weebly.education.proAccount') {\n\t$level = \\AccessControl\\UpgradeRestrictions::PRO_LEVEL;\n}\n\nif ($type == 'business') {\n\t$level = \\AccessControl\\UpgradeRestrictions::BUSINESS_LEVEL;\n}\n\n$isTrial = false;\n$status = '';\n\nif ($_REQUEST['userServiceID']) {\n\tlist($isTrial, $status) = $db->get(\"SELECT is_trial, status FROM billing_user_service WHERE user_service_id=?\", $_REQUEST['userServiceID']);\n} else if ($_REQUEST['siteID']) {\n\tlist($usid, $sid, $isTrial, $status) = $db->get(\"SELECT user_service_id, service_id, is_trial, status FROM billing_user_service WHERE user_id=? AND site_id=? AND deleted=0 and service_id <> 'Weebly.simpleChatSiteRevised12'\", $_SESSION['user_id'], $_REQUEST['siteID']);\n\n\t// If a site has an exising service that is overdue do not allow a user\n\t// to add another new service to the site, just extend.\n\tif ($status == 'overdue' || $status == 'locked' || $status == 'suspended') {\n\t\t$type = 'extendpremium';\n\t\t$level = false;\n\t\tif (!$_REQUEST['userServiceID']) {\n\t\t\t$_REQUEST['userServiceID'] = $usid;\n\t\t}\n\t}\n\n\tif ($isTrial) {\n\t\t$_REQUEST['userServiceID'] = $usid;\n\t}\n}\n\n$user = UserModel::findById($_SESSION['user_id']);\nif ($user && is_null($user->getPricingModel())) {\n\tsetProperty('user', $user->user_id, 'pricing_model_set_location', 'purchasePage');\n\t$user->setPricingModel();\n}\n\nif ($isTrial) {\n\t$controller = new \\Billing\\PurchaseScreen\\TrialPlanController($level);\n}\nelse if ($level || $type == 'premium' || $type == 'upgrade') {\n\t$controller = new \\Billing\\PurchaseScreen\\PremiumPlanController(false, $level);\n}\nelse if ($type == 'extendpro' || $type == 'extendpremium') {\n\t$controller = new \\Billing\\PurchaseScreen\\PremiumPlanController(true);\n}\nelse if ($type == 'domain') {\n\t$controller = new \\Billing\\PurchaseScreen\\DomainController();\n}\nelse if ($type == 'extenddomain') {\n\t$controller = new \\Billing\\PurchaseScreen\\DomainController(true);\n}\nelse if ($type == 'Weebly.education.studentAccounts') {\n\t$controller = new \\Billing\\PurchaseScreen\\StudentAccountController();\n}\nelse if ($type == 'stockmedia') {\n\t$controller = new \\Billing\\PurchaseScreen\\StockMediaController();\n}\nelse if ($type == Developer::SERVICE_ID) {\n\t$controller = new \\Billing\\PurchaseScreen\\DesignerController();\n}\nelse if ($type == 'extenddesigner') {\n\t$controller = new \\Billing\\PurchaseScreen\\DesignerController(true);\n}\nelse if ($type == 'extendgoogleapps') {\n\t$controller = new \\Billing\\PurchaseScreen\\GoogleAppsController(true);\n}\nelse if ($type == 'extendgoogleappstrial') {\n\t$controller = new \\Billing\\PurchaseScreen\\GoogleAppsController(true);\n}\nelse if ($type == 'update') {\n\t$controller = new \\Billing\\PurchaseScreen\\PaymentUpdateController();\n}\nelse if ($type == 'changecard') {\n\t$controller = new \\Billing\\PurchaseScreen\\ChangeCardController();\n}\nelse if ($type == 'simplechat') {\n\t$controller = new \\Billing\\PurchaseScreen\\SimpleChatController(false, $_REQUEST['siteID']);\n}\nelse {\n\t$controller = new \\Billing\\PurchaseScreen\\ErrorController(\n\t\t\"Invalid type. Please close this window and try again.\"\n\t);\n}\n\necho $controller->render();\n\n// Log visit as a user_message\n$umType = $_GET['comparison'] ? \"visit_billing_comparison_page\" : \"visit_billing_purchase_page\";\ninsertUserMessage($_SESSION['user_id'], $umType, $type);\n\nif ($prevUserID) {\n\t$_SESSION['user_id'] = $prevUserID;\n\t$GLOBALS['db'] = mysql_db::getShardDB($prevUserID); // because wrapping apps/purchasePage.php might need $db\n}\n\nif (\\Util\\Support::eligibleForProactiveChat($_SESSION['user_id'])) {\n\t$params = \\Util\\Support::getChatVariables($_SESSION['user_id'], $_SESSION['site_id']);\n\n\t//set chat source since getChatVariables doesn't know where we're from\n\t$params['chat_source'] = 'billing';\n\tif($_GET['comparison']){\n\t\t$params['chat_source'] = 'comparison';\n\t}\n\n\trequire CONFIG_PARTIAL_PATH . '/snapengage_livechat.php';\n}\n\n","markerStore":{"nextMarkerId":49,"markersById":{"0":{"range":{"start":{"row":86,"column":62},"end":{"row":86,"column":62}},"properties":{"type":"selection","editorId":554,"goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":25,"undoStack":[{"type":"group-start","snapshot":{"0":{"range":[[75,0],[75,0]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[75,0],[75,0]],"newRange":[[75,0],[76,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[76,0],[76,0]],"newRange":[[76,0],[76,0]],"oldText":"","newText":""}},{"type":"change","content":{"oldRange":[[75,0],[75,0]],"newRange":[[75,0],[75,0]],"oldText":"","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[76,0],[76,0]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[76,0],[76,0]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[76,0],[76,0]],"newRange":[[76,0],[76,1]],"oldText":"","newText":"x"}},{"type":"change","content":{"oldRange":[[76,1],[76,1]],"newRange":[[76,1],[76,2]],"oldText":"","newText":"d"}},{"type":"change","content":{"oldRange":[[76,2],[76,2]],"newRange":[[76,2],[76,3]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[76,3],[76,3]],"newRange":[[76,3],[76,4]],"oldText":"","newText":"b"}},{"type":"change","content":{"oldRange":[[76,4],[76,4]],"newRange":[[76,4],[76,5]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[76,5],[76,5]],"newRange":[[76,5],[76,6]],"oldText":"","newText":"g"}},{"type":"change","content":{"oldRange":[[76,6],[76,6]],"newRange":[[76,6],[76,7]],"oldText":"","newText":"_"}},{"type":"change","content":{"oldRange":[[76,7],[76,7]],"newRange":[[76,7],[76,8]],"oldText":"","newText":"b"}},{"type":"change","content":{"oldRange":[[76,8],[76,8]],"newRange":[[76,8],[76,9]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[76,9],[76,9]],"newRange":[[76,9],[76,10]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[76,10],[76,10]],"newRange":[[76,10],[76,11]],"oldText":"","newText":"a"}},{"type":"change","content":{"oldRange":[[76,11],[76,11]],"newRange":[[76,11],[76,12]],"oldText":"","newText":"k"}},{"type":"group-end","snapshot":{"0":{"range":[[76,12],[76,12]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[76,12],[76,12]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[76,12],[76,12]],"newRange":[[76,12],[76,14]],"oldText":"","newText":"()"}},{"type":"group-end","snapshot":{"0":{"range":[[76,14],[76,14]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[76,14],[76,14]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[76,14],[76,14]],"newRange":[[76,14],[76,15]],"oldText":"","newText":";"}},{"type":"group-end","snapshot":{"0":{"range":[[76,15],[76,15]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[76,15],[76,15]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[147,0],[148,0]],"newRange":[[147,0],[147,0]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[76,15],[76,15]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[76,15],[76,15]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[76,0],[76,15]],"newRange":[[76,0],[76,0]],"oldText":"xdebug_break();","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[76,0],[76,0]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[76,0],[76,0]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[75,0],[76,0]],"newRange":[[75,0],[75,0]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[75,0],[75,0]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[80,43],[80,64]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[146,0],[146,0]],"newRange":[[146,0],[147,0]],"oldText":"","newText":"\n"}},{"type":"group-end","snapshot":{"0":{"range":[[80,43],[80,64]],"properties":{"type":"selection","editorId":554,"goalScreenRange":null,"autoscroll":false},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/weebly/html/weebly/incl/billing_purchase_page.php","digestWhenLastPersisted":"e8de7004d3d954229e2eef797bb7d69ebf9fc53c","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"<?php\n\nnamespace Billing\\PurchaseScreen;\n\nrequire_once CONFIG_INCL_PATH . '/email.php';\nrequire_once CONFIG_INCL_PATH . '/ab_test.php';\nrequire_once CONFIG_INCL_PATH . '/billing_utils.php';\nrequire_once CONFIG_INCL_PATH . '/utils.php';\n\nuse Billing\\Controller\\DomainPurchaseController;\nuse i18n\\Controller\\LocaleController;\nuse Site\\Model\\SiteModel;\nuse stdClass;\nuse \\tl;\nuse \\tli;\nuse \\Billing;\nuse \\BillingUserService;\nuse \\BillingTransaction;\nuse \\Billing\\Model\\BillingUserServiceModel;\nuse \\Permissions;\nuse \\AccessControl\\UpgradeRestrictions;\nuse Util\\TrackingPixel;\nuse \\Email\\Lifecycle;\nuse Util\\BundlePlanHelper;\nuse User\\Model\\UserModel;\nuse ABTest\\ABTesting;\nuse Util\\BillingServiceHelper;\nuse Util\\NumberUtil;\nuse Billing\\Model\\BillingServiceModel;\nuse Billing\\Model\\BillingBaseServiceModel;\nuse Billing\\Model\\ServiceItemModel;\n\nclass PremiumPlanController extends PaymentController\n{\n\n\tpublic $planName;\n\tpublic $months;\n\tpublic $isSite;\n\tpublic $desiredLevel;\n\tpublic $restrictionID;\n\tpublic $restrictionNoun;\n\tpublic $defaultLevel;\n\tpublic $showSiteChooser;\n\tpublic $customTitle;\n\tpublic $forceAllowCredits = true;\n\tpublic $allowDowngrade = false;\n\tpublic $startTrial = false;\n\tpublic $isTrial = false;\n\n\tprivate $existingService;\n\tprivate $upgradableSites;\n\tprivate $allPlans;\n\n\tprivate $freeDomainIssued;\n\tprivate $domain;\n\n\n\tfunction __construct($isExtension=false, $desiredLevel=0) {\n\t\tglobal $ab;\n\t\tparent::__construct($isExtension);\n\n\t\t$this->desiredLevel = $desiredLevel;\n\n\t\tif ($this->source == 'ed') {\n\t\t\t$this->isSite = false;\n\t\t}\n\t\telse if ($this->source == 'edstudent') {\n\t\t\t// TODO: test this\n\t\t\t$this->errorMessage =\n\t\t\t\t\"This feature is restricted to classes with Weebly Pro features.\\n\" . // TODO: nl2br maybe\n\t\t\t\t\"Please contact your teacher for more information.\";\n\t\t\t$this->errorType = 'showstopper';\n\t\t}\n\t\telse if (UpgradeRestrictions::hasOldPro($this->userID) && $desiredLevel && $desiredLevel <= UpgradeRestrictions::PRO_LEVEL ) {\n\t\t\t$this->isSite = false;\n\t\t}\n\t\telse if($this->isExtendingOldPro()) {\n\t\t\t$this->isSite = false;\n\t\t}\n\t\telse if (UpgradeRestrictions::hasNewPremium($this->userID)) {\n\t\t\t$this->isSite = true;\n\t\t}\n\t\telse if (\\FORCE_PREMIUM_SCOPE === 'account') {\n\t\t\t$this->isSite = false;\n\t\t}\n\t\telse if (\\FORCE_PREMIUM_SCOPE === 'site') {\n\t\t\t$this->isSite = true;\n\t\t}\n\t\telse {\n\t\t\tglobal $ab;\n\t\t\t$this->isSite = true;\n\t\t}\n\n\t\t$trialInfo = \\Billing\\Controller\\FreeTrialController::getTrialInfo($this->userID, $this->siteID);\n\n\t\tif (getProperty('user', $this->userID, 'free_trial_test')\n\t\t\t&& $ab->getVariable('Signup.FreeTrial', 'freeTrial') != 'no') {\n\t\t\t$this->freeSignupTrial = $ab->getVariable('Signup.FreeTrial', 'freeTrial');\n\t\t}\n\t}\n\n\n\tfunction render() {\n\t\tif ($this->desiredLevel == UpgradeRestrictions::STARTER_LEVEL) \\doEvent('purchasing_starter');\n\t\tif ($this->desiredLevel == UpgradeRestrictions::PRO_LEVEL) \\doEvent('purchasing_pro');\n\t\tif ($this->desiredLevel == UpgradeRestrictions::BUSINESS_LEVEL) \\doEvent('purchasing_business');\n\t\tif ($this->desiredLevel > UpgradeRestrictions::FREE_LEVEL) \\doEvent('purchasing_premium');\n\n\t\treturn parent::render();\n\t}\n\n\tfunction handleFormInput() {\n\n\t\t// figure out the siteID and if we need user to choose the site\n\t\tif ($this->determineSite() === false) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Show notice on comparison page in addition to the standard billing page if set to true.\n\t\t$this->restrictionID = $_GET['restrictionID'];\n\t\t$this->customTitle = $_GET['customTitle'];\n\t\t$this->startTrial = $_GET['startTrial'];\n\n\t\t//check if user flow is from continue from publish to register for a domain\n\t\tif ($_GET['fromDomain']) {\n\t\t\t$this->fromDomain = $_GET['fromDomain'];\n\t\t}\n\n\t\tif ($_GET['domain']) {\n\t\t\t$this->upsellDomain = $_GET['domain'];\n\t\t}\n\n\t\t// if showing the plan comparison page, mostly do nothing\n\t\tif ($_GET['comparison']) {\n\t\t\tif (count($this->getAllPlans()) > 1) {\n\t\t\t\t$this->pageState = 'comparison';\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif ($this->pageState == 'confirmation') {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Allow downgrading for users in the free trial who's payment failed to process\n\t\tif ($this->isSite && getProperty('site', $this->siteID, 'trial_failed_to_convert')) {\n\t\t\t$this->allowDowngrade = true;\n\t\t}\n\n\t\t// handle regular payment method fields\n\t\tparent::handleFormInput();\n\n\t\t// which plan should be selected by default\n\t\t$this->defaultLevel = $_GET['defaultLevel'];\n\n\t\t// record plan name (\"pro\", \"starter\", or \"commerce\")\n\t\tif ($this->source == 'ed') {\n\t\t\t$this->planName = 'pro';\n\t\t}\n\t\telse {\n\t\t\t$this->planName = $_REQUEST['planName'];\n\t\t}\n\n\t\t// record duration\n\t\tif ($this->source == 'ed' && !$this->isExtension) {\n\t\t\t$this->months = 12;\n\t\t}\n\t\telse if ($this->planName) {\n\t\t\t$this->months = $_REQUEST[$this->planName . 'Months'];\n\t\t}\n\n\t\t// error checking...\n\t\tif (!$this->isExtension) { // for a new plan\n\n\t\t\tif($this->desiredLevel  && $this->desiredLevel == UpgradeRestrictions::BUSINESS_LEVEL && $this->source == 'ed') {\n\t\t\t\t$this->errorMessage = tl(\"The Business plan is currently not available for education accounts. Thank you for your patience.\");\n\t\t\t\t$this->errorType = 'showstopper';\n\t\t\t\t\\doEvent('ed_business_error');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// does the user already have the desired level or higher?\n\t\t\tif ($this->desiredLevel) {\n\t\t\t\t$existingLevel = $this->getExistingLevel();\n\t\t\t\tif ($existingLevel && $existingLevel > $this->desiredLevel) {\n\t\t\t\t\t$this->errorMessage = tl(\"You already have the highest available Premium plan.\"); // TODO: might not make total sense when we have commerce\n\t\t\t\t\t$this->errorType = 'showstopper';\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// can the user upgrade to *any* higher plan?\n\t\t\tif (!$this->getUsablePlans()) {\n\t\t\t\t$this->errorMessage = tl(\"You already have the highest available Premium plan.\");\n\t\t\t\t$this->errorType = 'showstopper';\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\telse { // extending an existing plan\n\n\t\t\tif (!$this->getExistingService()) {\n\t\t\t\t$this->errorMessage = tl(\"You are attempting to extend an invalid premium account. Please contact support.\");\n\t\t\t\t$this->errorType = 'showstopper';\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction determineSite() {\n\n\t\tif ($_REQUEST['userServiceID']) {\n\t\t\t$this->userServiceID = $_REQUEST['userServiceID']; // hacky. only because parent::handleFormInput is called before this\n\t\t\t$existingService = $this->getExistingService();\n\t\t\t$this->siteID = $existingService['siteID'];\n\t\t}\n\n\t\tif (!$this->isExtension && $this->isSite) {\n\n\t\t\t// see if there is an explicit siteID defined\n\t\t\tif ($_REQUEST['siteID'] === 'false') {\n\t\t\t\t$this->siteID = null;\n\t\t\t}\n\t\t\telse if ($_REQUEST['siteID'] === 'true' || !$_REQUEST['siteID']) {\n\t\t\t\t//// this is already done in PaymentController's constructor\n\t\t\t\t//$this->siteID = $_SESSION['site_id'];\n\n\t\t\t\t//Possibly $_SESSION['site_id'] was for a different user\n\t\t\t\tif($this->siteID && $_SESSION['user_id'] == $_SESSION['logged_in_user'] && !Permissions::checkSiteUpgrade($this->siteID)) {\n\t\t\t\t\t$this->siteID = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse { // a real site id\n\t\t\t\t$this->siteID = $_REQUEST['siteID'];\n\t\t\t}\n\n\t\t\t// try to guess the best site\n\t\t\tif (!$this->siteID) {\n\t\t\t\t$upgradableSites = $this->getUpgradableSites();\n\t\t\t\tif ($upgradableSites) {\n\t\t\t\t\t$this->siteID = $upgradableSites[0]['id'];\n\t\t\t\t\tif (count($upgradableSites) > 1) {\n\t\t\t\t\t\t$this->showSiteChooser = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$this->errorMessage = tl(\"You have no sites that you can upgrade.\");\n\t\t\t\t\t$this->errorType = 'showstopper';\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// does the user own the site?\n\t\t\tif ($this->siteID && !Permissions::checkSiteUpgrade($this->siteID)) {\n\t\t\t\t$this->errorMessage = tl(\"Please ask the owner of this site to upgrade the site.\");\n\t\t\t\t$this->errorType = 'showstopper';\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// explicitly show the site chooser?\n\t\t\tif ($_REQUEST['siteChooser'] && count($this->getUpgradableSites()) > 1) {\n\t\t\t\t$this->showSiteChooser = true;\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction process() {\n\n\t\tif ($this->siteID && !Permissions::checkSiteUpgrade($this->siteID)) {\n\t\t\t$this->errorMessage = tl(\"Please ask the owner of this site to upgrade the site.\");\n\t\t\t$this->errorType = 'showstopper';\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!$this->planName) {\n\t\t\t$this->errorMessage = tl(\"Please select a plan.\");\n\t\t\t$this->errorType = 'plan';\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!$this->months) {\n\t\t\t$this->errorMessage = tl(\"Please select a plan length.\");\n\t\t\t$this->errorType = 'plan';\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($this->isSite && !$this->siteID) {\n\t\t\t$this->errorMessage = tl(\"Please select a site.\");\n\t\t\t$this->errorType = 'plan'; // TODO: change to site\n\t\t\treturn false;\n\t\t}\n\n\t\t// figure out the serviceID from plan name and duration\n\t\tif ($this->planName && $this->months) {\n\t\t\t$plans = $this->getAllPlans();\n\t\t\t$this->serviceID = $plans[$this->planName]['services'][$this->months]['serviceID'];\n\t\t\t$this->serviceItemID = $plans[$this->planName]['services'][$this->months]['serviceItemID'];\n\t\t}\n\n\t\t//Do not add duplicate services to the same site.\n\t\t//If its not an extension, check to see that its not the same or smaller plan level\n\t\tif (!$this->isExtension) {\n\t\t\t$highestServiceRow = getHighestLeveledServiceRow($this->userID, $this->siteID, 'active');\n\t\t\t$plans = $this->getAllPlans();\n\t\t\t$plan = $plans[$this->planName];\n\t\t\tif ($highestServiceRow) {\n\t\t\t\tif ($highestServiceRow['level'] == $plan['level']) {\n\t\t\t\t\t$this->errorMessage = tl(\"You already own this service plan. Please contact support.\");\n\t\t\t\t\t$this->errorType = 'plan';\n\t\t\t\t\t$error_message = \"Duplicate same for userID=\".$this->userID.\" || siteID=\".$this->siteID.\" || serviceID=\".$this->serviceID.\"\\n\";\n\t\t\t\t\t\\logg( $error_message, 'duplicate_sub.log' );\n\t\t\t\t\treturn false;\n\t\t\t\t} else if($highestServiceRow['level'] > $plan['level']) {\n\t\t\t\t\t$this->errorMessage = tl(\"You already own a greater service plan. Please contact support.\");\n\t\t\t\t\t$this->errorType = 'plan';\n\t\t\t\t\t$error_message = \"Duplicate greater for userID=\".$this->userID.\" || siteID=\".$this->siteID.\" || serviceID=\".$this->serviceID.\"\\n\";\n\t\t\t\t\t\\logg( $error_message, 'duplicate_sub.log' );\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn parent::process();\n\t}\n\n\n\tfunction addService() {\n\t\tglobal $ab;\n\t\tif ($this->startTrial) {\n\t\t\treturn $this->addTrialService();\n\t\t} else {\n\t\t\t$billing = $this->getBillingObject();\n\t\t\t$plans = $this->getAllPlans();\n\t\t\t$plan = $plans[$this->planName];\n\n\t\t\t// If they won't pay more then $10 for this order\n\t\t\t// don't issue them any vouchers\n\t\t\t$calculatedTotal = $this->calculateTotal();\n\t\t\t$canGenerateCoupon = $calculatedTotal >= 10;\n\t\t\t$showGoogleAppsCredit = $this->shouldShowAppsCredit($user);\n\n\t\t\t// Create coupons, then check to see if the purchase is successful.\n\t\t\t// If it isn't, destroy them. [SPRINT_TASK-14518], Revenue Recognition\n\t\t\t// being unable to assign values to coupons when they don't exist yet\n\t\t\t// is the reason we're doing it this way instead of just adding the coupon\n\t\t\t// upon successful purchase.\n\n\t\t\t// Generate a Google coupon for the user if they upgrade to Pro or higher from Starter.\n\t\t\t// Do not give them a domain coupon, since this is an upgrade and domain coupons\n\t\t\t// should only be for new purchases.\n\t\t\tif ($this->isUpgradingTriplePlayPlanFromStarter() && $plan['level'] >= UpgradeRestrictions::PRO_LEVEL) {\n\t\t\t\t$google_apps_coupon = $showGoogleAppsCredit ? BundlePlanHelper::generateGoogleAppsCoupon($this->userID) : '';\n\t\t\t} else if ($this->isPurchasingBundlePlan() && $canGenerateCoupon) {\n\t\t\t\t// Standard bundled plan, give them a domain coupon\n\t\t\t\t$domain_coupon = BundlePlanHelper::generateCoupon($this->userID, $this->currency);\n\t\t\t\t$billing->setVoucher($domain_coupon);\n\t\t\t} else if ($this->isPurchasingTriplePlayPlan() && $canGenerateCoupon) {\n\t\t\t\t// Triple play plan, give them a domain coupon. Give them a\n\t\t\t\t// google apps coupon as long as the purchased plan is at or above PRO.\n\t\t\t\t$domain_coupon = BundlePlanHelper::generateCoupon($this->userID);\n\t\t\t\t$billing->setVoucher($domain_coupon);\n\n\t\t\t\tif ($plan['level'] >= UpgradeRestrictions::PRO_LEVEL) {\n\t\t\t\t\t$google_apps_coupon = $showGoogleAppsCredit ? BundlePlanHelper::generateGoogleAppsCoupon($this->userID) : '';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$return = parent::addService();\n\n\t\t\tif ($return) {\n\t\t\t\t$overdueRow = \\getHighestLeveledServiceRow($this->userID, $this->isSite ? $this->siteID : null, 'overdue');\n\t\t\t\tif ($overdueRow) {\n\t\t\t\t\t$billing->removeService($overdueRow['user_service_id']);\n\t\t\t\t}\n\n\t\t\t\t// Events for ToDo list (and others)\n\t\t\t\tif ($this->source == 'ed') {\n\t\t\t\t\t\\doEvent('purchaseEducationPro');\n\t\t\t\t} else {\n\t\t\t\t\tif ($plan['level'] == UpgradeRestrictions::STARTER_LEVEL) \\doEvent('purchaseStarter');\n\t\t\t\t\tif ($plan['level'] == UpgradeRestrictions::PRO_LEVEL) \\doEvent('purchasePro');\n\t\t\t\t\tif ($plan['level'] == UpgradeRestrictions::BUSINESS_LEVEL) \\doEvent('purchaseEcom');\n\t\t\t\t\tif ($plan['level'] > UpgradeRestrictions::FREE_LEVEL) \\doEvent('purchasePremium');\n\t\t\t\t}\n\n\t\t\t\t$userService = new BillingUserService($billing->userServiceID); // TODO: don't we already have this in $this->userService ?\n\t\t\t\t$transaction = new BillingTransaction($billing->transactionID);\n\t\t\t\tlist($status, $message) = \\emailTemplate(\n\t\t\t\t\t$this->userID,\n\t\t\t\t\t\"billing-proReceipt\",\n\t\t\t\t\tarray(\n\t\t\t\t\t\t\"BillingUserService\" => $userService,\n\t\t\t\t\t\t\"BillingTransaction\" => $transaction\n\t\t\t\t\t),\n\t\t\t\t\tfalse\n\t\t\t\t);\n\n\t\t\t\tif ($plan['level'] >= UpgradeRestrictions::STARTER_LEVEL) {\n\t\t\t\t\tLifecycle::send_adwords_pro($this->userID);\n\t\t\t\t}\n\n\t\t\t\t// If they are purchasing a new bundle plan or a triple-play plan, give them a 1 year\n\t\t\t\t// domain coupon.\n\t\t\t\tif ($this->isPurchasingBundlePlan($userService) || $this->isPurchasingTriplePlayPlan($userService)) {\n\t\t\t\t\tif ($domain_coupon instanceof \\Billing\\Model\\BillingUserCouponModel) {\n\t\t\t\t\t\t$this->freeDomainIssued = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->freeDomainIssued = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Record a billing message with the description as JSON tying\n\t\t\t\t\t// the purchased plan and the coupon to each other.\n\t\t\t\t\t$billingMessageDescription = array(\n\t\t\t\t\t\t'plan' => array(\n\t\t\t\t\t\t\t'user_service_id' => $billing->userServiceID,\n\t\t\t\t\t\t\t'service_id' => $userService->service_id\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'credit' => array(\n\t\t\t\t\t\t\t'user_coupon_id' => $domain_coupon->user_coupon_id,\n\t\t\t\t\t\t\t'coupon_id' => $domain_coupon->coupon_id\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\n\t\t\t\t\tif ($google_apps_coupon) {\n\t\t\t\t\t\t$billingMessageDescription['credit']['google_apps_coupon_id'] = $google_apps_coupon->coupon_id;\n\t\t\t\t\t\t$billingMessageDescription['credit']['google_apps_user_coupon_id'] = $google_apps_coupon->user_coupon_id;\n\t\t\t\t\t}\n\n\t\t\t\t\t$billingMessageDescription = json_encode($billingMessageDescription);\n\n\t\t\t\t\t$creditMessageType = $this->isPurchasingTriplePlayPlan($userService)\n\t\t\t\t\t\t? BundlePlanHelper::TRIPLE_PLAY_CREDIT_MESSAGE_TYPE\n\t\t\t\t\t\t: BundlePlanHelper::BUNDLE_CREDIT_MESSAGE_TYPE;\n\n\t\t\t\t\t$billing->writeMessage(\n\t\t\t\t\t\t$creditMessageType,\n\t\t\t\t\t\t390,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t'',\n\t\t\t\t\t\t$billingMessageDescription,\n\t\t\t\t\t\t$billing->userServiceID,\n\t\t\t\t\t\t$this->userID,\n\t\t\t\t\t\t$billing->transactionID,\n\t\t\t\t\t\t$userService->service_id\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t$billing->writeMessage(\n\t\t\t\t\t\"PREMIUMREASON\",\n\t\t\t\t\t290,\n\t\t\t\t\t0,\n\t\t\t\t\t'',\n\t\t\t\t\t$this->restrictionID ?: $this->refer,\n\t\t\t\t\t$billing->userServiceID,\n\t\t\t\t\t$this->userID,\n\t\t\t\t\t$billing->transactionID,\n\t\t\t\t\t$userService->service_id\n\t\t\t\t);\n\n\t\t\t\tif ($this->source == 'ed') {\n\t\t\t\t\t\\Util\\RealtimeStats::geo_increment('billing.edpropurchase.success');\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t\\Util\\RealtimeStats::geo_increment(\"billing.{$this->planName}purchase.success\");\n\t\t\t\t}\n\n\t\t\t\tunset($plan['services']); // makes json smaller\n\n\t\t\t\t$pixel_data = array(\n\t\t\t\t\t'service_id' =>     $this->serviceID,\n\t\t\t\t\t'period' =>         $this->months,\n\t\t\t\t\t'transaction_id' => $billing->transactionID,\n\t\t\t\t\t'amount' =>         $billing->attemptedAmount,\n\t\t\t\t);\n\n\t\t\t\t$this->trackingTriggers[] = array_merge($pixel_data, array('tracking_trigger' => \"purchase_$this->planName\"));\n\n\t\t\t\tif ($plan['level'] != UpgradeRestrictions::BUSINESS_LEVEL) {\n\t\t\t\t\t$this->trackingTriggers[] = array_merge($pixel_data, array('tracking_trigger' => \"purchase_premium_nonbusiness\"));\n\t\t\t\t}\n\n\t\t\t\t$this->trackingTriggers[] = array_merge($pixel_data, array('tracking_trigger' => \"purchase_premium\"));\n\t\t\t\t$this->trackingTriggers[] = array_merge($pixel_data, array('tracking_trigger' => 'weebly_payment_with_category'));\n\n\t\t\t\t$this->triggerAffiliatePixels(\"purchase_premium\", $pixel_data);\n\n\t\t\t\t$site = SiteModel::findById($this->userID, $this->siteID);\n\t\t\t\tif ($site->isSeoAvailable()) {\n\t\t\t\t\t$site->showInSearchEngines();\n\t\t\t\t}\n\n\t\t\t\t$this->close('successBillingPremium', array(\n\t\t\t\t\t'plan' => $plan\n\t\t\t\t));\n\n\t\t\t} else {\n\t\t\t\t// Destroy any coupons generated by a purchase that did not go through.\n\t\t\t\tif ($domain_coupon) {\n\t\t\t\t\t$domain_coupon->destroy();\n\t\t\t\t}\n\n\t\t\t\tif ($google_apps_coupon) {\n\t\t\t\t\t$google_apps_coupon->destroy();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $return;\n\t\t}\n\t}\n\n\tfunction addTrialService() {\n\t\t$trial_plan_end_date = date(\"Y-m-d g:i:s\", strtotime(\"+15 days\"));\n\t\tsetProperty('site', $this->siteID, 'free_trial_signup', '1');\n\n\t\tif ($this->paymentType == 'paypal') {\n\t\t\t$service = \\Billing\\Controller\\FreeTrialController::giveFreeTrial($this->userID, $this->siteID, array(\n\t\t\t\t'serviceID' => $this->serviceID,\n\t\t\t\t'endDate' => $trial_plan_end_date,\n\t\t\t\t'forcePaymentOnExpiration' => true,\n\t\t\t\t'autoChargeOnExpiration' => true\n\t\t\t));\n\n\t\t\tsetProperty('site', $this->siteID, 'free_trial_paypal_payment', '1');\n\t\t} else {\n\t\t\t$service = \\Billing\\Controller\\FreeTrialController::giveFreeTrial($this->userID, $this->siteID, array(\n\t\t\t\t'serviceID' => $this->serviceID,\n\t\t\t\t'endDate' => $trial_plan_end_date,\n\t\t\t\t'storeCreditCard' => true,\n\t\t\t\t'ccDetails' => array(\n\t\t\t\t\t'cardNumber' => $this->creditCardNumber,\n\t\t\t\t\t'expirationDate' => $this->expirationDate,\n\t\t\t\t\t'firstName' => $this->firstName,\n\t\t\t\t\t'lastName' => $this->lastName,\n\t\t\t\t\t'zip' => $this->zip,\n\t\t\t\t\t'country' => $this->country,\n\t\t\t\t\t'vat_id' => $this->vat_id,\n\t\t\t\t\t'phone' => $this->phone,\n\t\t\t\t\t'cvv2' => $this->cvv2,\n\t\t\t\t\t'billingProfile' => $this->billingProfile\n\t\t\t\t),\n\t\t\t\t'forcePaymentOnExpiration' => false,\n\t\t\t\t'autoChargeOnExpiration' => true\n\t\t\t));\n\t\t}\n\n\t\tif (!$service) {\n\t\t\t$billing = $this->getBillingObject();\n\t\t\tlist($this->errorField, $this->errorMessage) = \\processBillingErrors($billing);\n\t\t\tif (!$this->errorMessage) {\n\t\t\t\t$this->errorMessage = tl(\"Problem adding credit card. Please try a different card.\");\n\t\t\t\t$this->reportUpdateSubscriptionFailure(\n\t\t\t\t\t$this->paymentType == 'paypal' ?\n\t\t\t\t\t\t'reason=paypalerror' :\n\t\t\t\t\t\t'reason=declined'\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t$plan = $plans[$this->planName];\n\n\t\t\t$this->close('successTrialPremium', array(\n\t\t\t\t'plan' => $plan\n\t\t\t));\n\n\t\t\t// Send trial welcome email\n\t\t\tLifecycle::send_trial_welcome($this->userID);\n\t\t}\n\n\t\treturn $service;\n\t}\n\n\tfunction redirectToPaypal() {\n\t\t$trialInfo = \\Billing\\Controller\\FreeTrialController::getTrialInfo($this->userID, $this->siteID);\n\n\t\t// Prevent redirecting to PayPal if the user is in the with_credit_card free trial test during the trial period\n\t\tif ($trialInfo['is_trial'] && $this->freeSignupTrial == 'with_credit_card' && $this->refer != 'trial-ssl') {\n\t\t\t$this->close('successTrialPlanChange');\n\t\t\tsetProperty('site', $this->siteID, 'free_trial_paypal_payment', '1');\n\t\t\t$user_service = BillingUserServiceModel::findByUserServiceId($this->userID, $this->userServiceID);\n\t\t\t$user_service->billing_profile_id = null;\n\t\t\t$user_service->save();\n\t\t\treturn \\Billing\\Controller\\FreeTrialController::changeTrialService($this->userID, $this->userServiceID, $this->serviceID);\n\t\t}\n\n\t\treturn parent::redirectToPayPal();\n\t}\n\n\tfunction extendSubscription() {\n\t\t$trialInfo = \\Billing\\Controller\\FreeTrialController::getTrialInfo($this->userID, $this->siteID);\n\n\t\tif ($trialInfo['is_trial'] && $this->freeSignupTrial == 'with_credit_card' && $this->refer != 'trial-ssl') {\n\t\t\t// If the user is in a trial with a credit card, just change their trial plan and wait to bill until trial has expired\n\n\t\t\tsetProperty('site', $this->siteID, 'free_trial_paypal_payment', '0');\n\t\t\t$return = \\Billing\\Controller\\FreeTrialController::changeTrialService($this->userID, $this->userServiceID, $this->serviceID);\n\t\t\t// Update credit card if new one has been provided\n\t\t\t$billing = $this->getBillingObject();\n\t\t\t$changeSuccessful = $billing->changePaymentMethod(\n\t\t\t\t$this->userID,\n\t\t\t\t$this->userServiceID,\n\t\t\t\tarray(\n\t\t\t\t\t'cardNumber' => $this->creditCardNumber,\n\t\t\t\t\t'expirationDate' => $this->expirationDate,\n\t\t\t\t\t'firstName' => $this->firstName,\n\t\t\t\t\t'lastName' => $this->lastName,\n\t\t\t\t\t'zip' => $this->zip,\n\t\t\t\t\t'country' => $this->country,\n\t\t\t\t\t'vat_id' => $this->vat_id,\n\t\t\t\t\t'phone' => $this->phone,\n\t\t\t\t\t'cvv2' => $this->cvv2,\n\t\t\t\t\t'billingProfile' => $this->billingProfile\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tif (!$changeSuccessful) {\n\t\t\t\tlist($this->errorField, $this->errorMessage) = \\processBillingErrors($billing);\n\t\t\t\tif (!$this->errorMessage) {\n\t\t\t\t\t$this->errorMessage = tl(\"Problem adding credit card. Please try a different card.\");\n\t\t\t\t\t$this->reportUpdateSubscriptionFailure(\n\t\t\t\t\t\t$this->paymentType == 'paypal' ?\n\t\t\t\t\t\t\t'reason=paypalerror' :\n\t\t\t\t\t\t\t'reason=declined'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$this->close('successTrialPlanChange');\n\n\t\t} else {\n\t\t\t$return = parent::extendSubscription();\n\n\t\t\tif ($return) {\n\t\t\t\t//Update the site plan for sites connected to Google Domains\n\t\t\t\t\\Google\\Controller\\DomainsController::updateSitePlan($this->userID, $this->siteID, $this->serviceID);\n\t\t\t\t\\Util\\RealtimeStats::geo_increment(\"billing.extend{$this->planName}.success\");\n\t\t\t\tif (getProperty('site', $this->siteID, 'trial_failed_to_convert')) {\n\t\t\t\t\tsetProperty('site', $this->siteID, 'trial_failed_to_convert', '0');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $return;\n\t}\n\n\n\tfunction reportAddServiceFailure($param_string=null) {\n\t\tif ($this->source == 'ed') {\n\t\t\t\\Util\\RealtimeStats::geo_increment('billing.edpropurchase.failure', $param_string);\n\t\t}\n\t\telse {\n\t\t\t\\Util\\RealtimeStats::geo_increment(\"billing.{$this->planName}purchase.failure\", $param_string);\n\t\t}\n\t}\n\n\n\tfunction refinePaypalDescription($description) {\n\t\treturn \\refinePaypalDescription($description, $this->months);\n\t}\n\n\n\tfunction storePaypalParams() {\n\t\tparent::storePaypalParams();\n\t\t$_SESSION['planName'] = $this->planName;\n\t\t$_SESSION['orderLength'] = $this->months;\n\t}\n\n\n\tfunction unstorePaypalParams() {\n\t\tparent::unstorePaypalParams();\n\t\t$this->planName = $_SESSION['planName'];\n\t\t$this->months = $_SESSION['orderLength'];\n\t}\n\n\n\n\t/* Template\n\t----------------------------------------------------------------------------------------------*/\n\n\n\tfunction getTemplateName() {\n\t\tglobal $ab;\n\t\t$freeTrialTest = false;\n\t\t$trialInfo = \\Billing\\Controller\\FreeTrialController::getTrialInfo($this->userID, $this->siteID);\n\t\t$refer = $this->refer;\n\t\tif (getProperty('user', $_SESSION['user_id'], 'free_trial_test')) {\n\t\t\t$freeTrialTest = $ab->getVariable('Signup.FreeTrial', 'freeTrial');\n\t\t}\n\n\t\tif ($this->pageState == 'comparison') {\n\t\t\treturn 'plan-comparison.phtml';\n\t\t}\n\t\telse if ($this->pageState == 'confirmation') {\n\t\t\tif ($trialInfo['is_trial']\n\t\t\t\t&& $freeTrialTest == 'with_credit_card') {\n\t\t\t\tif ($this->startTrial) {\n\t\t\t\t\treturn 'premium-trial-confirmation.phtml';\n\t\t\t\t} else {\n\t\t\t\t\t// changing an exising trial\n\t\t\t\t\treturn 'premium-trial-change-confirmation.phtml';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'premium-confirmation.phtml';\n\t\t}\n\t\telse {\n\n\t\t\tif ($this->isExtension) {\n\t\t\t\tif (getProperty('user', $_SESSION['user_id'], 'free_trial_test')\n\t\t\t\t\t&& $ab->getVariable('Signup.FreeTrial', 'freeTrial') == 'with_credit_card'\n\t\t\t\t\t&& $trialInfo['is_trial']) {\n\t\t\t\t\treturn 'premium-plan-trial-change.phtml';\n\t\t\t\t} else if ($this->isSite && getProperty('site', $this->siteID, 'trial_failed_to_convert')) {\n\t\t\t\t\t// Trial did not charge correctly when converting to paid, still allow downgrade to free\n\t\t\t\t\treturn 'premium-plan-trial-change.phtml';\n\t\t\t\t} else {\n\t\t\t\t\treturn 'premium-plan-extend.phtml';\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ($this->source == 'ed') {\n\t\t\t\t\treturn 'ed-pro.phtml';\n\t\t\t\t}\n\t\t\t\telse if (!$this->isSite) {\n\t\t\t\t\treturn 'pro.phtml';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 'premium-plan.phtml';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction getTemplateVars() {\n\t\tglobal $ab;\n\n\t\t$vars = array();\n\n\t\t$trialInfo = \\Billing\\Controller\\FreeTrialController::getTrialInfo($this->userID, $this->siteID);\n\n\t\t//get user's pricing model, either 'bundles' or 'standard'\n\t\t$userModel = UserModel::findById($this->userID);\n\t\t$useBundlePlans = $userModel->isInBundlesPricing();\n\t\t$useTriplePlayPlans = $userModel->getPricingModel() == UserModel::TRIPLE_PLAY_PRICING_MODEL;\n\t\t$isExtension = $this->isExtension;\n\t\t$existingService = $this->getExistingService();\n\t\t$isTrial = $trialInfo['is_trial'];\n\t\t$heading = tl(\"Congrats, your site has been upgraded!\");\n\n\t\tif ($isTrial && getProperty('user', $_SESSION['user_id'], 'free_trial_test')) {\n\t\t\t$paypalTrialPayment = getProperty('site', $this->siteID, 'free_trial_paypal_payment');\n\t\t}\n\n\t\tif ($this->pageState == 'comparison') {\n\t\t\t$vars = $this->getComparisonTemplateVars();\n\t\t}\n\t\telse if ($this->pageState == 'confirmation') {\n\t\t\t$plans = $this->getAllPlans();\n\t\t\t$noun = $plans[$this->planName]['noun'];\n\n\t\t\tif ($this->isSite) {\n\t\t\t\t$site = \\Site::getBySiteID($this->siteID);\n\t\t\t\t$customDomain = $site->custom_domain;\n\t\t\t}\n\n\t\t\tif ($this->startTrial) {\n\t\t\t\t$heading = tl('Your 15-day trial has begun!');\n\t\t\t}\n\n\t\t\tif ($this->freeDomainIssued) {\n\t\t\t\t$domain = $this->_generateDomainFromFQDN($_GET['domain']);\n\t\t\t\t$domainTld = $domain->tld;\n\t\t\t\t$domainName = $domain->domain_name;\n\t\t\t\t$noun = $plans[$this->planName]['name'];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (!$this->isExtension) {\n\t\t\t\t$vars = $this->getNewServiceTemplateVars();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$vars = $this->getExtensionTemplateVars();\n\t\t\t}\n\t\t\tif (!$this->months) {\n\t\t\t\t$months = 12;\n\t\t\t\t// Default business month AB test test group months is set to 1\n\t\t\t\t$disableOneMonthBusiness = !!\\getProperty('user', $this->userID, 'disableOneMonthBusiness');\n\t\t\t\t// Only accept AB test values when one month business isn't disabled\n\t\t\t\t$businessDefaultMonths = $disableOneMonthBusiness ? 12 : $ab->getVariable('purchase.defaultBusinessMonths', 'months');\n\t\t\t}\n\t\t}\n\n\t\tif ($this->isExtension) {\n\t\t\tif ($this->customTitle) {\n\t\t\t\t$title = $this->customTitle;\n\t\t\t} else if (getProperty('user', $_SESSION['user_id'], 'free_trial_test')\n\t\t\t\t&& $this->isSite && $trialInfo['is_trial']) {\n\t\t\t\t$freeTrialTest = $ab->getVariable('Signup.FreeTrial', 'freeTrial');\n\t\t\t\t$startTrial = $this->startTrial;\n\n\t\t\t\tif ($freeTrialTest == 'without_credit_card' || $this->refer == 'trial-ssl') {\n\t\t\t\t\tif ($trialInfo['days_left'] > 0) {\n\t\t\t\t\t\t$title = tl(\"Pay Now to End Trial\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$title = tl(\"Free Trial Expired\");\n\t\t\t\t\t}\n\n\t\t\t\t} else if ($freeTrialTest == 'with_credit_card') {\n\t\t\t\t\t$title = tl(\"Change Plan\");\n\t\t\t\t\t$heading = tl('Your plan has been updated!');\n\t\t\t\t}\n\t\t\t} else if ($this->isSite && getProperty('site', $this->siteID, 'trial_failed_to_convert')) {\n\t\t\t\t// Trial did not charge correctly when converting to paid, still allow downgrade to free\n\t\t\t\t$title = tl(\"Free Trial Expired\");\n\t\t\t\t$trialFailedCharge = true;\n\t\t\t}\n\t\t\t else {\n\t\t\t\t$title = tl(\"Extend Your Plan\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif ($this->isSite) {\n\t\t\t\tif ($this->customTitle) {\n\t\t\t\t\t$title = $this->customTitle;\n\t\t\t\t} else {\n\t\t\t\t\t$title = tl(\"Upgrade Your Site\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$title = tl(\"Upgrade Your Account\");\n\t\t\t}\n\t\t}\n\n\t\t$month_abbrev = tl(\"month\");\n\t\tif ($month_abbrev == \"month\") {\n\t\t\t$month_abbrev = \"mo\";\n\t\t}\n\n\t\tif ($this->desiredLevel) {\n\t\t\tlist(\n\t\t\t\t$affirmativeMessage,\n\t\t\t\t$negativeMessage,\n\t\t\t\t$pleaseMessage\n\t\t\t) = $this->buildDesireMessages();\n\n\t\t\t$existingPlanName = tl(\"free\");\n\t\t\t$existingLevel = $this->getExistingLevel();\n\t\t\tif ($existingLevel) {\n\t\t\t\t$existingPlan = $this->getPlanByLevel($existingLevel);\n\t\t\t\t$existingPlanName = $existingPlan['name'];\n\t\t\t}\n\t\t}\n\n\t\t// Once a trial has expired, show an alert at the top of the extend dialog allowing users to downgrade to free\n\t\tif (getProperty('user', $_SESSION['user_id'], 'free_trial_test')) {\n\t\t\t$freeTrialTest = $ab->getVariable('Signup.FreeTrial', 'freeTrial');\n\n\t\t\tif ($freeTrialTest == 'without_credit_card' && getProperty('site', $this->siteID, 'trial_expired')) {\n\t\t\t\t$trialEndedMessage = tl(\", but you'll lose functionality.\");\n\t\t\t} else if ($freeTrialTest == 'with_credit_card') {\n\t\t\t\t$trialChangeMessage = tl(\", but you'll lose functionality.\");\n\t\t\t}\n\t\t\t$showComparePlansLink = true;\n\t\t}\n\n\t\tif ($this->pageState != 'confirmation') {\n\t\t\t// desiredLevel is set if the user tries to use a feature that they do not have access to\n\t\t\t// defaultLevel is set if the user chooses a plan on comparePlans\n\t\t\tif ($this->desiredLevel == UpgradeRestrictions::STARTER_LEVEL || $this->defaultLevel == UpgradeRestrictions::STARTER_LEVEL) {\n\t\t\t\t$this->trackingTriggers[] = 'purchasing_starter';\n\t\t\t}\n\t\t\tif ($this->desiredLevel == UpgradeRestrictions::PRO_LEVEL || $this->defaultLevel == UpgradeRestrictions::PRO_LEVEL) {\n\t\t\t\t$this->trackingTriggers[] = 'purchasing_pro';\n\t\t\t}\n\t\t\tif ($this->desiredLevel == UpgradeRestrictions::BUSINESS_LEVEL || $this->defaultLevel == UpgradeRestrictions::BUSINESS_LEVEL) {\n\t\t\t\t$this->trackingTriggers[] = 'purchasing_business';\n\t\t\t}\n\t\t\t$this->trackingTriggers[] = 'purchasing_premium';\n\t\t}\n\n\t\t$starterPlanText = tl(\"A great way to get started. Connect your own domain, expanded statistics, and premium support.\");\n\t\t$proPlanText = tl(\"Professional multimedia features, powerful site search, and password protection to help your site stand out.\");\n\n\t\treturn array_merge(\n\t\t\tparent::getTemplateVars(),\n\t\t\tget_defined_vars(), // all variables in current scope,\n\t\t\t$vars\n\t\t);\n\t}\n\n\n\tfunction getComparisonTemplateVars() {\n\t\tglobal $ab;\n\t\t$plans = $this->getAllPlans();\n\n\t\tif ($this->fromDomain) {\n\t\t\t$fromDomain = true;\n\t\t}\n\n\t\tif ($this->upsellDomain) {\n\t\t\t$upsellDomain = $this->upsellDomain;\n\t\t}\n\n\t\t//get user's pricing model, either 'bundles' or 'standard'\n\t\t$userModel = UserModel::findById($this->userID);\n\t\t$useBundlePlans = $userModel->isInBundlesPricing();\n\n\t\t//check if user is in growth.squeeze test\n\t\t$isInSqueezeTest = $ab->getVariable('growth.squeeze', 'squeeze', $this->userID, false);\n\n\t\t// determine if each plan has already been used or not\n\t\t$existingLevel = $this->getExistingLevel();\n\t\tif ($existingLevel) {\n\t\t\tforeach ($plans as &$plan) {\n\t\t\t\tif ($plan['level'] == $existingLevel && !$this->allowDowngrade) {\n\t\t\t\t\t$plan['status'] = 'current';\n\t\t\t\t}\n\t\t\t\telse if ($plan['level'] < $existingLevel && !$this->allowDowngrade) {\n\t\t\t\t\t$plan['status'] = 'obsolete';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// build URLs for selecting each plan (not the best technique here)\n\t\t$baseUrl = $_SERVER['REQUEST_URI'];\n\t\t$baseUrl = preg_replace('/((\\?)|&)(comparison|defaultLevel)=[^&]*/', '$2', $baseUrl);\n\t\tforeach ($plans as &$plan) {\n\t\t\t$plan['url'] = $baseUrl . '&defaultLevel=' . $plan['level'];\n\t\t}\n\n\t\t$mentionExistingDomains = \\AccessControl\\UpgradeRestrictions::getMinimumLevel('existing_domain') > 0;\n\t\t$legacyCommerce = \\AccessControl\\UpgradeRestrictions::featureValueDisplayString('com_product_limit', 'main', \\AccessControl\\UpgradeRestrictions::PRO_LEVEL, $this->userID) == 'Unlimited';\n\n\t\treturn get_defined_vars();\n\t}\n\n\n\tfunction getNewServiceTemplateVars() {\n\t\tglobal $ab;\n\n\t\t$plans = $this->getUsablePlans();\n\n\t\t// determine if each plan will achieve the desired feature\n\t\tif ($this->desiredLevel) {\n\t\t\tforeach ($plans as &$plan) {\n\t\t\t\t$plan['satisfiesDesire'] = $plan['level'] >= $this->desiredLevel;\n\t\t\t}\n\t\t}\n\n\t\tif ($this->source == 'ed') {\n\n\t\t\t$total = $plans['pro']['services'][12]['price'];\n\n\t\t}\n\t\telse {\n\n\t\t\t// generate site list for site chooser\n\t\t\tif ($this->showSiteChooser) {\n\t\t\t\t$upgradableSites = $this->getUpgradableSites();\n\t\t\t}\n\n\t\t\t// determine which plan will be selected by default\n\t\t\t$defaultLevel = $this->defaultLevel;\n\t\t\tif (!$defaultLevel) {\n\t\t\t\t// if the feature calls for starter, don't select any plans by default.\n\t\t\t\t// (to allow for user to select better plans so we make more $$$).\n\t\t\t\t// otherwise, select the plan the feature needs.\n\t\t\t\tif ($this->desiredLevel > $plans['starter']['level']) {\n\t\t\t\t\t$defaultLevel = $this->desiredLevel;\n\t\t\t\t}\n\n\t\t\t\t// If the user is part of the free trial test allow starter to be preselected\n\t\t\t\tif (getProperty('user', $this->userID, 'free_trial_test')\n\t\t\t\t\t&& $ab->getVariable('Signup.FreeTrial', 'freeTrial') != 'no') {\n\t\t\t\t\t$defaultLevel = $this->desiredLevel;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($defaultLevel) {\n\t\t\t\t$defaultPlan = $this->getPlanByLevel($defaultLevel);\n\t\t\t\tif ($defaultPlan) {\n\t\t\t\t\t$defaultPlanName = $defaultPlan['name'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// for calculating prorating\n\t\t\t$existingService = $this->getExistingService();\n\n\n\t\t\t$pricingModelProperty = \\getProperty('user', $this->userID, 'pricing_model');\n\t\t\t$showFreeDomain = ($pricingModelProperty == 'bundles' || $pricingModelProperty == 'tripleplay')\n\t\t\t\t\t\t\t\t&& !$this->isExtension\n\t\t\t\t\t\t\t\t&& !$existingService;\n\t\t\tif ($showFreeDomain) {\n\t\t\t\t$freeDomainName = $_GET['domain'];\n\t\t\t}\n\t\t\t$showFreeGapps = ($pricingModelProperty == 'tripleplay') && !$this->isExtension\n\t\t\t\t\t\t\t\t&& !$existingService;\n\n\t\t\t// build the URL for the comparison page (not the best technique here)\n\t\t\t$comparisonUrl = $_SERVER['REQUEST_URI'];\n\t\t\t$comparisonUrl = preg_replace('/((\\?)|&)(comparison|defaultLevel)=[^&]*/', '$2', $comparisonUrl);\n\t\t\t$comparisonUrl .= '&comparison=1';\n\n\t\t\t$isEuUser = LocaleController::isEuUser();\n\t\t}\n\n\t\treturn get_defined_vars();\n\t}\n\n\n\tfunction getExtensionTemplateVars() {\n\n\t\t$plan = $this->getPlanByLevel($this->getExistingLevel());\n\t\t$plans = $this->allowDowngrade ? $this->getAllPlans() : array($plan);\n\t\tif($plan && $this->allowDowngrade) {\n\t\t\t$defaultPlanName = $plan['name'];\n\n\t\t\t$comparisonUrl = $_SERVER['REQUEST_URI'];\n\t\t\t$comparisonUrl = preg_replace('/((\\?)|&)(comparison|defaultLevel)=[^&]*/', '$2', $comparisonUrl);\n\t\t\t$comparisonUrl .= '&comparison=1';\n\t\t}\n\t\tif($this->allowDowngrade && ($this->desiredLevel || $this->defaultLevel)) {\n\t\t\t$defaultPlan = $this->getPlanByLevel($this->desiredLevel ?: $this->defaultLevel);\n\t\t\tif($defaultPlan) {\n\t\t\t\t$defaultPlanName = $defaultPlan['name'];\n\t\t\t}\n\t\t}\n\n\t\t$extensionAreaTitle = $plan['description'];\n\t\tif ($this->isSite) {\n\t\t\t$site = \\Site::getBySiteID($this->siteID);\n\t\t\t$extensionAreaTitle = $site->site_title ?: $extensionAreaTitle;\n\t\t}\n\n\t\t// for calculating new expiration date\n\t\t$existingService = $this->getExistingService();\n\n\t\treturn get_defined_vars();\n\t}\n\n\n\tfunction buildDesireMessages() {\n\t\t$affirmativeMessage = null;\n\t\t$negativeMessage = null;\n\n\t\t$restrictionID = $this->restrictionID;\n\t\tif ($restrictionID) {\n\n\t\t\tif ($restrictionID == '90122486') {\n\t\t\t\t$restrictionID = 'site_search';\n\t\t\t}\n\t\t\telse if (preg_match('/^allow_.*_contributors$/', $restrictionID)) {\n\t\t\t\t$restrictionID = 'allow_contributors';\n\t\t\t}\n\n\t\t\tif (is_numeric($restrictionID)) { // an element\n\n\t\t\t\t$displayName = $this->db->get_one(\n\t\t\t\t\t\"\n\t\t\t\t\tSELECT display_name FROM weebly_definition.page_element_definition\n\t\t\t\t\tWHERE element_id = ?\n\t\t\t\t\t\",\n\t\t\t\t\t$restrictionID\n\t\t\t\t);\n\t\t\t\tif ($displayName) {\n\t\t\t\t\t$displayName = preg_replace('/<[^>]*>/', ' ', $displayName); // some names have <br/>'s\n\t\t\t\t\t$displayName = preg_replace('/\\s+/', ' ', $displayName); // consolidate whitespace\n\t\t\t\t\t$displayName = strtolower($displayName);\n\t\t\t\t\t$affirmativeMessage = str_replace(\n\t\t\t\t\t\t'%%ELEMENT%%',\n\t\t\t\t\t\t$displayName,\n\t\t\t\t\t\ttl(\"Includes the %%ELEMENT%% element.\")\n\t\t\t\t\t);\n\t\t\t\t\t$negativeMessage = str_replace(\n\t\t\t\t\t\t'%%ELEMENT%%',\n\t\t\t\t\t\t$displayName,\n\t\t\t\t\t\ttl(\"Does not include the %%ELEMENT%% element.\")\n\t\t\t\t\t);\n\t\t\t\t\t$pleaseMessage = str_replace(\n\t\t\t\t\t\t'%%ELEMENT%%',\n\t\t\t\t\t\t$displayName,\n\t\t\t\t\t\ttl(\"Please upgrade to get the %%ELEMENT%% element.\")\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse { // some other feature\n\n\t\t\t\t$noun = Config::$FEATURE_NOUNS[$restrictionID];\n\t\t\t\tif ($noun) {\n\t\t\t\t\t$affirmativeMessage = str_replace(\n\t\t\t\t\t\t'%%FEATURE%%',\n\t\t\t\t\t\t$noun,\n\t\t\t\t\t\ttl(\"Includes %%FEATURE%%.\")\n\t\t\t\t\t);\n\t\t\t\t\t$negativeMessage = str_replace(\n\t\t\t\t\t\t'%%FEATURE%%',\n\t\t\t\t\t\t$noun,\n\t\t\t\t\t\ttl(\"Does not include %%FEATURE%%.\")\n\t\t\t\t\t);\n\t\t\t\t\t$pleaseMessage = str_replace(\n\t\t\t\t\t\t'%%FEATURE%%',\n\t\t\t\t\t\t$noun,\n\t\t\t\t\t\ttl(\"Please upgrade to get %%FEATURE%%.\")\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t$infinitive = Config::$FEATURE_INFINITIVES[$restrictionID];\n\t\t\t\tif ($infinitive) {\n\t\t\t\t\t$pleaseMessage = str_replace(\n\t\t\t\t\t\t'%%DOSOMETHING%%',\n\t\t\t\t\t\t$infinitive,\n\t\t\t\t\t\ttl(\"Please upgrade to %%DOSOMETHING%%.\")\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn array($affirmativeMessage, $negativeMessage, $pleaseMessage);\n\t}\n\n\t// Track views of comparison and form screens within billing window\n\tfunction trackScreenViews($screenName) {\n\t\tif (getProperty('user', $_SESSION['user_id'], 'paid_comparison_first_ab_participant')) {\n\t\t\t$views = getProperty('user', $_SESSION['user_id'], $screenName);\n\t\t\tsetProperty('user', $_SESSION['user_id'], $screenName, $views+1);\n\t\t}\n\t}\n\n\n\t/* Pre-Existing Service\n\t----------------------------------------------------------------------------------------------*/\n\n\n\tfunction getExistingLevel() {\n\t\t$service = $this->getExistingService();\n\t\treturn $service['level'];\n\t}\n\n\n\tfunction getExistingService() {\n\t\tif (!isset($this->existingService)) {\n\t\t\t$this->existingService = $this->_getExistingService();\n\t\t}\n\t\treturn $this->existingService;\n\t}\n\n\n\tfunction _getExistingService() {\n\t\tif ($this->userServiceID) {\n\t\t\t$service = BillingUserServiceModel::findByUserServiceId($this->userID, $this->userServiceID);\n\t\t} else {\n\t\t\t$service = BillingUserServiceModel::findPremiumSiteService($this->userID, $this->siteID);\n\t\t}\n\t\t//Found no service , lets check if its a grandfathered pro plan\n\t\tif (!$service && UpgradeRestrictions::hasOldPro($this->userID)) {\n\t\t\t$service = BillingUserServiceModel::findPremiumSiteService($this->userID, null);\n\t\t}\n\t\tif ($service) {\n\t\t\treturn array(\n\t\t\t\t'price' => floatval($service->amount),\n\t\t\t\t'months' => intval($service->recurring_period),\n\t\t\t\t'level' => intval($service->level),\n\t\t\t\t'renewsOn' => strtotime($service->renews_on),\n\t\t\t\t'scope' => $service->scope,\n\t\t\t\t'siteID' => $service->site_id, // hacky because this only applies when userServiceID\n\t\t\t\t'lastProSite' => \\isLastProSite($this->userID, $this->siteID, array('service_id' => $service->service_id)),\n\t\t\t\t'valueLeft' => $service->remaining_service_value\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction isExtendingOldPro() {\n\t\tif(!$this->isExtension) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$userServiceID = $_REQUEST['userServiceID'];\n\t\t$serviceID = $this->db->get_one(\"SELECT service_id FROM billing_user_service WHERE user_service_id=?\", $userServiceID);\n\t\treturn BillingServiceHelper::isAnyProAccount($serviceID);\n\t}\n\n\t/* Sites\n\t----------------------------------------------------------------------------------------------*/\n\n\n\tfunction getUpgradableSites() {\n\t\tif (!isset($this->upgradableSites)) {\n\t\t\t$this->upgradableSites = $this->_getUpgradableSites();\n\t\t}\n\t\treturn $this->upgradableSites;\n\t}\n\n\n\tfunction _getUpgradableSites() {\n\t\treturn $this->db->get_all_assoc(\n\t\t\t\"\n\t\t\tSELECT\n\t\t\ts.site_id AS id,\n\t\t\ts.site_title AS title\n\t\t\tFROM site AS s\n\t\t\tLEFT JOIN billing_user_service AS bus\n\t\t\tON bus.site_id = s.site_id\n\t\t\tAND bus.deleted = '0'\n\t\t\tAND (bus.status = 'active' OR bus.status = 'overdue')\n\t\t\tLEFT JOIN weebly_definition.billing_service AS bs\n\t\t\tON bs.service_id = bus.service_id\n\t\t\tWHERE s.user_id = ?\n\t\t\tAND s.deleted = '0'\n\t\t\tAND (bs.level < ? OR bs.level IS NULL)\n\t\t\t\",\n\t\t\t$this->userID,\n\t\t\t$this->desiredLevel ?: $this->getHighestPlanLevel()\n\t\t);\n\t}\n\n\n\n\t/* Plans\n\t----------------------------------------------------------------------------------------------*/\n\n\n\tfunction getUsablePlans() { // only really applicable to adding new service (not extending) // TODO: maybe rename to getPlansYouCanUpgradeTo()\n\t\t$existingLevel = $this->getExistingLevel() ?: 0;\n\n\t\t$allPlans = $this->getAllPlans();\n\n\t\t$usablePlans = array();\n\t\tforeach ($allPlans as $name => $plan) {\n\t\t\tif ($plan['level'] > $existingLevel) {\n\t\t\t\t$usablePlans[$name] = $plan;\n\t\t\t}\n\t\t}\n\t\treturn $usablePlans;\n\t}\n\n\n\tfunction getHighestPlanLevel() {\n\t\t$highestLevel = 0;\n\t\t$plans = $this->getAllPlans();\n\t\tforeach ($plans as $plan) {\n\t\t\t$highestLevel = max($plan['level'], $highestLevel);\n\t\t}\n\t\treturn $highestLevel;\n\t}\n\n\n\tfunction getPlanByLevel($level) {\n\t\t$allPlans = $this->getAllPlans();\n\t\tforeach ($allPlans as $plan) {\n\t\t\tif ($plan['level'] == $level) {\n\t\t\t\treturn $plan;\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction getAllPlans() {\n\t\tif (!isset($this->allPlans)) {\n\t\t\t// Get the user's set currency type\n\t\t\t$this->allPlans = $this->_getAllPlans($this->userCurrency);\n\t\t}\n\t\treturn $this->allPlans;\n\t}\n\n\n\tfunction _getAllPlans($currency = 'USD')\n\t{\n\t\t$disableOneMonthBusiness = !!\\getProperty('user', $this->userID, 'disableOneMonthBusiness');\n\n\t\t$request = new \\Data\\Request;\n\n\t\tif ($this->source == 'ed') {\n\t\t\t$request->Filter = array(\n\t\t\t\tnew \\Data\\InFilter('service_item_id', array(332,333))\n\t\t\t);\n\t\t} else {\n\t\t\t// Get user's pricing model, either 'standard', 'bundles', or 'tripleplay'\n\t\t\t$userModel = UserModel::findById($this->userID);\n\t\t\t$pricingModel = $userModel->getPricingModel();\n\n\t\t\tif ($disableOneMonthBusiness) {\n\t\t\t\t$term_length = array(6,12,24);\n\t\t\t} else {\n\t\t\t\t$term_length = array(1,6,12,24);\n\t\t\t}\n\t\t\t$product_group_filter = null;\n\n\t\t\tif ($this->isSite) {\n\t\t\t\tswitch ($pricingModel) {\n\t\t\t\t\tcase UserModel::STANDARD_PRICING_MODEL:\n\t\t\t\t\t\t$product_group_filter = new \\Data\\Filter('product_group', 'standard');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UserModel::TRIPLE_PLAY_PRICING_MODEL:\n\t\t\t\t\t\t$product_group_filter = new \\Data\\Filter('product_group', 'tripleplay');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase UserModel::BUNDLES_PRICING_MODEL:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t$product_group_filter = new \\Data\\Filter('product_group', 'bundle');\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//If pro account\n\t\t\t\t$product_group_filter = new \\Data\\Filter('product_group', 'proaccount');\n\t\t\t\t$currency = 'USD';\n\t\t\t}\n\t\t\t$request->Filter = array(\n\t\t\t\t$product_group_filter,\n\t\t\t\tnew \\Data\\Filter('currency_code', $currency),\n\t\t\t\tnew \\Data\\InFilter('term_length', $term_length),\n\t\t\t);\n\t\t\t$request->Sort = array(\n\t\t\t\tnew \\Data\\Sort('term_length', 'ASC')\n\t\t\t);\n\t\t}\n\n\t\t$serviceItems = \\Billing\\Model\\BillingServiceItemModel::find($request);\n\t\t$nameRowGroupings = array();\n\n\t\tforeach ($serviceItems as $item) {\n\t\t\t$base_service = $item->base_service(0);\n\t\t\tif (strpos($base_service->name, 'proAccount') !== false) {\n\t\t\t\t$shortname = 'pro';\n\t\t\t} else {\n\t\t\t\t$shortname = $base_service->name;\n\t\t\t}\n\t\t\t$plan_name = array();\n\t\t\t$plan_name['service_id'] = $item->legacy_service_id;\n\t\t\t$plan_name['description'] = $item->description;\n\t\t\t$plan_name['amount'] = $item->price;\n\t\t\t$plan_name['recurring_period'] = $item->term_length;\n\t\t\t$plan_name['level'] = $base_service->level;\n\t\t\t$plan_name['scope'] = $base_service->scope;\n\t\t\t$plan_name['service_item_id'] = $item->service_item_id;\n\t\t\t$nameRowGroupings[$shortname][$item->term_length][] = $plan_name;\n\t\t}\n\t\tif ($shortname == 'pro') {\n\t\t\tksort($nameRowGroupings[$shortname]);\n\t\t}\n\t\t$plans = array();\n\t\tforeach ($nameRowGroupings as $name => $monthRowGroupings) {\n\n\t\t\t$firstMonthlyPrice = 0;\n\t\t\t$monthlyPrice = 0;\n\n\t\t\tforeach ($monthRowGroupings as $months => $rows) {\n\t\t\t\t$row = $this->findUsableServiceRow($rows, $name, $months);\n\t\t\t\tif ($row) {\n\n\t\t\t\t\t$description = $row['description'];\n\n\t\t\t\t\tswitch ($description) {\n\t\t\t\t\t\tcase 'Weebly Business Site':\n\t\t\t\t\t\t\t$noun = tl('Business Site');\n\t\t\t\t\t\t\t$title = tl('Business');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Weebly Starter Site':\n\t\t\t\t\t\t\t$noun = tl('Starter Site');\n\t\t\t\t\t\t\t$title = tl('Starter');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Weebly Pro Account':\n\t\t\t\t\t\t\t$noun = tl('Pro Account');\n\t\t\t\t\t\t\t$title = tl('Pro');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Weebly Pro Site':\n\t\t\t\t\t\t\t$noun = tl('Pro Site');\n\t\t\t\t\t\t\t$title = tl('Pro');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$noun = preg_replace('/^Weebly\\s+/', '', $description);\n\t\t\t\t\t\t\t$title = preg_replace('/\\s*(Account|Site)\\s*$/', '', $noun);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t$months = intval($months);\n\t\t\t\t\t$price = floatval($row['amount']);\n\t\t\t\t\t$monthlyPrice = $price / $months;\n\t\t\t\t\t$level = intval($row['level']);\n\n\t\t\t\t\tif ($months < 12) {\n\t\t\t\t\t\t$durationText = $months . \" \" . ($months == 1 ? tl(\"month\") : tl(\"months\"));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$years = floor($months / 12);\n\t\t\t\t\t\t$durationText = $years . \" \" . ($years == 1 ? tl(\"year\") : tl(\"years\"));\n\t\t\t\t\t}\n\n\t\t\t\t\t// calculate savings\n\t\t\t\t\t$savings = 0;\n\t\t\t\t\tif ($firstMonthlyPrice) {\n\t\t\t\t\t\t$savings =\n\t\t\t\t\t\t\t($firstMonthlyPrice - $monthlyPrice)\n\t\t\t\t\t\t\t/ $firstMonthlyPrice\n\t\t\t\t\t\t\t* 100;\n\t\t\t\t\t}\n\t\t\t\t\t$firstMonthlyPrice = $firstMonthlyPrice ?: $monthlyPrice;\n\n\t\t\t\t\t$plans[$name]['name'] = $name;\n\t\t\t\t\t$plans[$name]['description'] = $description;\n\t\t\t\t\t$plans[$name]['noun'] = $noun;\n\t\t\t\t\t$plans[$name]['title'] = $plans[$name]['title'] ?: $title;\n\t\t\t\t\t$plans[$name]['level'] = max($level, $plans[$name]['level'] ?: 0);\n\t\t\t\t\t$plans[$name]['scope'] = $row['scope'];\n\t\t\t\t\t$plans[$name]['services'][$months] = array(\n\t\t\t\t\t\t'serviceID' => $row['service_id'],\n\t\t\t\t\t\t'price' => $price,\n\t\t\t\t\t\t'months' => $months,\n\t\t\t\t\t\t'monthlyPrice' => $monthlyPrice,\n\t\t\t\t\t\t'monthlyPriceFormatted' => NumberUtil::formatMoney($monthlyPrice, $currency, $this->userID),\n\t\t\t\t\t\t'savings' => $savings,\n\t\t\t\t\t\t'durationText' => $durationText,\n\t\t\t\t\t\t'serviceItemID' => $row['service_item_id']\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$plans[$name]['lowestMonthlyPrice'] = $monthlyPrice;\n\t\t\t$plans[$name]['lowestMonthlyPriceFormatted'] = NumberUtil::formatMoney($monthlyPrice, $currency, $this->userID);\n\t\t}\n\t\treturn $plans;\n\t}\n\n\t/**\n\t * Checks if a user can buy the six month business\n\t * plan. Everyone who already has six month business can\n\t * continue to buy it. This was briefly AB tested in May 2014.\n\t * In May 2015, domains bundled with plans was AB tested. Six month business\n\t * is one of the plans available to users in the 'test' bucket, so we want\n\t * to make sure it's available to 'control' bucket users too for a fair comparison.\n\t */\n\tprotected function allowSixMonthBusiness()\n\t{\n\t\tglobal $ab;\n\n\t\t$hasSixMonthBusiness = !!$this->db->get_one(\"\n\t\t\tSELECT user_id\n\t\t\tFROM billing_user_service\n\t\t\tWHERE user_id=?\n\t\t\t\tAND service_id='Weebly.businessSite6'\n\t\t\tLIMIT 1\",\n\t\t\t$this->userID\n\t\t);\n\n\t\tif ($hasSixMonthBusiness) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$pricing_model = \\getProperty('user', $this->userID, 'pricing_model');\n\t\t\tif ($pricing_model == 'standard') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\n\tfunction findUsableServiceRow($rows, $name, $months) {\n\t\tglobal $ab;\n\n\t\t$targetServiceID = null;\n\t\tif (!$this->isSite && $name == 'pro') {\n\t\t\t$targetServiceID = $ab->getVariable('Weebly.proPrices.test2', 'proAccount' . $months);\n\t\t}\n\n\t\tif ($targetServiceID) {\n\t\t\tforeach ($rows as $row) {\n\t\t\t\tif ($row['service_id'] == $targetServiceID) {\n\t\t\t\t\treturn $row;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $rows[0];\n\t}\n\n\t/**\n\t * Determines if this user qualifies for a domain credit\n\t * i.e. a coupon for a free domain\n\t *\n\t * @param BillingUserService $userService\n\t *\n\t * @return bool\n\t */\n\tprivate function isPurchasingBundlePlan($userService = null)\n\t{\n\t\tif(empty($userService)){\n\t\t\t$service_id = $this->serviceID;\n\t\t}\n\t\telse{\n\t\t\t$service_id = $userService->service_id;\n\t\t}\n\t\t$existingService = $this->getExistingService();\n\t\treturn (\n\t\t\t\t\t!$this->isExtension && !$existingService &&\n\t\t\t\t\t\\getProperty('user', $this->userID, 'pricing_model') == 'bundles' &&\n\t\t\t\t\tBillingServiceHelper::isBundle($service_id)\n\t\t\t\t);\n\t}\n\n\t/**\n\t * Determines if this user qualifies for both a domain credit and a Google Apps\n\t * credit from a \"Triple Play\" plan.\n\t * @param  BillingUserService  $userService\n\t * @return boolean\n\t */\n\tprivate function isPurchasingTriplePlayPlan($userService = null)\n\t{\n\t\tif (empty($userService)) {\n\t\t\t$service_id = $this->serviceID;\n\t\t} else {\n\t\t\t$service_id = $userService->service_id;\n\t\t}\n\t\treturn (\n\t\t\t\t!$this->isExtension &&\n\t\t\t\t!$this->getExistingService() &&\n\t\t\t\t\\getProperty('user', $this->userID, 'pricing_model') == \\User\\Model\\UserModel::TRIPLE_PLAY_PRICING_MODEL &&\n\t\t\t\tBillingServiceHelper::isTriplePlay($service_id)\n\t\t\t);\n\t}\n\n\t/**\n\t * Determines if this user qualifies for a Google Apps credit from upgrading\n\t * \"Triple Play\" plan from Starter\n\t * @param  BillingUserService  $userService\n\t * @return boolean\n\t */\n\tprivate function isUpgradingTriplePlayPlanFromStarter($userService = null)\n\t{\n\t\tif (empty($userService)) {\n\t\t\t$service_id = $this->serviceID;\n\t\t} else {\n\t\t\t$service_id = $userService->service_id;\n\t\t}\n\n\t\t$existingLevel = $this->getExistingLevel();\n\n\t\treturn (\n\t\t\t\t!$this->isExtension &&\n\t\t\t\t$existingLevel == UpgradeRestrictions::STARTER_LEVEL &&\n\t\t\t\t\\getProperty('user', $this->userID, 'pricing_model') == \\User\\Model\\UserModel::TRIPLE_PLAY_PRICING_MODEL &&\n\t\t\t\tBillingServiceHelper::isTriplePlay($service_id)\n\t\t\t);\n\t}\n\n\t/**\n\t * @param $domainName\n\t *\n\t * @return stdClass\n\t */\n\tprivate function _generateDomainFromFQDN($domainName)\n\t{\n\t\t$domain = new stdClass;\n\t\t$domain->months = 12;\n\t\t$domain->service_id = 'Weebly.customDomain12-bundle';\n\n\t\tlist($tld, $domain_name) = explode('.', strrev($domainName), 2);\n\n\t\t$domain->tld = strrev($tld);\n\t\t$domain->domain_name = strrev($domain_name);\n\n\t\treturn $domain;\n\t}\n\n\tprivate function shouldShowAppsCredit($user)\n\t{\n\t\t// only show credit for US and Canada users\n\t\t$locale = LocaleController::getLocale($user->user_id);\n\t\treturn in_array($locale, array('US', 'CA'));\n\t}\n\n}\n","markerStore":{"nextMarkerId":362,"markersById":{"0":{"range":{"start":{"row":758,"column":0},"end":{"row":758,"column":0}},"properties":{"type":"selection","editorId":558,"goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":65,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/weebly/php/Billing/PurchaseScreen/PremiumPlanController.php","digestWhenLastPersisted":"7a68ee17d307b2b001d84f3b0aa58c21f147315a","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"define([\n\t'jquery',\n\t'underscore',\n\t'backbone-all',\n\t'mustache',\n\t'util/currency-utils',\n\t'admin/app',\n\t'tpl!admin/support/user/purchase/totals'\n], function(\n\t$, _,\n\tBackbone,\n\tMustache,\n\tCurrency,\n\tadminApp,\n\tviewTpl\n\t) {\n\tvar TotalsView = Backbone.Marionette.ItemView.extend({\n\t\ttemplate: Mustache.compile(viewTpl),\n\n\t\ttemplateHelpers: function() {\n\n\t\t\treturn {\n\t\t\t\tsubtotalAmount: function(){\n\t\t\t\t\treturn Currency.formatMoney(this.subtotal, this.currency, this.locale);\n\t\t\t\t},\n\t\t\t\tprorated: function(){\n\t\t\t\t\treturn Currency.formatMoney(this.serviceProrate, this.currency, this.locale);\n\t\t\t\t},\n\t\t\t\tcredit: function() {\n\t\t\t\t\t// User credit is applied before the coupon and cannot exceed the total\n\t\t\t\t\tthis.credits = parseFloat(this.credits);\n\t\t\t\t\tvar maxCredit = (this.credits > this.subtotal) ? this.subtotal : this.credits;\n\t\t\t\t\treturn maxCredit > 0 ? Currency.formatMoney(maxCredit.toFixed(2), this.currency, this.locale) : 0;\n\t\t\t\t},\n\t\t\t\tdiscount: function() {\n\t\t\t\t\tif (this.selectedCoupon) {\n\t\t\t\t\t\tvar discountAmount = (this.selectedCoupon.get('discount_percent') / 100) * (this.subtotal - this.credit());\n\t\t\t\t\t\treturn Currency.formatMoney(discountAmount, this.currency, this.locale);\n\t\t\t\t\t}\n\t\t\t\t\treturn 0;\n\t\t\t\t},\n\t\t\t\ttotal: function() {\n\t\t\t\t\tvar total = this.subtotal - this.credit() - this.discount() - this.serviceProrate;\n\t\t\t\t\ttotal = total >= 0 ? total : 0;\n\t\t\t\t\treturn Currency.formatMoney(total.toFixed(2), this.currency, this.locale);\n\t\t\t\t},\n\t\t\t\tinactiveClass: function() {\n\t\t\t\t\treturn this.subtotal == 0 ? \"inactive\": \"\";\n\t\t\t\t},\n\t\t\t\tdiscountedPrice: function() {\n\t\t\t\t\treturn (parseFloat(this.credit()) + parseFloat(this.discount()) + this.serviceProrate) > 0;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tui: {\n\t\t\t'discount': '.discount',\n\t\t\t'subtotal': '.subtotal',\n\t\t\t'total': '.total'\n\t\t},\n\n\t\tmodelEvents: {\n\t\t\t\"change\": \"render\"\n\t\t},\n\n\t\tonShow: function () {\n\t\t}\n\n\t});\n\n\treturn TotalsView;\n});\n","markerStore":{"nextMarkerId":71,"markersById":{"0":{"range":{"start":{"row":20,"column":0},"end":{"row":20,"column":0}},"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null,"preserveFolds":true},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":33,"undoStack":[{"type":"group-start","snapshot":{"0":{"range":[[22,31],[22,31]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[22,31],[22,31]],"newRange":[[22,31],[23,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[23,0],[23,0]],"newRange":[[23,0],[23,5]],"oldText":"","newText":"\t\t\t\t\t"}},{"type":"change","content":{"oldRange":[[23,5],[23,5]],"newRange":[[23,5],[23,6]],"oldText":"","newText":"d"}},{"type":"change","content":{"oldRange":[[23,6],[23,6]],"newRange":[[23,6],[23,7]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[23,7],[23,7]],"newRange":[[23,7],[23,8]],"oldText":"","newText":"b"}},{"type":"group-end","snapshot":{"0":{"range":[[23,8],[23,8]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[23,8],[23,8]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[23,0],[23,8]],"newRange":[[23,0],[23,0]],"oldText":"\t\t\t\t\tdeb","newText":""}},{"type":"change","content":{"oldRange":[[22,31],[23,0]],"newRange":[[22,31],[22,31]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[22,31],[22,31]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[21,11],[21,11]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[21,11],[21,11]],"newRange":[[21,11],[22,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[22,0],[22,0]],"newRange":[[22,0],[22,4]],"oldText":"","newText":"\t\t\t\t"}},{"type":"change","content":{"oldRange":[[22,4],[22,4]],"newRange":[[22,4],[22,5]],"oldText":"","newText":"d"}},{"type":"change","content":{"oldRange":[[22,5],[22,5]],"newRange":[[22,5],[22,6]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[22,6],[22,6]],"newRange":[[22,6],[22,7]],"oldText":"","newText":"b"}},{"type":"change","content":{"oldRange":[[22,7],[22,7]],"newRange":[[22,7],[22,8]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[22,8],[22,8]],"newRange":[[22,8],[22,9]],"oldText":"","newText":"g"}},{"type":"change","content":{"oldRange":[[22,9],[22,9]],"newRange":[[22,9],[22,10]],"oldText":"","newText":"g"}},{"type":"group-end","snapshot":{"0":{"range":[[22,10],[22,10]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[22,10],[22,10]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[22,10],[22,10]],"newRange":[[22,10],[22,11]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[22,11],[22,11]],"newRange":[[22,11],[22,12]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[22,12],[22,12]],"newRange":[[22,12],[22,13]],"oldText":"","newText":";"}},{"type":"group-end","snapshot":{"0":{"range":[[22,13],[22,13]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[22,13],[22,13]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[22,0],[22,13]],"newRange":[[22,0],[22,0]],"oldText":"\t\t\t\tdebugger;","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[22,0],[22,0]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[22,0],[22,0]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[21,11],[22,0]],"newRange":[[21,11],[21,11]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[21,11],[21,11]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[{"type":"group-end","snapshot":{"0":{"range":[[50,14],[50,14]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[50,13],[50,13]],"newRange":[[50,13],[50,14]],"oldText":"","newText":";"}},{"type":"group-start","snapshot":{"0":{"range":[[50,13],[50,13]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-end","snapshot":{"0":{"range":[[50,15],[50,15]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[50,14],[50,14]],"newRange":[[50,14],[50,15]],"oldText":"","newText":"/"}},{"type":"change","content":{"oldRange":[[50,13],[50,13]],"newRange":[[50,13],[50,14]],"oldText":"","newText":"/"}},{"type":"group-start","snapshot":{"0":{"range":[[50,13],[50,13]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-end","snapshot":{"0":{"range":[[50,13],[50,13]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[50,12],[50,12]],"newRange":[[50,12],[50,13]],"oldText":"","newText":"0"}},{"type":"group-start","snapshot":{"0":{"range":[[50,12],[50,12]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-end","snapshot":{"0":{"range":[[50,12],[50,12]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[50,11],[50,11]],"newRange":[[50,11],[50,12]],"oldText":"","newText":" "}},{"type":"group-start","snapshot":{"0":{"range":[[50,11],[50,11]],"properties":{"type":"selection","editorId":574,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}}]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/weebly/javascript/admin/view/user/purchase/TotalsView.js","digestWhenLastPersisted":"fb3f9c69586094dfa04ae6dcc7260c3e6a275454","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"define([\n\t'jquery',\n\t'underscore',\n\t'backbone-all',\n\t'mustache',\n\t'admin/app',\n\t'tpl!admin/support/user/purchase/domain',\n\t'util/ui/wInput'\n], function(\n\t$,\n\t_,\n\tBackbone,\n\tMustache,\n\tadminApp,\n\tviewTpl\n\t) {\n\tvar DomainPurchaseView = Backbone.Marionette.Layout.extend({\n\t\ttemplate: Mustache.compile(viewTpl),\n\n\t\tvalidDomain: false,\n\n\t\tui: {\n\t\t\t'domainInput': '#domainInput',\n\t\t\t'domainSuccessIcon': '#domainSuccessIcon',\n\t\t\t'siteSelect': '#siteSelect',\n\t\t\t'termSelect': '#termSelect',\n\t\t\t'tldSelect': '#topLevelDomainSelect',\n\t\t\t'termSelectLabel': '#termSelectLabel',\n\t\t\t'privateCheckbox': '#privateCheckbox',\n\t\t\t'serviceId': '#serviceId'\n\t\t},\n\n\t\tevents: {\n\t\t\t'change @ui.termSelect': 'recalculateSubTotal',\n\t\t\t'change @ui.privateCheckbox': 'recalculateSubTotal',\n\t\t\t'change @ui.tldSelect': 'handleDomainInput',\n\t\t\t'keydown @ui.domainInput': 'handleDomainInput'\n\t\t},\n\n\t\tinitialize: function(options) {\n\t\t\tvar view = this;\n\t\t\tview.paymentModel = options.paymentModel;\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar view = this\n\t\t\tview.loadDomainServices();\n\t\t\tview.loadDefaultTlds();\n\t\t},\n\n\t\tonShow: function (){\n\t\t\tthis.ui.siteSelect.wSelectbox({theme:'com'});\n\t\t\tthis.ui.privateCheckbox.wCheckbox();\n\t\t},\n\n\t\tloadDomainServices: function() {\n\t\t\tvar view = this;\n\n\t\t\t_W.Admin.RPC.Domain.getDomainServices(this.model.get(\"user_id\")).done( function(response) {\n\t\t\t\tif (response.success) {\n\t\t\t\t\tview.showDomainServices(_.sortBy(response.data, 'recurring_period'));\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tshowDomainServices: function(services) {\n\t\t\tvar view = this;\n\n\t\t\tview.ui.termSelect.empty();\n\n\t\t\tthis.domainServices = services;\n\t\t\t_.each(services, function(service) {\n\t\t\t\tif (service.service_id.indexOf('Whois') == -1) {\n\t\t\t\t\tview.ui.termSelect.append('<option value=\"' + service.recurring_period + '\">' + service.recurring_period_label + '</option>');\n\t\t\t\t}\n\t\t\t})\n\t\t\tview.ui.termSelect.wSelectbox({theme:'com'});\n\t\t\tview.recalculateSubTotal();\n\t\t},\n\n\t\tloadDefaultTlds: function() {\n\t\t\tvar view = this;\n\n\t\t\t_W.Admin.RPC.Site.getDefaultDomainTlds().done(function(response){\n\t\t\t\tif (response.success) {\n\t\t\t\t\tview.showDefaultTlds(response.data);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tshowDefaultTlds: function(tlds) {\n\t\t\tvar view = this;\n\n\t\t\tview.ui.tldSelect.empty();\n\t\t\t_.each(tlds, function(tld) {\n\t\t\t\tview.ui.tldSelect.append('<option value=\"' + tld + '\">' + tld + '</option>');\n\t\t\t})\n\t\t\tthis.ui.tldSelect.wSelectbox({theme:'com'});\n\t\t},\n\n\t\trecalculateSubTotal: function() {\n\t\t\tvar view = this;\n\n\t\t\tvar service = _.find(view.domainServices, function(service) {\n\t\t\t\tvar recurring_period_matches = (service.recurring_period == view.ui.termSelect.val());\n\t\t\t\tif (view.ui.privateCheckbox.attr('checked')) {\n\t\t\t\t\treturn recurring_period_matches && service.service_id.indexOf('Whois') > -1;\n\t\t\t\t}\n\t\t\t\treturn recurring_period_matches;\n\t\t\t});\n\t\t\tvar discount = service.discount.toFixed(0);\n\n\t\t\tview.ui.serviceId.val(service.service_id);\n\t\t\tview.ui.termSelectLabel.html('$' + service.yearly_price + '/yr' + (discount == \"0\" ? '' : ' &mdash; <span class=\"purchase-sale\">save ' + discount + '%</span>'));\n\n\t\t\tview.paymentModel.set('subtotal', service.amount);\n\t\t},\n\n\t\thandleDomainInput: _.debounce(function(){\n\t\t\tvar view = this;\n\t\t\tvar domainName = $.trim(view.ui.domainInput.val());\n\t\t\tvar tld = view.ui.tldSelect.val();\n\n\t\t\tview.ui.domainSuccessIcon.removeClass('available unavailable');\n\n\t\t\tif (domainName == ''){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_W.Admin.RPC.Site.checkDomainAvailable(domainName, tld).done(function(result){\n\t\t\t\tif(result.data){\n\t\t\t\t\tview.ui.domainSuccessIcon\n\t\t\t\t\t\t.removeClass('w-icon-delete')\n\t\t\t\t\t\t.addClass('available');\n\t\t\t\t\tview.validDomain = true;\n\t\t\t\t\tview.recalculateSubTotal();\n\t\t\t\t} else {\n\t\t\t\t\tview.ui.domainSuccessIcon.addClass('unavailable w-icon-delete');\n\t\t\t\t\tview.recalculateSubTotal();\n\t\t\t\t}\n\t\t\t})\n\t\t}, 500)\n\t});\n\n\treturn DomainPurchaseView;\n});","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":58,"column":63},"end":{"row":58,"column":63}},"properties":{"type":"selection","editorId":582,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/weebly/javascript/admin/view/user/purchase/DomainPurchaseView.js","digestWhenLastPersisted":"55ceb94b17eb457a5fed23d10bbec136d628a6b7","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"define([\n\t'jquery',\n\t'underscore',\n\t'backbone-all',\n\t'mustache',\n\t'admin/app',\n\t'tpl!admin/support/user/purchase/payment'\n], function(\n\t$, _,\n\tBackbone,\n\tMustache,\n\tadminApp,\n\tviewTpl\n\t) {\n\tvar PaymentView = Backbone.Marionette.ItemView.extend({\n\t\ttemplate: Mustache.compile(viewTpl),\n\n\t\ttemplateHelpers: function() {\n\t\t\tvar view = this;\n\n\t\t\treturn {\n\t\t\t\tcoupons: function() {\n\t\t\t\t\t// only show coupons that are active and can be used\n\t\t\t\t\treturn _.where(this.billing_coupons, {available: true});\n\t\t\t\t},\n\t\t\t\tcredit_card_profiles: function() {\n\t\t\t\t\t_.filter(this.payment_profiles, function(profile) {\n\t\t\t\t\t\treturn profile.cc_type != 'PayPal';\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\tshow_coupons: view.paymentModel.get('enableCoupons')\n\t\t\t}\n\t\t},\n\n\t\tui: {\n\t\t\t'paymentSelect': '#paymentSelect',\n\t\t\t'couponSelect': '#couponSelect',\n\t\t\t'addPayment': '.add-new',\n\t\t\t'addCoupon': '.add-coupon'\n\t\t},\n\n\t\tevents: {\n\t\t\t'change @ui.paymentSelect': 'handlePaymentSelect',\n\t\t\t'change @ui.couponSelect': 'handleCouponSelect',\n\t\t\t'click @ui.addPayment': 'addPayment',\n\t\t\t'click @ui.addCoupon': 'addCoupon'\n\t\t},\n\n\t\tmodelEvents: {\n\t\t\t'change:billing_coupons change:billing_profiles': 'reRender'\n\t\t},\n\n\t\tinitialize: function(options) {\n\t\t\tvar view = this;\n\t\t\tview.paymentModel = options.paymentModel;\n\t\t\tview.listenTo(view.paymentModel, 'change', view.onShow);\n\t\t\tview.listenTo(view.paymentModel, 'change:selectedService', view.render);\n\t\t\tview.listenTo(view.paymentModel, 'change:enableCoupons', view.render);\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tvar view = this;\n\t\t\tview.ui.paymentSelect.wSelectbox({theme:'com'});\n\t\t\tview.ui.couponSelect.wSelectbox({theme:'com'});\n\t\t},\n\n\t\treRender: function() {\n\t\t\tthis.render();\n\t\t\tthis.onShow();\n\t\t},\n\n\t\thandleCouponSelect: function(evt) {\n\t\t\tvar couponId = this.model.get('user_id') + '-' + $(evt.target).val();\n\t\t\tvar coupon = this.model.get('billing_coupons').get(couponId);\n\t\t\tthis.paymentModel.set('selectedCoupon', coupon);\n\t\t},\n\n\t\taddPayment: function() {\n\t\t\tadminApp.vent.trigger('admin:dialog:addBillingProfile:show');\n\t\t},\n\n\t\taddCoupon: function() {\n\t\t\tadminApp.vent.trigger('admin:coupon:addCoupon:show');\n\t\t\tthis.paymentModel.set('selectedCoupon', null);\n\t\t}\n\n\t});\n\n\treturn PaymentView;\n});","markerStore":{"nextMarkerId":20,"markersById":{"0":{"range":{"start":{"row":57,"column":54},"end":{"row":57,"column":54}},"properties":{"type":"selection","editorId":586,"goalScreenRange":null,"preserveFolds":true},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":36,"undoStack":[{"type":"group-start","snapshot":{"0":{"range":[[54,44],[54,44]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[54,44],[54,44]],"newRange":[[54,44],[55,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[55,0],[55,0]],"newRange":[[55,0],[55,3]],"oldText":"","newText":"\t\t\t"}},{"type":"group-end","snapshot":{"0":{"range":[[55,3],[55,3]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[55,3],[55,3]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[55,3],[55,3]],"newRange":[[55,3],[55,4]],"oldText":"","newText":"d"}},{"type":"change","content":{"oldRange":[[55,4],[55,4]],"newRange":[[55,4],[55,5]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[55,5],[55,5]],"newRange":[[55,5],[55,6]],"oldText":"","newText":"b"}},{"type":"change","content":{"oldRange":[[55,6],[55,6]],"newRange":[[55,6],[55,7]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[55,7],[55,7]],"newRange":[[55,7],[55,8]],"oldText":"","newText":"g"}},{"type":"change","content":{"oldRange":[[55,8],[55,8]],"newRange":[[55,8],[55,9]],"oldText":"","newText":"g"}},{"type":"change","content":{"oldRange":[[55,9],[55,9]],"newRange":[[55,9],[55,10]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[55,10],[55,10]],"newRange":[[55,10],[55,11]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[55,11],[55,11]],"newRange":[[55,11],[55,12]],"oldText":"","newText":";"}},{"type":"group-end","snapshot":{"0":{"range":[[55,12],[55,12]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[55,12],[55,12]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[90,3],[90,3]],"newRange":[[90,3],[91,0]],"oldText":"","newText":"\n"}},{"type":"group-end","snapshot":{"0":{"range":[[55,12],[55,12]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[55,12],[55,12]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[55,0],[55,12]],"newRange":[[55,0],[55,0]],"oldText":"\t\t\tdebugger;","newText":""}},{"type":"change","content":{"oldRange":[[54,44],[55,0]],"newRange":[[54,44],[54,44]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[54,44],[54,44]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[60,22],[60,22]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[60,22],[60,22]],"newRange":[[60,22],[61,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[61,0],[61,0]],"newRange":[[61,0],[61,3]],"oldText":"","newText":"\t\t\t"}},{"type":"group-end","snapshot":{"0":{"range":[[61,3],[61,3]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[61,3],[61,3]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[61,3],[61,3]],"newRange":[[61,3],[61,4]],"oldText":"","newText":"d"}},{"type":"change","content":{"oldRange":[[61,4],[61,4]],"newRange":[[61,4],[61,5]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[61,5],[61,5]],"newRange":[[61,5],[61,6]],"oldText":"","newText":"b"}},{"type":"change","content":{"oldRange":[[61,6],[61,6]],"newRange":[[61,6],[61,7]],"oldText":"","newText":"u"}},{"type":"change","content":{"oldRange":[[61,7],[61,7]],"newRange":[[61,7],[61,8]],"oldText":"","newText":"g"}},{"type":"change","content":{"oldRange":[[61,8],[61,8]],"newRange":[[61,8],[61,9]],"oldText":"","newText":"g"}},{"type":"change","content":{"oldRange":[[61,9],[61,9]],"newRange":[[61,9],[61,10]],"oldText":"","newText":"e"}},{"type":"change","content":{"oldRange":[[61,10],[61,10]],"newRange":[[61,10],[61,11]],"oldText":"","newText":"r"}},{"type":"change","content":{"oldRange":[[61,11],[61,11]],"newRange":[[61,11],[61,12]],"oldText":"","newText":";"}},{"type":"group-end","snapshot":{"0":{"range":[[61,12],[61,12]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[61,12],[61,12]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[61,0],[61,12]],"newRange":[[61,0],[61,0]],"oldText":"\t\t\tdebugger;","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[61,0],[61,0]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[61,0],[61,0]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[60,22],[61,0]],"newRange":[[60,22],[60,22]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[60,22],[60,22]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"group-start","snapshot":{"0":{"range":[[57,54],[57,54]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}},{"type":"change","content":{"oldRange":[[89,0],[89,0]],"newRange":[[89,0],[89,3]],"oldText":"","newText":"});"}},{"type":"change","content":{"oldRange":[[89,3],[90,0]],"newRange":[[89,3],[89,3]],"oldText":"});\n","newText":""}},{"type":"group-end","snapshot":{"0":{"range":[[57,54],[57,54]],"properties":{"type":"selection","editorId":586,"goalScreenRange":null},"reversed":true,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/weebly/javascript/admin/view/user/purchase/PaymentView.js","digestWhenLastPersisted":"b9e03bd4760926762c875450143d1ddd4db4e94e","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"<?php\n\nnamespace Billing\\PurchaseScreen;\n\nrequire_once CONFIG_INCL_PATH . '/billing.php';\nrequire_once CONFIG_INCL_PATH . '/ab_test.php';\nrequire_once CONFIG_INCL_PATH . '/billing_utils.php';\nrequire_once CONFIG_INCL_PATH . '/paypalphp/httprequest.php';\nrequire_once CONFIG_INCL_PATH . '/paypalphp/paypal.php';\n\nuse \\tl, \\tli, \\Billing, \\BillingUserService, \\BillingUserProfiles, \\Billing\\Tax, \\Util\\LocationHelper;\nuse \\Billing\\Providers\\AdyenProvider;\nuse \\Billing\\Providers\\BrainTreeProvider;\nuse \\Billing\\Model\\BillingServiceItemModel;\nuse \\Billing\\Controller\\BillingUserServiceController;\nuse \\Billing\\Controller\\ReportingController;\nuse \\Billing\\Controller\\ReportingOrderController;\nuse \\Billing\\Controller\\PaymentProviderController;\nuse User\\Model\\UserModel;\nuse i18n\\Controller\\LocaleController;\n\n$_SESSION['last_transaction'] = array(); // used in ->close()\n\nclass PaymentController extends Controller {\n\n\tconst ADYEN = 'adyen';\n\tconst BRAINTREE = 'braintree';\n\tconst AUTHORIZE_NET = 'authorize';\n\n\tpublic $pageState;\n\tpublic $isFromPayPal;\n\tpublic $paypalAccount = \\Paypal::ACCOUNT_WEEBLY;\n\n\t// info about this controller\n\tpublic $isExtension;\n\n\t// needed for new purchase\n\tpublic $serviceID;\n\tpublic $serviceItemID;\n\tpublic $forceAllowCredits = false;\n\n\t// info about existing purchase\n\tpublic $userServiceIDs;\n\tpublic $userServiceID;\n\tpublic $userService;\n\tpublic $status; // of the user service\n\tpublic $billingProfile;\n\n\t// general payment info\n\tpublic $action; // blank or \"payment\" or \"frompaypal\" or \"coupon\" // more of a \"submitType\"\n\tpublic $probablyFree;\n\tpublic $paymentType; // \"cc\" or \"paypal\"\n\tpublic $existing;\n\tpublic $existingCard;\n\tpublic $deleteCard;\n\tpublic $couponCode;\n\tpublic $quantity = 1; // TODO: do getQuantity() instead\n\n\t// new credit card fields // TODOMAYBE: rename this to be about \"cc\"\n\tpublic $formSize = 'long'; //ab test between form with country and phone number or without\n\tpublic $creditCardNumber;\n\tpublic $expirationDate;\n\tpublic $cvv2;\n\tpublic $zip;\n\tpublic $country;\n\tpublic $firstName;\n\tpublic $lastName;\n\tpublic $year;\n\tpublic $month;\n\tpublic $phone;\n\tpublic $vat_id;\n\n\t// user-related\n\tpublic $db;\n\tpublic $userID;\n\tpublic $user;\n\tpublic $loggedInUserID;\n\tpublic $username;\n\tpublic $source;\n\tpublic $email;\n\tpublic $siteID; // TODO: should this be moved to PremiumPlanController only?\n\n\t// variables in response to form submission\n\tpublic $errorField;\n\tpublic $errorMessage;\n\tpublic $errorType; // what part of screen error should go. if null, part of payment area\n\n\t// misc\n\tpublic $refer;\n\tpublic $appSubdomain; // like \"shaw-devel\" for shaw-devel.weebly.com\n\tpublic $trackingTriggers = array(); // array of tracking trigger codes to fire\n\n\tpublic $allowExistingPaymentMethods = true;\n\tpublic $allowPayPal = true; // TODO: enforce in process() ?\n\tpublic $createPayPalBillingAgreement = true; //Set to true when the service is expected to be recurring\n\n\tpublic $addons = array();\n\n\t// When clicking on link in email to be redirected to billing page to compare plans,\n\t// only in this instance we allow a link back to dashboard\n\tpublic $dashboardAccess;\n\n\tfunction __construct($isExtension=false) {\n\n\t\t$this->isExtension = $isExtension;\n\n\t\tglobal $db, $ab;\n\t\t$this->db = $db;\n\t\t$this->userID = $_SESSION['user_id'];\n\t\t$this->user = UserModel::findById($_SESSION['user_id']);\n\t\t$this->loggedInUserID = $_SESSION['logged_in_user'];\n\t\t$this->username = $_SESSION['username'];\n\t\t$this->source = $_SESSION['source'];\n\t\t$this->email = $db->get_one(\"SELECT email FROM user WHERE user_id=?\", $this->userID);\n\t\t$this->siteID = $_GET['site_id'] ?: $_SESSION['site_id'];\n\t\t$this->dashboardAccess = $_REQUEST['dashboardAccess'] == 1 ? true : false;\n\t\t$this->userCurrency = LocaleController::getCurrency($this->userID);\n\t\t$this->userLocale = LocaleController::getLanguageAndCountry($this->userID);\n\n\t\tif (!ctype_digit($this->siteID)) {\n\t\t\t$this->siteID = null;\n\t\t}\n\t}\n\n\n\tfunction render() {\n\n\t\t$this->handleFormInput();\n\n\t\tif ($this->paymentType == 'paypal' && $this->action == 'frompaypal') {\n\t\t\t$this->unstorePaypalParams();\n\t\t}\n\n\t\tif (!$this->isError()) {\n\t\t\tif ($this->action == 'payment' || $this->action == 'frompaypal') {\n\t\t\t\t$this->process();\n\t\t\t}\n\t\t}\n\t\treturn parent::render();\n\t}\n\n\tfunction render_tracking_pixels()\n\t{\n\t\tif (WEEBLY_DEBUG === false) {\n\t\t\tarray_walk($this->trackingTriggers, function ($tracking_trigger) {\n\t\t\t\tif (is_array($tracking_trigger)) {\n\t\t\t\t\textract($tracking_trigger);\n\t\t\t\t}\n\t\t\t\tinclude CONFIG_PARTIAL_PATH . '/tracking_frame.php';\n\t\t\t});\n\t\t}\n\t}\n\n\n\tfunction handleFormInput() { // TODO: remove options array\n\n\t\tglobal $configDomain;\n\n\t\t$this->tokenBasedCheckout = false;\n\t\t$this->action = $_REQUEST['action'];\n\t\t$this->probablyFree = $_REQUEST['probablyFree'];\n\t\t$this->paymentType = $_REQUEST['paymentType'];\n\t\t$this->couponCode  = $_REQUEST['coupon'];\n\t\t$this->userServiceIDs = $_REQUEST['userServiceID'] ? explode(\",\", $_REQUEST['userServiceID']) : array();\n\t\t$this->userServiceID = $this->userServiceIDs[0];\n\t\t$this->hideCards = $_REQUEST['hideCard'] ? explode(\",\", $_REQUEST['hideCard']) : array();\n\t\t$this->deleteCard = $_REQUEST['deleteCard'];\n\t\t$this->refer = $_REQUEST['refer'];\n\t\t$this->appSubdomain = preg_replace('/^([^\\.]*).*$/', '$1', $_GET['s'] ?: $configDomain);\n\t\t$this->isFromPayPal = $this->action == 'frompaypal' || isset($_GET['token']);\n\n\t\t$this->firstName = $_POST['CCFirstName'];\n\t\t$this->lastName = $_POST['CCLastName'];\n\t\t$this->creditCardNumber = $_POST['CreditCardNumber'];\n\t\t$this->creditCardNumber = preg_replace(\"/[^0-9]/\", \"\", $this->creditCardNumber);\n\t\t$this->year = $_POST['CCYear'];\n\t\t$this->month = $_POST['CCMonth'];\n\t\t$this->expirationDate = preg_replace(\"/[^0-9]/\", \"\", $this->year) . \"-\" . preg_replace(\"/[^0-9]/\", \"\", $this->month);\n\t\t$this->cvv2 = $_POST['CVV2'];\n\t\t$this->cvv2 = preg_replace(\"/[^0-9]/\", \"\", $this->cvv2);\n\t\t$this->country = $_POST['CCCountry'];\n\t\t$this->zip = $_POST['CCZip'];\n\t\t$this->vat_id = $_POST['CCVatId'];\n\t\t$this->phone = preg_replace(\"/[^\\d\\+\\(\\)]/\", \"\", $_POST['CCPhoneNumber']);\n\n\t\t// Client side encryption tokens\n\t\t$this->adyen_token = $_REQUEST['adyen_encrypted_form'];\n\t\t$this->nonce  = $_POST['payment_method_nonce'];\n\t\tif ($this->nonce || $this->adyen_token) {\n\t\t\t$this->tokenBasedCheckout = true;\n\t\t}\n\n\t\t$this->provider = $_POST['provider'];\n\n\t\tif ($this->provider == self::ADYEN && $this->paymentType == 'sepa' ) {\n\t\t\t$this->iban = $_POST['iban'];\n\t\t\t$this->zip = $_POST['SEPAZip'];\n\t\t\t$this->country = $_POST['SEPACountry'];\n\t\t\t$this->firstName = $_POST['SEPAFirstName'];\n\t\t\t$this->lastName = $_POST['SEPALastName'];\n\t\t\t$this->vat_id = $_POST['SEPAVatId'];\n\t\t\t$this->phone = preg_replace(\"/[^\\d\\+\\(\\)]/\", \"\", $_POST['SEPAPhoneNumber']);\n\t\t}\n\n\t\tif (substr($this->vat_id, 0, 2) == $this->country) {\n\t\t\t// Some users may include the country code as part of the number\n\t\t\t$this->vat_id = substr($this->vat_id, 2, strlen($this->vat_id));\n\t\t}\n\n\t\t$this->existingLocationRequired = !!$_POST['existing-location-required'];\n\n\t\tif ($this->allowExistingPaymentMethods) {\n\t\t\t$this->existing = $_REQUEST['existing'];\n\t\t\t$this->existingCard = $_REQUEST['existingCard'];\n\t\t} else {\n\t\t\t$this->existing = false;\n\t\t}\n\n\t\tif ($this->existing && $this->existingLocationRequired) {\n\t\t\t$this->zip = $_POST['CCZip-existing'];\n\t\t\t$this->country = $_POST['CCCountry-existing'];\n\t\t\t$this->vat_id = $_POST['CCVatId-existing'];\n\t\t}\n\n\t\tif ($this->paymentType == 'paypal' && $this->probablyTaxable()) {\n\t\t\t$this->zip = $_POST['CCZip-paypal'];\n\t\t\t$this->country = $_POST['CCCountry-paypal'];\n\t\t\t$this->vat_id = $_POST['CCVatId-paypal'];\n\t\t}\n\n\t\tif ($this->action == 'payment' && !$this->probablyFree) {\n\t\t\tif ($this->existing) {\n\t\t\t\tif (!preg_match(\"/[0-9]{8}/\", $this->existingCard)) {\n\t\t\t\t\t$this->errorMessage = tl(\"Please select an existing credit card.\");\n\t\t\t\t}\n\t\t\t\tif ($this->existingLocationRequired) {\n\t\t\t\t\tif (!$this->zip) {\n\t\t\t\t\t\t$this->errorField = \"CCZip-existing\";\n\t\t\t\t\t\t$this->errorMessage = tl(\"Please enter a valid postal code.\");\n\t\t\t\t\t}\n\t\t\t\t\tif (!$this->country) {\n\t\t\t\t\t\t$this->errorField = \"CCCountry-existing\";\n\t\t\t\t\t\t$this->errorMessage = tl(\"Please enter a valid country.\");\n\t\t\t\t\t}\n\t\t\t\t\tif ($this->country && $this->vat_id && !Tax::validateVatNumber($this->vat_id, $this->country)) {\n\t\t\t\t\t\t$this->errorField = \"CCVatId-existing\";\n\t\t\t\t\t\t$this->errorMessage = tl(\"VAT ID is not valid.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($this->paymentType == 'paypal' && $this->probablyTaxable()) {\n\t\t\t\t\tif (!$this->zip) {\n\t\t\t\t\t\t$this->errorField = \"CCZip-paypal\";\n\t\t\t\t\t\t$this->errorMessage = tl(\"Please enter a valid postal code.\");\n\t\t\t\t\t}\n\t\t\t\t\tif (!$this->country) {\n\t\t\t\t\t\t$this->errorField = \"CCCountry-paypal\";\n\t\t\t\t\t\t$this->errorMessage = tl(\"Please enter a valid country.\");\n\t\t\t\t\t}\n\t\t\t\t\tif ($this->country && $this->vat_id && !Tax::validateVatNumber($this->vat_id, $this->country)) {\n\t\t\t\t\t\t$this->errorField = \"CCVatId-paypal\";\n\t\t\t\t\t\t$this->errorMessage = tl(\"VAT ID is not valid.\");\n\t\t\t\t\t}\n\t\t\t\t} else if ($this->paymentType == 'cc') {\n\t\t\t\t\tif (!$this->tokenBasedCheckout) {\n\t\t\t\t\t\t// Check CC info if not token based\n\t\t\t\t\t\tif (preg_match(\"/[^0-9\\-\\s]/\", $this->creditCardNumber)) {\n\t\t\t\t\t\t\t$this->errorField = \"CreditCardNumber\";\n\t\t\t\t\t\t\t$this->errorMessage = tl(\"Please enter a valid credit card number.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!preg_match(\"/[0-9]{13}/\", $this->creditCardNumber)) {\n\t\t\t\t\t\t\t$this->errorField = \"CreditCardNumber\";\n\t\t\t\t\t\t\t$this->errorMessage = tl(\"Please enter a valid credit card number.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!preg_match(\"/[0-9]{3}/\", $this->cvv2)) {\n\t\t\t\t\t\t\t$this->errorField = \"CVV2\";\n\t\t\t\t\t\t\t$this->errorMessage = tl(\"Please enter a valid card security code.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!$this->zip) {\n\t\t\t\t\t\t$this->errorField = \"CCZip\";\n\t\t\t\t\t\t$this->errorMessage = tl(\"Please enter a valid zip code.\");\n\t\t\t\t\t}\n\t\t\t\t\tif (!$this->country && $this->formSize == 'long') {\n\t\t\t\t\t\t$this->errorField = \"CCCountry\";\n\t\t\t\t\t\t$this->errorMessage = tl(\"Please enter a valid country.\");\n\t\t\t\t\t}\n\t\t\t\t\tif ($this->country && $this->vat_id && !Tax::validateVatNumber($this->vat_id, $this->country)) {\n\t\t\t\t\t\t$this->errorField = \"CCVatId\";\n\t\t\t\t\t\t$this->errorMessage = tl(\"VAT ID is not valid.\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!$this->firstName) {\n\t\t\t\t\t\t$this->errorField = \"CCFirstName\";\n\t\t\t\t\t\t$this->errorMessage = tl(\"Please enter a first name.\");\n\t\t\t\t\t} else if (!$this->lastName) {\n\t\t\t\t\t\t$this->errorField = \"CCLastName\";\n\t\t\t\t\t\t$this->errorMessage = tl(\"Please enter a last name.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// detect if invalid userServiceID, and if so, display error\n\t\tif ($this->userServiceID) {\n\t\t\t$this->userService = new BillingUserService($this->userServiceID);\n\t\t\t$this->status = $this->userService ? $this->userService->status : null;\n\t\t\tif (!in_array($this->status, array('active', 'suspended', 'overdue', 'locked'))) {\n\t\t\t\t$this->errorMessage = \"You are attempting to update an invalid service. Please contact support.\";\n\t\t\t\t$this->errorType = 'showstopper';\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction process()\n\t{\n\t\tglobal $validate;\n\n\t\tif (!$this->serviceID) {\n\t\t\t$this->errorMessage = tl(\"Please select a subscription period.\");\n\t\t\treturn false;\n\t\t}\n\n\t\t// determine billing profile\n\t\tif ($this->existing) {\n\t\t\t$existingProfile = \\Billing\\Model\\BillingUserProfileModel::findByProfileId($this->userID, $this->existingCard);\n\t\t\tif (stripos($existingProfile->cc_type, 'PayPal') !== false) {\n\t\t\t\t$this->billingProfile = array(\"type\" => \"paypal\", \"id\" => $this->existingCard, \"existing\" => 1);\n\t\t\t} else {\n\t\t\t\t$this->billingProfile = array(\"type\" => \"CIM\", \"id\" => $validate->id($this->existingCard));\n\t\t\t}\n\n\t\t\tif ($this->existingLocationRequired) {\n\t\t\t\t$this->updateBillingProfile();\n\t\t\t}\n\t\t} else {\n\t\t\tif ($this->paymentType == 'paypal' && $this->action == 'frompaypal') {\n\t\t\t\t$this->billingProfile = array(\"type\" => \"paypal\");\n\t\t\t\t// note: when processing paypal payments, billing.php relies on\n\t\t\t\t// $_GET['token'] to get things done\n\t\t\t} else { // a credit card\n\t\t\t\t$this->billingProfile = null;\n\t\t\t}\n\t\t}\n\n\t\tif (!$this->existing\n\t\t\t&& $this->paymentType == 'paypal'\n\t\t\t&& $this->action == 'payment'\n\t\t\t&& !$this->startTrial\n\t\t\t&& $this->calculateTotal() > 0) {\n\t\t\treturn $this->redirectToPaypal();\n\t\t} else if ($this->isExtension) {\n\t\t\treturn $this->extendSubscription();\n\t\t} else {\n\t\t\treturn $this->addService();\n\t\t}\n\t}\n\n\n\t/* Add a new service and CHARGING\n\t-------------------------------------------------------------------------------------------*/\n\n\n\tfunction addService($from_mobile) { // adds the service AND charges!\n\t\t$return = $this->_addService($from_mobile);\n\t\tif ($return) {\n\t\t\tif ($this->refer) {\n\t\t\t\t$this->getBillingObject()->writeMessage(\n\t\t\t\t\t\"PURCHASE_REFER\", 1101, 0, '',\n\t\t\t\t\t\"purchase refer: $this->refer\",\n\t\t\t\t\t$billing->userServiceID\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tlist($this->errorField, $this->errorMessage) = \\processBillingErrors($this->getBillingObject());\n\t\t\t$this->errorMessage = $this->errorMessage ?: tl(\"This transaction has been declined.\");\n\t\t\t$this->reportAddServiceFailure(\n\t\t\t\t$this->paymentType == 'paypal' ?\n\t\t\t\t\t'reason=paypalerror' :\n\t\t\t\t\t'reason=declined'\n\t\t\t);\n\t\t}\n\t\treturn $return;\n\t}\n\n\n\tfunction _addService($from_mobile)\n\t{\n\t\t$billing = $this->getBillingObject();\n\t\tif ($from_mobile) {\n\t\t\treturn $billing->addService(\n\t\t\t\t$this->user_id,\n\t\t\t\t$this->serviceID,\n\t\t\t\tarray(\n\t\t\t\t\t'noPaymentFlag' => 2\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\tif ($this->provider == self::ADYEN) {\n\t\t\t\treturn $billing->addService(\n\t\t\t\t\t$this->userID,\n\t\t\t\t\t$this->serviceID,\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'site_id' => $this->siteID,\n\t\t\t\t\t\t'addon_ids' => $this->addons,\n\t\t\t\t\t\t'quantity' => $this->quantity,\n\t\t\t\t\t\t'ccDetails' => array(\n\t\t\t\t\t\t\t'paymentProvider' => self::ADYEN,\n\t\t\t\t\t\t\t'firstName' => $this->firstName,\n\t\t\t\t\t\t\t'lastName' => $this->lastName,\n\t\t\t\t\t\t\t'paymentType' => $this->paymentType,\n\t\t\t\t\t\t\t'token' => $this->adyen_token,\n\t\t\t\t\t\t\t'iban' => $this->iban,\n\t\t\t\t\t\t\t'zip' => $this->zip,\n\t\t\t\t\t\t\t'country' => $this->country,\n\t\t\t\t\t\t\t'vat_id' => $this->vat_id,\n\t\t\t\t\t\t\t'phone' => $this->phone,\n\t\t\t\t\t\t\t'billingProfile' => $this->billingProfile\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\t$this->serviceItemID\n\t\t\t\t);\n\t\t\t} else if ($this->provider == self::BRAINTREE) {\n\t\t\t\treturn $billing->addService(\n\t\t\t\t\t$this->userID,\n\t\t\t\t\t$this->serviceID,\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'site_id' => $this->siteID,\n\t\t\t\t\t\t'addon_ids' => $this->addons,\n\t\t\t\t\t\t'quantity' => $this->quantity,\n\t\t\t\t\t\t'ccDetails' => array(\n\t\t\t\t\t\t\t'paymentProvider' => self::AUTHORIZE_NET,\n\t\t\t\t\t\t\t'paymentType' => $this->paymentType,\n\t\t\t\t\t\t\t'nonce' => $this->nonce,\n\t\t\t\t\t\t\t'firstName' => $this->firstName,\n\t\t\t\t\t\t\t'lastName' => $this->lastName,\n\t\t\t\t\t\t\t'zip' => $this->zip,\n\t\t\t\t\t\t\t'country' => $this->country,\n\t\t\t\t\t\t\t'vat_id' => $this->vat_id,\n\t\t\t\t\t\t\t'phone' => $this->phone,\n\t\t\t\t\t\t\t'billingProfile' => $this->billingProfile\n\t\t\t\t\t\t),\n\t\t\t\t\t\t$this->serviceItemID\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn $billing->addService(\n\t\t\t\t\t$this->userID,\n\t\t\t\t\t$this->serviceID,\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'site_id' => $this->siteID,\n\t\t\t\t\t\t'addon_ids' => $this->addons,\n\t\t\t\t\t\t'quantity' => $this->quantity,\n\t\t\t\t\t\t'ccDetails' => array(\n\t\t\t\t\t\t\t'paymentProvider' => $this->provider,\n\t\t\t\t\t\t\t'paymentType' => $this->paymentType,\n\t\t\t\t\t\t\t'cardNumber' => $this->creditCardNumber,\n\t\t\t\t\t\t\t'expirationDate' => $this->expirationDate,\n\t\t\t\t\t\t\t'firstName' => $this->firstName,\n\t\t\t\t\t\t\t'lastName' => $this->lastName,\n\t\t\t\t\t\t\t'zip' => $this->zip,\n\t\t\t\t\t\t\t'country' => $this->country,\n\t\t\t\t\t\t\t'vat_id' => $this->vat_id,\n\t\t\t\t\t\t\t'phone' => $this->phone,\n\t\t\t\t\t\t\t'cvv2' => $this->cvv2,\n\t\t\t\t\t\t\t'billingProfile' => $this->billingProfile\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\t$this->serviceItemID\n\t\t\t\t);\n\t\t\t}\n\t\t\t// TODO: it'd be nice to assign $this->userService after this for post-purchase actions\n\t\t}\n\t}\n\n\n\n\t/* Updating/Extending Existing Services (and CHARGES)\n\t-------------------------------------------------------------------------------------------*/\n\n\n\tfunction extendSubscription() {\n\t\t$return = $this->updateSubscription(true, $otherVars);\n\t\tif ($return) {\n\t\t\t$this->close('successBillingExtend', $otherVars);\n\t\t}\n\t\treturn $return;\n\t}\n\n\n\tprotected function updateSubscription($isExtension=false, &$otherVars=array()) {\n\n\t\t$billing = $this->getBillingObject();\n\n\t\tforeach ($this->userServiceIDs as $userServiceID) { // when are multiple userServiceID's specified anyway?\n\t\t\t// Default CC details\n\t\t\tif ($this->provider == self::ADYEN) {\n\t\t\t\t$ccDetails = array(\n\t\t\t\t\t'paymentProvider' => self::ADYEN,\n\t\t\t\t\t'firstName' => $this->firstName,\n\t\t\t\t\t'lastName' => $this->lastName,\n\t\t\t\t\t'paymentType' => $this->paymentType,\n\t\t\t\t\t'token' => $this->adyen_token,\n\t\t\t\t\t'iban' => $this->iban,\n\t\t\t\t\t'zip' => $this->zip,\n\t\t\t\t\t'country' => $this->country,\n\t\t\t\t\t'vat_id' => $this->vat_id,\n\t\t\t\t\t'phone' => $this->phone,\n\t\t\t\t\t'billingProfile' => $this->billingProfile\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// AuthorizeNet\n\t\t\t\t$ccDetails = array(\n\t\t\t\t\t'cardNumber' => $this->creditCardNumber,\n\t\t\t\t\t'expirationDate' => $this->expirationDate,\n\t\t\t\t\t'firstName' => $this->firstName,\n\t\t\t\t\t'lastName' => $this->lastName,\n\t\t\t\t\t'zip' => $this->zip,\n\t\t\t\t\t'country' => $this->country,\n\t\t\t\t\t'vat_id' => $this->vat_id,\n\t\t\t\t\t'phone' => $this->phone,\n\t\t\t\t\t'cvv2' => $this->cvv2,\n\t\t\t\t\t'billingProfile' => $this->billingProfile\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif ($this->isFromPayPal) {\n\t\t\t\t// User has returned to the billing page after authorizing us to use PayPal for future payments\n\t\t\t\t// Just need to make the final callback to paypal to get the billing agreement ID\n\t\t\t\t$paypal = new \\PayPal($this->paypalAccount);\n\t\t\t\t$details = $paypal->getCheckoutDetails($_GET['token']);\n\t\t\t\t$paypal_agreement = $paypal->createBillingAgreement($_GET['token']);\n\n\t\t\t\tif ($paypal_agreement['BILLINGAGREEMENTID']) {\n\t\t\t\t\t$ccDetails = array(\n\t\t\t\t\t\t'cardType'        => 'PayPal',\n\t\t\t\t\t\t'paymentProvider' => 'paypal',\n\t\t\t\t\t\t'lastFour'        => '',\n\t\t\t\t\t\t'expirationDate'  => '',\n\t\t\t\t\t\t'firstName'       => $details['FIRSTNAME'],\n\t\t\t\t\t\t'lastName'        => $details['LASTNAME'],\n\t\t\t\t\t\t'email'           => $details['EMAIL'],\n\t\t\t\t\t\t'zip'             => $this->zip,\n\t\t\t\t\t\t'country'         => $this->country,\n\t\t\t\t\t\t'vat_id'          => $this->vat_id\n\t\t\t\t\t);\n\n\t\t\t\t\t$this->billingProfile = array(\"type\" => \"paypal\");\n\t\t\t\t\t$this->billingProfile['id'] = $billing->addPayPalBillingProfile($ccDetails, $paypal_agreement);\n\t\t\t\t\t$ccDetails['billingProfile'] = $this->billingProfile;\n\t\t\t\t} else {\n\t\t\t\t\t// Keep the default cc details since no paypal billing profile is created\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Credit card payment\n\t\t\t\t// Keep the default cc details\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!$billing->updateSubscription( // does a lot. will handle domain renew also\n\t\t\t\t\t$userServiceID,\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'extend' => $isExtension,\n\t\t\t\t\t\t'newServiceID' => $this->serviceID,\n\t\t\t\t\t\t'newServiceItemID' => $this->serviceItemID,\n\t\t\t\t\t\t'ccDetails' => $ccDetails\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\t// failure\n\t\t\t\tlist($this->errorField, $this->errorMessage) = \\processBillingErrors($billing);\n\t\t\t\tif (!$this->errorMessage || $this->errorMessage == \"<br/>\") { // not given a reason. it means it's been declined\n\t\t\t\t\t$this->errorMessage = tl(\"This transaction has been declined.\");\n\t\t\t\t\t$this->reportUpdateSubscriptionFailure(\n\t\t\t\t\t\t$this->paymentType == 'paypal' ?\n\t\t\t\t\t\t\t'reason=paypalerror' :\n\t\t\t\t\t\t\t'reason=declined'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// probably dead code\n\t\t// extend domain reached the following, 6/8/15\n\t\tif (\n\t\t\t$this->deleteCard &&\n\t\t\t$this->deleteCard != \"undefined\" &&\n\t\t\t$this->deleteCard != $GLOBALS['updated_profile_id']\n\t\t) {\n\t\t\t$billing->deleteBillingProfile($this->deleteCard);\n\t\t}\n\n\t\t$profile_id = $this->db->get_one(\n\t\t\t\"SELECT billing_profile_id FROM billing_user_service WHERE user_service_id=?\",\n\t\t\t$userServiceID // last $userServiceID from loop\n\t\t);\n\t\tif ($profile_id) {\n\t\t\t$otherVars['updated_profile'] = $this->db->get_assoc(\n\t\t\t\t\"SELECT * FROM billing_user_profile WHERE user_id=? AND billing_profile_id=?\",\n\t\t\t\t$this->loggedInUserID,\n\t\t\t\t$profile_id\n\t\t\t);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\n\tprotected function calculateTotal(&$description) {\n\t\t// used by redirectToPaypal() and StudentAccountController::addService()\n\t\t// this logic mirrors what happens in billing.php\n\n\t\t$billing = $this->getBillingObject();\n\n\t\tif ($this->serviceItemID) {\n\t\t\t$serviceItem     = BillingServiceItemModel::findByServiceItemId($this->serviceItemID);\n\t\t\t$this->currency  = $serviceItem->currency_code;\n\t\t\t$serviceID       = $serviceItem->legacy_service_id;\n\t\t\t$amount          = $serviceItem->price;\n\t\t\t$recurringPeriod = $serviceItem->term_length;\n\t\t\t$description     = $serviceItem->description;\n\t\t\t$scope           = $serviceItem->base_scope;\n\t\t\t$level           = $serviceItem->base_level;\n\t\t} else {\n\t\t\tlist(\n\t\t\t\t$serviceID, $amount, $recurringPeriod, $description, $scope, $level\n\t\t\t) = $this->db->get(\n\t\t\t\t\"\n\t\t\t\tSELECT service_id, amount, recurring_period, description, scope, level\n\t\t\t\tFROM weebly_definition.billing_service WHERE service_id=?\n\t\t\t\t\",\n\t\t\t\t$this->serviceID\n\t\t\t);\n\t\t}\n\n\t\t$total = $amount * $this->quantity; // really only applicable to student accounts\n\n\t\t// prorate\n\t\tif (!$this->isExtension && $level) {\n\t\t\t$serviceCredit = BillingUserServiceController::getPremiumServiceCredit($this->userID, $this->siteID);\n\t\t\t$total -= $serviceCredit;\n\t\t}\n\n\t\t// credits\n\t\t$creditData = \\Billing\\Credit::calculateCredit($this->userID, $serviceID, $total);\n\t\tif ($creditData['credit_used']) {\n\t\t\t$total = $creditData['amount'];\n\t\t}\n\n\t\t// coupon\n\t\tif ($this->couponCode) {\n\t\t\t$total = $total - $billing->getCouponValue($this->couponCode, $total);\n\t\t}\n\n\t\t$tax = \\Billing\\Tax::getTaxDue($this->userID, $total, array(\n\t\t\t'zip' => $this->zip,\n\t\t\t'country' => $this->country,\n\t\t\t'vat_id' => $this->vat_id,\n\t\t), $serviceID);\n\n\t\t$total += $tax;\n\n\t\treturn $total;\n\t}\n\n\n\n\t/* PayPal\n\t-------------------------------------------------------------------------------------------*/\n\n\n\tfunction redirectToPaypal() {\n\t\t$total = $this->calculateTotal($description); // also populates $description\n\t\t$description = $this->refinePaypalDescription($description);\n\n\t\t$this->storePaypalParams();\n\n\t\t$paypal = new \\PayPal($this->paypalAccount);\n\n\t\t// redirect to PayPal and create a billing agreement for services that could renew\n\t\t$paypalResult = $paypal->doExpressCheckout($total, $description, $this->createPayPalBillingAgreement, '', $this->userCurrency); // will redirect and die...\n\n\t\t// if we get here, there is an error...\n\t\t$this->errorMessage = tl(\"There was an error with PayPal checkout. Please use the regular credit card checkout process.<br/>\");\n\t\t\\Util\\FileSystem::file_put_contents(\n\t\t\t\"/var/www/weebly/log/paypal-log\",\n\t\t\tdate(DATE_RFC822) . \" - \" . $_SERVER['REMOTE_ADDR'] . \" - Error forwarding to PayPal: \" . print_r($paypalResult, 1) . \"\\n\",\n\t\t\tFILE_APPEND\n\t\t);\n\t\treturn false;\n\t}\n\n\n\tfunction refinePaypalDescription($description) {\n\t\treturn $description;\n\t}\n\n\n\tfunction storePaypalParams() { // TODO: consistent naming convention. \"Paypal\" or \"PayPal\" ?\n\t\t$_SESSION['orderCoupon'] = $this->couponCode;\n\t\t$_SESSION['paypal']['country'] = $this->country;\n\t\t$_SESSION['paypal']['zip'] = $this->zip;\n\t\t$_SESSION['paypal']['vat_id'] = $this->vat_id;\n\t}\n\n\n\tfunction unstorePaypalParams() {\n\t\t$this->couponCode = $_SESSION['orderCoupon'];\n\t\t$this->country = $_SESSION['paypal']['country'];\n\t\t$this->zip = $_SESSION['paypal']['zip'];\n\t\t$this->vat_id = $_SESSION['paypal']['vat_id'];\n\t}\n\n\n\n\t/* Template-related Methods\n\t-------------------------------------------------------------------------------------------*/\n\n\n\tfunction getTemplateName() {\n\t\treturn 'payment-base.phtml';\n\t}\n\n\tfunction getTemplateVars() {\n\n\t\tglobal $buildTime, $configDomain;\n\t\tglobal $session_id; // defined in incl/billing_purchase_page.php // TODO: does this work?????\n\t\tglobal $countrySelect; // defined in incl/billing_utils.php\n\t\tglobal $ab;\n\n\t\t$paymentProvider = PaymentProviderController::getPaymentProvider($this->userID);\n\t\tif ($paymentProvider == self::ADYEN) {\n\t\t\t$adyenPublicKey = AdyenProvider::getPublicKey();\n\t\t\tif ($this->userCurrency == 'EUR') {\n\t\t\t\t// Only available for EURO payments\n\t\t\t\t$showSepa = true;\n\t\t\t}\n\t\t} else if ($paymentProvider == self::BRAINTREE) {\n\t\t\t// Braintree setup\n\t\t\t$braintree = new BrainTreeProvider();\n\t\t\t$braintreeClientToken = $braintree->getClientToken();\n\t\t}\n\n\t\t$site_id = $this->siteID;\n\t\t$formSize = $this->formSize;\n\t\t$probablyTaxable = $this->probablyTaxable();\n\t\t$userIsTaxable = \\Billing\\Tax::userIsTaxable($this->userID);\n\t\t$userProfilesObject = new BillingUserProfiles($this->userID);\n\t\t$profiles = $userProfilesObject->getAvailableProfiles($this->siteID, $this->userService);\n\t\t$profilesJSON = $userProfilesObject->getProfilesJSON();\n\t\t$hideCards = $this->hideCards;\n\t\t$countryIp = LocationHelper::GetCountryCode();\n\t\t$postalCodeLabel = ($countryIp == \"US\") ? tl(\"Zip Code\") : tl(\"Postal Code\");\n\t\t$forceCountryChoice = false;\n\t\tif (LocaleController::isUserLocaleEU($this->userID)) {\n\t\t\t$buyBtnLabel = tl(\"Commit to Buy\", 'purchase');\n\t\t}\n\t\t$userCountry = $this->userCurrency;\n\t\t$userLocale = $this->userLocale;\n\t\t// If the country is in the EU, make the user select the country for extra verification.\n\t\tif (in_array($countryIp, array('AT','BE','BG','CH','CY','CZ','DK','DE','EE','ES','FI','FR','GB','GR','EL','HU','HR','IE','IT','LV','LT','LU','MT','NL','PL','PT','RO','SK','SL','SE'))) {\n\t\t\t$forceCountryChoice = true;\n\t\t}\n\n\t\t$profiles = array_filter($profiles, function($profile) use ($hideCards) {\n\t\t\treturn !in_array($profile['billing_profile_id'], $hideCards);\n\t\t});\n\n\t\tforeach ($profiles as &$profile) {\n\t\t\tif ($profile['cc_type'] == \"American Express\") {\n\t\t\t\t$profile['cc_type_abbrev'] = 'amex';\n\t\t\t}\n\t\t\telse if ($profile['cc_type'] == \"Visa\") {\n\t\t\t\t$profile['cc_type_abbrev'] = 'visa';\n\t\t\t}\n\t\t\telse if ($profile['cc_type'] == \"Mastercard\") {\n\t\t\t\t$profile['cc_type_abbrev'] = 'mastercard';\n\t\t\t}\n\t\t\telse if ($profile['cc_type'] == \"Discover card\") {\n\t\t\t\t$profile['cc_type_abbrev'] = 'discover';\n\t\t\t}\n\t\t\telse if ($profile['cc_type'] == \"sepa\") {\n\t\t\t\t$profile['cc_type_abbrev'] = 'sepa';\n\t\t\t}\n\t\t\telse if (stripos($profile['cc_type'], 'paypal') !== false ) {\n\t\t\t\t$profile['cc_type'] = \"PayPal\";\n\t\t\t\t$profile['cc_type_abbrev'] = 'paypal';\n\t\t\t}\n\t\t}\n\t\t$ccOnFile = !!$profiles;\n\n\t\tif (!isset($this->existing)) {\n\t\t\t$existing = $ccOnFile ? 1 : 0;\n\t\t}\n\n\t\tif (!$this->existingCard) {\n\t\t\t$firstProfile = reset($profiles);\n\t\t\t$existingCard = $firstProfile['billing_profile_id'];\n\t\t}\n\n\t\t$ccYears = array();\n\t\t$ccYearStart = date('Y');\n\t\t$ccYearEnd = $ccYearStart + 15;\n\t\tfor ($i=$ccYearStart; $i<=$ccYearEnd; $i++) {\n\t\t\t$ccYears[] = $i;\n\t\t}\n\t\tif ($this->year && !in_array($this->year, $ccYears)) {\n\t\t\tarray_unshift($ccYears, $this->year);\n\t\t}\n\n\t\tif (\n\t\t\t$this->forceAllowCredits === true ||\n\t\t\t($this->serviceID && \\Billing\\Credit::serviceIsCreditEligible($this->serviceID))\n\t\t) {\n\t\t\t$totalUserCredits = \\Billing\\Credit::getUserCredit($this->userID);\n\t\t\t$totalUserCredits = floatval($totalUserCredits);\n\t\t}\n\n\t\t$hasCoupons = $this->db->get_one(\n\t\t\t\"SELECT user_coupon_id FROM billing_user_coupon WHERE user_id = ? AND used = 0 AND expires_on > CURRENT_TIMESTAMP()\",\n\t\t\t$this->userID\n\t\t);\n\n\t\tif ($this->couponCode) {\n\t\t\t$couponMessage = \"\";\n\t\t\tlist($couponType, $couponAmount, $couponUsed, $couponExpired) = $this->db->get(\n\t\t\t\t\"\n\t\t\t\tSELECT bc.type, bc.amount, buc.used, buc.expires_on < CURRENT_TIMESTAMP AS expired\n\t\t\t\tFROM billing_user_coupon buc, weebly_definition.billing_coupon bc\n\t\t\t\tWHERE buc.user_coupon_id = ?\n\t\t\t\tAND buc.user_id = ?\n\t\t\t\tAND buc.coupon_id = bc.coupon_id\n\t\t\t\tAND (\n\t\t\t\t\tCASE\n\t\t\t\t\tWHEN bc.type = 'dollar'\n\t\t\t\t\t  THEN bc.currency_code = ?\n\t\t\t\t\tELSE bc.currency_code = 'USD'\n\t\t\t\t\tEND\n\t\t\t\t\t)\n\t\t\t\t\",\n\t\t\t\t$this->couponCode,\n\t\t\t\t$this->userID,\n\t\t\t\t$this->userCurrency\n\t\t\t); //Included the sql condition because there are only USD type coupons for percentages.  We only care for currency with the 1yrdomains that are dollar types.\n\t\t\tif ($couponAmount) {\n\t\t\t\t$couponAmount = floatval($couponAmount);\n\t\t\t}\n\t\t\tif ($couponUsed) {\n\t\t\t\t$couponError = tl('This coupon has already been used');\n\t\t\t\t$couponAmount = null;\n\t\t\t}\n\t\t\telse if ($couponExpired) {\n\t\t\t\t$couponError = tl('This coupon has expired');\n\t\t\t\t$couponAmount = null;\n\t\t\t}\n\t\t\telse if (!$couponAmount) {\n\t\t\t\t$couponError = tl(\"Coupon not valid.\");\n\t\t\t}\n\t\t}\n\n\t\t$action = 'payment';\n\n\t\treturn array_merge(\n\t\t\tparent::getTemplateVars(),\n\t\t\tget_defined_vars() // all variables in current scope\n\t\t);\n\t}\n\n\t/* Misc\n\t-------------------------------------------------------------------------------------------*/\n\n\t/**\n\t * Update a billing profile with location info from the payment form.\n\t *\n\t * For a long time had zip code on the payment form but never stored it. Now\n\t * it is needed for tax purposes. Older payment profiles will require the user to\n\t * fill out country, postal code, and maybe VAT id fields.\n\t */\n\tfunction updateBillingProfile()\n\t{\n\t\t$profile = \\Billing\\Model\\BillingUserProfileModel::findByProfileId($this->userID, $this->existingCard);\n\t\tif($profile) {\n\t\t\t$profile->country = $this->country;\n\t\t\t$profile->zip = $this->zip;\n\t\t\tif($this->vat_id) {\n\t\t\t\t$profile->vat_id = $this->vat_id;\n\t\t\t}\n\t\t\t$profile->save();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Use Geo IP to determine if this user is in a taxable location. (Currently NY, WA and Europe)\n\t */\n\tfunction probablyTaxable()\n\t{\n\t\treturn \\Billing\\Tax::isTaxableIp($this->userID, LocationHelper::getCurrentIP());\n\t}\n\n\n\tfunction reportAddServiceFailure($param_string=null) {\n\t\t/* EXAMPLE:\n\t\t\\Util\\RealtimeStats::geo_increment('billing.propurchase.failure', $param_string);\n\t\t*/\n\t}\n\n\tfunction triggerAffiliatePixels($event, $pixelData = null){\n\t\t//If they come from an affiliate campaign on either last login or signup\n\t\t$campaign = getProperty('user', $this->userID, 'campaign');\n\t\t$login_campaign = getProperty('user', $this->userID, 'login_campaign');\n\n\t\t$affiliates = array(\n\t\t\t\"mkt_w_nwk:Affiliate_cat:NaturaInt\" => \"natural_intelligence\",\n\t\t\t\"mkt_w_nwk:Affiliate_cat:Centerfield\" => \"centerfield\"\n\t\t);\n\n\t\tforeach($affiliates as $param => $affiliate){\n\t\t\tif( (strpos($campaign, $param) !== FALSE)  || (strpos($login_campaign, $param) !== FALSE) ){\n\t\t\t\t$triggerName = $affiliate . '_' . $event;\n\n\t\t\t\tif (empty($pixelData)) {\n\t\t\t\t\t$this->trackingTriggers[] = $triggerName;\n\t\t\t\t} else {\n\t\t\t\t\t$this->trackingTriggers[] = array_merge($pixelData, array('tracking_trigger' => $triggerName));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction reportUpdateSubscriptionFailure($param_string=null) {\n\t\t\\Util\\RealtimeStats::geo_increment('billing.extend.failure', $param_string);\n\t}\n\n\n\tfunction close($action, $otherVars=null) {\n\n\t\t$this->pageState = 'confirmation';\n\n\t\t$billing = $this->getBillingObject();\n\t\t$amount = $billing->attemptedAmount;\n\n\t\t$_SESSION['last_transaction'] = array(\n\t\t\t'action'          => $action,\n\t\t\t'service_id'      => $this->serviceID,\n\t\t\t'transaction_id'  => $billing->transactionID,\n\t\t\t'user_service_id' => $billing->userServiceID,\n\t\t\t'amount'          => $amount,\n\t\t\t'payment_type'    => $this->paymentType == 'paypal' ? 'paypal' : 'Weebly Credit Card',\n\t\t\t'other_vars'      => $otherVars ?: array()\n\t\t);\n\t\tif ($action == 'successBillingPremium') {\n\t\t\t$_SESSION['bundled_plan'] = $_SESSION['last_transaction'];\n\t\t}\n\t}\n\n\n\tfunction isError() {\n\t\treturn $this->errorField || $this->errorMessage;\n\t}\n\n\n\tfunction getBillingObject() {\n\t\tglobal $billing;\n\t\tif (!$billing) {\n\t\t\t$billing = new \\Billing();\n\t\t}\n\t\t$billing->couponCode = $this->couponCode;\n\t\treturn $billing;\n\t}\n}\n","markerStore":{"nextMarkerId":17,"markersById":{"0":{"range":{"start":{"row":725,"column":21},"end":{"row":725,"column":21}},"properties":{"type":"selection","editorId":590,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/weebly/php/Billing/PurchaseScreen/PaymentController.php","digestWhenLastPersisted":"28a90e9eb5d21e6b36fe30d508596bdf5a57b9a5","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"<?php\n/**\n * BillingServiceItemModel class file\n *\n * @author Elias Majic\n * @copyright Copyright (c) 2015 Weebly Inc\n * @package Billing\n */\n\nnamespace Billing\\Model;\n\nuse AccessControl\\UpgradeRestrictions;\nuse User\\Model\\UserModel;\nuse Util\\NumberUtil;\n\n/**\n * Defines a billing service item\n *\n * @server DefinitionDB\n * @table service_item\n */\n\nclass BillingServiceItemModel extends \\Data\\Model\n{\n\t/**\n\t * @label Service Item ID\n\t * @exportview list,full,detail\n\t * @type int\n\t */\n\tprotected $service_item_id;\n\n\t/**\n\t * @label Internal Name\n\t * @exportview list,full,detail\n\t * @type string\n\t */\n\tprotected $internal_name;\n\n\t/**\n\t * @label Currency Code\n\t * @type string\n\t * @exportview list,full,detail\n\t *\n\t * Joins to the base_service table\n\t */\n\tprotected $currency_code;\n\n\t/**\n\t * @label Base Service ID\n\t * @type int\n\t * @exportview list,full,detail\n\t *\n\t * Joins to the base_service table\n\t */\n\tprotected $base_service_id;\n\n\t/**\n\t * @label Base Service\n\t * @associationType HasOneRelation\n\t * @associationModel BillingBaseServiceModel\n\t * @associationNamespace Billing\\Model\n\t * @associationForeignKey base_service_id\n\t * @exportview none\n\t */\n\tprotected $base_service;\n\n\t/**\n\t * @label Price\n\t * @exportview list,full,detail\n\t * @type decimal\n\t */\n\tprotected $price;\n\n\t/**\n\t * @label Description\n\t * @exportview list,full,detail\n\t * @type string\n\t */\n\tprotected $description;\n\n\t/**\n\t * @label Term Length\n\t * @exportview list,full,detail\n\t * @type int\n\t */\n\tprotected $term_length;\n\n\t/**\n\t * @label free_trial_eligible\n\t * @exportview list,full,detail\n\t * @type int\n\t */\n\tprotected $free_trial_eligible;\n\n\t/**\n\t * @label Parr Value\n\t * @exportview list,full,detail\n\t * @type decimal\n\t */\n\tprotected $parr_value;\n\n\t/**\n\t * @label Parr2 Value\n\t * @exportview list,full,detail\n\t * @type decimal\n\t */\n\tprotected $parr2_value;\n\n\t/**\n\t * @label Group\n\t * @exportview list,full,detail\n\t * @type string\n\t */\n\tprotected $group;\n\n\t/**\n\t * @label Cost of service\n\t * @exportview list,full,detail\n\t * @type decimal\n\t */\n\tprotected $cost;\n\n\t/**\n\t * @label Monthly Price\n\t * @type decimal\n\t * @computed\n\t * @exportview list,full,detail\n\t */\n\tprotected function monthly_price()\n\t{\n\t\treturn round(($this->price / $this->term_length), 2);\n\t}\n\n\t/**\n\t * @label Yearly Price\n\t * @type decimal\n\t * @computed\n\t * @exportview list\n\t */\n\tprotected function yearly_price()\n\t{\n\t\treturn round(($this->price / ($this->term_length / 12)), 2);\n\t}\n\n\t/**\n\t * @label Old service ID\n\t * @exportview list,full,detail\n\t * @type computed\n\t */\n\tprotected $legacy_service_id;\n\n\tpublic function get_legacy_service_id()\n\t{\n\t\t$siteModifier = '';\n\t\t$service_length = $this->term_length;\n\t\tif ($this->get_base_scope() == 'site') {\n\t\t\t$siteModifier = 'Site';\n\t\t}\n\n\t\t// Some services did not add the term_length to the end of the service id\n\t\tif ($this->base_service(0)->hide_period == 1) {\n\t\t\t$service_length = '';\n\t\t}\n\n\t\tif ($this->base_service(0)->extra == 1) {\n\t\t\t$service_length = '';\n\t\t}\n\n\t\treturn 'Weebly.' . $this->base_service(0)->name . $siteModifier . $this->group . $service_length . $this->base_service(0)->extra;\n\t}\n\n\t/**\n\t * @label base scope\n\t * @exportview list,full,detail\n\t * @type computed\n\t */\n\tprotected $base_scope;\n\n\tpublic function get_base_scope()\n\t{\n\t\treturn $this->base_service(0)->scope;\n\t}\n\n\t/**\n\t * @label base level\n\t * @exportview list,full,detail\n\t * @type computed\n\t */\n\tprotected $base_level;\n\n\tpublic function get_base_level()\n\t{\n\t\treturn $this->base_service(0)->level;\n\t}\n\n\tpublic static function getAllPlans()\n\t{\n\t\t$request = new \\Data\\Request;\n\t\t$request->Filter = array();\n\t\t$models = self::find($request);\n\t\treturn $models;\n\t}\n\n\t/**\n\t * Gets the level key for this service\n\t *\n\t * @return string\n\t */\n\tpublic function getLevelKey()\n\t{\n\t\treturn UpgradeRestrictions::planLevelToKey($this->get_base_level());\n\t}\n\n\t/**\n\t * Gets the level key for this service\n\t *\n\t * @return string\n\t */\n\tpublic function getLevelName()\n\t{\n\t\treturn UpgradeRestrictions::planLevelToName($this->get_base_level());\n\t}\n\n\t/**\n\t * Finds the user service for a site if it exists.\n\t */\n\tpublic static function findByServiceItemId($service_item_id)\n\t{\n\t\t$request = new \\Data\\Request;\n\t\t$request->Filter = array(\n\t\t\tnew \\Data\\Filter(\"service_item_id\", $service_item_id),\n\t\t);\n\n\t\t$models = self::find($request);\n\t\treturn $models[0];\n\t}\n\n\t/**\n\t * Finds the user service for a site if it exists.\n\t */\n\tpublic static function getDomainServices($group, $currency, $whoisOnly = '')\n\t{\n\n\t\t$domainBaseServices = BillingBaseServiceModel::getDomainGroups($group, $whoisOnly);\n\n\t\t$baseSerivceIds = array();\n\n\t\tforeach ($domainBaseServices as $baseService) {\n\t\t\t$baseSerivceIds[] = $baseService->base_service_id;\n\t\t}\n\n\t\t$request = new \\Data\\Request;\n\n\t\t$request->Filter = array(\n\t\t\tnew \\Data\\InFilter('base_service_id', $baseSerivceIds),\n\t\t\tnew \\Data\\Filter('currency_code', $currency),\n\t\t\tnew \\Data\\Filter('product_group', 'domain')\n\t\t);\n\n\t\t$models = self::find($request);\n\t\treturn $models;\n\t}\n\n\t/**\n\t * Get service ID given a base service ID and currency.\n\t */\n\tpublic static function findByBaseServiceAndCurrency($base_service_id, $currency_code)\n\t{\n\t\t$request = new \\Data\\Request;\n\t\t$request->Filter = array(\n\t\t\tnew \\Data\\Filter('base_service_id', $base_service_id),\n\t\t\tnew \\Data\\Filter('currency_code', $currency_code),\n\t\t);\n\t\t$models = self::find($request);\n\t\treturn $models[0];\n\t}\n\n\t/**\n\t * Get service ID given a base service ID and currency.\n\t */\n\tpublic static function findByProductGroup($product_group, $currency_code)\n\t{\n\t\t$request = new \\Data\\Request;\n\t\t$request->Filter = array(\n\t\t\tnew \\Data\\Filter('product_group', $product_group),\n\t\t\tnew \\Data\\Filter('currency_code', $currency_code),\n\t\t);\n\t\t$models = self::find($request);\n\n\t\treturn $models;\n\t}\n\n\n\t/**\n\t * Gets the exported plan view\n\t *\n\t * @param String $serviceGroup\n\t * @param string $currency\n\t *\n\t * @return array\n\t */\n\tpublic function exportPlanForView($serviceGroup, $currency)\n\t{\n\t\t// Rounded to 0 decimal place to make it display nicer on homepage\n\t\t$monthlyPrice = ceil($this->monthly_price);\n\t\t$monthlyPriceFormatted = NumberUtil::formatMoney($monthlyPrice, $currency, false, ['omitDecimal' => true]);\n\n\t\treturn array(\n\t\t\t'monthly_price' => $monthlyPrice,\n\t\t\t'planType' => $this->getLevelKey(),\n\t\t\t'planName' => $this->getLevelName(),\n\t\t\t'planDescription' => $this->getDescriptionForPlan(),\n\t\t\t'planPrice' => $this->yearly_price,\n\t\t\t'planLink' => 'plans/type/'.strtolower($this->getLevelName()),\n\t\t\t'linkText' => 'Free Trial',\n\t\t\t'freePlan' => false,\n\t\t\t'planWithDomain' => ($serviceGroup == UserModel::BUNDLES_PRICING_MODEL || $serviceGroup == UserModel::TRIPLE_PLAY_PRICING_MODEL),\n\t\t\t'planWithEmail' => ($this->level > UpgradeRestrictions::STARTER_LEVEL && $serviceGroup == UserModel::TRIPLE_PLAY_PRICING_MODEL),\n\t\t\t'pricingModel' => $serviceGroup,\n\t\t\t'monthlyPriceFormatted' => $monthlyPriceFormatted\n\t\t);\n\t}\n\n\t/**\n\t * Returns the free plan\n\t *\n\t * @param string $serviceGroup\n\t * @param string $currency\n\t *\n\t * @return array\n\t */\n\tpublic static function exportFreePlan($serviceGroup = UserModel::STANDARD_PRICING_MODEL, $currency)\n\t{\n\t\t$monthlyPrice = 0;\n\t\t$monthlyPriceFormatted = NumberUtil::formatMoney($monthlyPrice, $currency, false, ['omitDecimal' => true]);\n\n\t\treturn array(\n\t\t\t'monthlyPrice' => $monthlyPrice,\n\t\t\t'planType' => 'free',\n\t\t\t'planName' => tl('Free'),\n\t\t\t'planDescription' => tl('Everything you need for a high quality site. Create unlimited pages and host your site for free.'),\n\t\t\t'planPrice' => '0',\n\t\t\t'planLink' => 'plans/type/free',\n\t\t\t'linkText' => 'Choose',\n\t\t\t'freePlan' => true,\n\t\t\t'planWithDomain' => false,\n\t\t\t'planWithEmail' => false,\n\t\t\t'pricingModel' => $serviceGroup,\n\t\t\t'monthlyPriceFormatted' => $monthlyPriceFormatted\n\t\t);\n\t}\n\n\n\tpublic function getDescriptionForPlan()\n\t{\n\t\tswitch ($this->get_base_level()) {\n\t\t\tcase UpgradeRestrictions::FREE_LEVEL:\n\t\t\t\treturn tl('Everything you need for a high quality site. Create unlimited pages and host your site for free.');\n\t\t\tcase UpgradeRestrictions::STARTER_LEVEL:\n\t\t\t\treturn tl('Connect your own domain, remove Weebly branding, and expanded site stats.');\n\t\t\tcase UpgradeRestrictions::PRO_LEVEL:\n\t\t\t\treturn tl('Professional multimedia features, powerful site search, and password protection.');\n\t\t\tcase UpgradeRestrictions::BUSINESS_LEVEL:\n\t\t\t\treturn tl('Fully integrated eCommerce and all available features. The complete package.');\n\t\t\tdefault:\n\t\t\t\treturn \"\";\n\t\t}\n\t}\n}\n","markerStore":{"nextMarkerId":92,"markersById":{"0":{"range":{"start":{"row":21,"column":0},"end":{"row":21,"column":0}},"properties":{"type":"selection","editorId":594,"goalScreenRange":null,"autoscroll":false,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":4,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/weebly/php/Billing/Model/BillingServiceItemModel.php","digestWhenLastPersisted":"d03a0f20d8d4e65225a7fe4532590cc63da984a6","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"<?php\n/**\n * BillingService class file\n *\n * @author Drew Richards\n * @copyright Copyright (c) 2013-2014 Weebly Inc\n */\n\n/**\n * @package Billing\n */\nnamespace Billing\\Model;\n\nuse AccessControl\\UpgradeRestrictions;\nuse Data\\Filter;\nuse Data\\Request;\nuse Util\\BillingServiceHelper;\n\n/**\n * Defines a billing service\n *\n * @server DefinitionDB\n * @table billing_service\n */\n\nclass BillingServiceModel extends \\Data\\Model\n{\n\t/**\n\t * @label Service ID\n\t * @type string\n\t * @exportview list,full,detail\n\t */\n\tprotected $service_id;\n\n\t/**\n\t * @label Description\n\t * @type string\n\t * @exportview list,full,detail\n\t */\n\tprotected $description;\n\n\t/**\n\t * @label Amount\n\t * @type decimal\n\t * @exportview list,full,detail\n\t *\n\t * The amount we charge customers for the service.\n\t */\n\tprotected $amount;\n\n\t/**\n\t * @label Cost\n\t * @type decimal\n\t * @exportview list,full,detail\n\t *\n\t * The amount the service costs us.\n\t */\n\tprotected $cost;\n\n\t/**\n\t * @label Recurring Period\n\t * @type int\n\t * @exportview list,full,detail\n\t *\n\t * The number of months the service is active before\n\t * it needs to be renewed.\n\t *\n\t * Not sure why it is a varchar\n\t * in the database. -drew@weebly.com\n\t */\n\tprotected $recurring_period;\n\n\t/**\n\t * @label Scope\n\t * @type string\n\t * @exportview list,full,detail\n\t *\n\t * account or site; Used to differentiate services that are\n\t * available to the whole account vs just a single site.\n\t */\n\tprotected $scope;\n\n\t/**\n\t * @label Level\n\t * @type int\n\t * @exportview list,full,detail\n\t *\n\t * Used to unlock features. See php/AccessControl/FeatureRestrictions.php to\n\t * see the feature definitions.\n\t */\n\tprotected $level;\n\n\t/**\n\t * @label Projected Annual Recurring Revenue\n\t * @type decimal\n\t * @exportview list,full,detail\n\t */\n\tprotected $parr;\n\n\t/**\n\t * @label Projected Annual Recurring Revenue (2 Years)\n\t * @type decimal\n\t * @exportview list,full,detail\n\t */\n\tprotected $parr2;\n\n\t/**\n\t * @label Service Base\n\t * @type string\n\t * @computed\n\t * @exportview list,full,detail\n\t */\n\tprotected function service_base()\n\t{\n\t\treturn preg_replace(\"/([0-9]*)|(-[a-z]*$)/\", \"\", $this->service_id);\n\t}\n\n\t/**\n\t * @label Title\n\t * @type string\n\t * @computed\n\t * @exportview list,full,detail\n\t */\n\tprotected function title()\n\t{\n\t\treturn preg_replace(\"/Weebly /\", \"\", $this->description);\n\t}\n\n\t/**\n\t * @label Monthly Price\n\t * @type decimal\n\t * @computed\n\t * @exportview list,full,detail\n\t */\n\tprotected function monthly_price()\n\t{\n\t\treturn round(($this->amount / $this->recurring_period), 2);\n\t}\n\n\t/**\n\t * @label Yearly Price\n\t * @type decimal\n\t * @computed\n\t * @exportview list\n\t */\n\tprotected function yearly_price()\n\t{\n\t\treturn round(($this->amount / ($this->recurring_period / 12)), 2);\n\t}\n\n\n\t/**\n\t * @label Savings\n\t * @type decimal\n\t * @computed\n\t * @exportview list,full,detail\n\t */\n\tprotected function savings()\n\t{\n\t\t$savings = 0;\n\t\t$minimumService = self::minimumLengthService($this->service_base, $this->service_id);\n\n\t\tif ($minimumService->service_id != $this->service_id) {\n\t\t\t$savings = ($minimumService->monthly_price - $this->monthly_price) * $this->recurring_period;\n\t\t}\n\n\t\treturn round($savings, 2);\n\t}\n\n\t/**\n\t * @label Recurring Period Label\n\t * @type string\n\t * @computed\n\t * @exportview list,full,detail\n\t */\n\tprotected function recurring_period_label()\n\t{\n\t\t$label = $this->recurring_period >= 12 ? $this->recurring_period / 12 : $this->recurring_period;\n\n\t\t$label .= ' ';\n\n\t\tif ($this->recurring_period == 1) {\n\t\t\t$label .= 'Month';\n\t\t} else if ($this->recurring_period < 12) {\n\t\t\t$label .= 'Months';\n\t\t} else if ($this->recurring_period < 24) {\n\t\t\t$label .= 'Year';\n\t\t} else {\n\t\t\t$label .= 'Years';\n\t\t}\n\n\t\treturn $label;\n\t}\n\n\t/**\n\t * @label Discount percentage\n\t * @type decimal\n\t * @computed\n\t * @exportview list,full,detail\n\t */\n\tprotected function discount()\n\t{\n\t\treturn round(($this->savings / ($this->amount + $this->savings)) * 100);\n\t}\n\n\t/**\n\t * Gets the level name for this service\n\t *\n\t * @return string\n\t */\n\tpublic function getLevelName()\n\t{\n\t\treturn UpgradeRestrictions::planLevelToName($this->level);\n\t}\n\n\t/**\n\t * Gets the level key for this service\n\t *\n\t * @return string\n\t */\n\tpublic function getLevelKey()\n\t{\n\t\treturn UpgradeRestrictions::planLevelToKey($this->level);\n\t}\n\n\tpublic static function minimumLengthService($serviceBase, $serviceId)\n\t{\n\t\t$minimumServicePeriod = 1;\n\t\tif (in_array($serviceBase, array('Weebly.proSite', 'Weebly.starterSite'))) {\n\t\t\t$minimumServicePeriod = 6;\n\t\t} else if (in_array($serviceBase, array('Weebly.customDomain', 'Weebly.customDomainWhois', 'Weebly.whoisProtect'))) {\n\t\t\t$minimumServicePeriod = 12;\n\t\t}\n\n\t\t$minimum_service_id = $serviceBase . $minimumServicePeriod;\n\n\t\tif ($serviceGroup = BillingServiceHelper::getServiceGroup($serviceId)) {\n\t\t\t// appends the service group if necessary, e.g. -a, -c, -cost, -bundle\n\t\t\t$minimum_service_id .= $serviceGroup;\n\t\t};\n\n\t\t$request = new \\Data\\Request();\n\t\t$request->Filter = array(\n\t\t\tnew \\Data\\Filter('service_id', $minimum_service_id)\n\t\t);\n\n\t\t$request->Sort = array(\n\t\t\tnew \\Data\\Sort('amount', 'DESC')\n\t\t);\n\n\t\treturn self::findOne($request);\n\t}\n\n\tpublic static function getByServiceId($service_id)\n\t{\n\t\t$request = new \\Data\\Request();\n\t\t$request->Filter = array(\n\t\t\tnew \\Data\\Filter('service_id', $service_id)\n\t\t);\n\n\t\treturn self::findOne($request);\n\t}\n}\n","markerStore":{"nextMarkerId":3,"markersById":{"0":{"range":{"start":{"row":23,"column":3},"end":{"row":23,"column":3}},"properties":{"type":"selection","editorId":606,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/weebly/php/Billing/Model/BillingServiceModel.php","digestWhenLastPersisted":"48699883c5b910e65a6ff02c1188be08b9f3836d","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"<?php\n/**\n * BillingServiceFeatureModel class file\n *\n * @author Elias Majic\n * @copyright Copyright (c) 2015 Weebly Inc\n * @package Billing\n */\n\n\nnamespace Billing\\Model;\n\n/**\n * Billing Service Feature information is stored in this model.\n *\n * @source Database\n * @server DefinitionDB\n * @table service_feature\n */\n\nclass BillingServiceFeatureModel extends \\Data\\Model\n{\n\t/**\n\t * @label Base Service ID\n\t * @type int\n\t * @exportview list,full,detail\n\t */\n\tprotected $base_service_id;\n\t\n\t/**\n\t * @label Feature ID\n\t * @type int\n\t * @exportview list,full,detail\n\t *\n\t * Joins to the feature table\n\t */\n\tprotected $feature_id;\n\n\t/**\n\t * @label Base Service\n\t * @associationType HasOneRelation\n\t * @associationModel BillingBaseServiceModel\n\t * @associationNamespace Billing\\Model\n\t * @associationForeignKey base_service_id\n\t * @exportview none\n\t */\n\tprotected $base_service;\n\n\t/**\n\t * @label Feature\n\t * @associationType HasOneRelation\n\t * @associationModel BillingFeatureModel\n\t * @associationNamespace Billing\\Model\n\t * @associationForeignKey feature_id\n\t * @exportview none\n\t */\n\tprotected $feature;\n}\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":610,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/weebly/php/Billing/Model/BillingServiceFeatureModel.php","digestWhenLastPersisted":"90a6528843dca05ea2923f47b46f2440880ad4d4","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"<?php\n\nrequire_once(__DIR__ . \"/init.php\");\nrequire_once(CONFIG_INCL_PATH . '/utils.php');\nrequire_once(CONFIG_INCL_PATH . '/billing_utils.php');\n\n// Change for a different billing module\nrequire_once(__DIR__ . \"/authorize_include.php\");\n\nuse \\User;\nuse Util\\BillingServiceHelper;\nuse \\Billing\\Controller\\ReportingController;\nuse \\Billing\\Controller\\ReportingOrderController;\nuse \\Billing\\Providers\\AdyenProvider;\nuse \\Billing\\Providers\\BrainTreeProvider;\nuse \\Billing\\Model\\BillingServiceItemModel;\nuse \\Billing\\Model\\BillingUserServiceModel;\nuse \\i18n\\Controller\\LocaleController;\nuse \\Data\\Result;\n\nclass Billing\n{\n\tpublic $errors = '';\n\tpublic $internalError = false;\n\tpublic $subscriptionError = false;\n\tpublic $errorCode = '';\n\tpublic $errorText = '';\n\tpublic $transactionID = null;\n\tpublic $userServiceID = null;\n\tpublic $module = 'authorize';\n\tpublic $couponCode = null;\n\tpublic $subtotalAmount;\n\tpublic $taxAmount = 0;\n\tpublic $creditAmount = 0;\n\tpublic $voucher = null;\n\tpublic $last_charge_attempt_id;\n\tpublic $attemptedAmount;\n\tpublic static $serviceRoots = array(\"Weebly.proAccount\", \"Weebly.customDomain\", \"Weebly.education.proAccount\", \"Weebly.education.studentAccounts\", \"Rcom.customWebsite\", 'Weebly.designerSites', 'Weebly.proSite', 'Weebly.starterSite', 'Weebly.businessSite', 'Weebly.sslSiteCertificate', 'Weebly.googleAppsTrial', 'Weebly.googleAppsDomain', 'Weebly.simpleChatSite', 'Weebly.simpleChatSiteRevised');\n\n\tconst ADYEN = \"adyen\";\n\tconst PAYPAL = \"paypal\";\n\tconst AUTHORIZE_NET = \"authorize\";\n\t/* ------------------------\n\t\tFunctions are grouped into the following categories:\n\n\t\t- Service-action functions\n\t\t\t+ checkAndUpdateAccountStatus\n\t\t\t+ disableAutoRenew\n\t\t\t+ enableAutoRenew\n\t\t\t+ doesServiceRenew\n\t\t\t+ addService\n\t\t\t+ removeService\n\t\t\t+ swapService\n\t\t\t+ extendSubscription\n\t\t\t+ updateSubscription\n\n\t\t- Coupon functions\n\t\t\t+ getCouponValue\n\t\t\t+ useCoupon\n\t\t\t+ createCoupon\n\n\t\t- Promotion functions\n\t\t\t+ redeemPromotion\n\n\t\t- Payment functions\n\t\t\t+ processCharge\n\t\t\t+ processVoid\n\t\t\t+ processRefund\n\t\t\t+ processAuthorization\n\t\t\t+ processBillingProfileCharge\n\t\t\t+ processAuthorizeNetBillingProfileCharge\n\t\t\t+ processPaypalReferenceBillingProfileCharge\n\t\t\t+ processPaypalCharge\n\t\t\t+ processPayPalRefund\n\n\t\t- Billing profile functions\n\t\t\t+ addPayPalBillingProfile\n\t\t\t+ addBillingProfile\n\t\t\t+ deleteBillingProfile\n\t\t\t+ setBillingProfile\n\n\t\t- Utility functions\n\t\t\t+ hasService\n\t\t\t+ getServices\n\t\t\t+ getProServices\n\t\t\t+ getDomainServices\n\t\t\t+ findUserServices\n\t\t\t+ getServiceQuantity\n\t\t\t+ setServiceQuantity\n\t\t\t+ getServiceRoot\n\t\t\t+ getNextPaymentDate\n\t\t\t+ getNextRecurrenceDate\n\t\t\t+ prettyDate\n\t\t\t+ getLastBillDate\n\t\t\t+ hasTooManyFailedAttempts\n\t\t\t+ attachVoucher\n\n\t\t- Logging functions\n\t\t\t+ logChargeAttempt\n\t\t\t+ writeMessage\n\t\t\t+ logRevenueRecognition\n\t\t\t+ logTransactionSuccess\n\t\t\t+ logTransactionFail\n\n\t\t------------------------\n\t\twriteMessage documentation:\n\n\t\t$billing->writeMessage(type, subtype, amount, currency, message, user_service_id, user_id, transaction_id, service_id)\n\n\t\tNOTE: 'subtype' should be unique to a line of code (it should be used to identify the exact line of code that output the message)\n\t\t\t\tBy convention, the following files use the following subtype prefixes:\n\n\t\t\t\tbilling.php:                          XX\n\t\t\t\tauthorize_silent.php:                1XX\n\t\t\t\tbilling_processing_pro.php:          2XX\n\t\t\t\tbilling_processing_domain.php:       3XX\n\t\t\t\tbilling_processing_edaccounts.php:   4XX\n\t\t\t\tbilling_processing_edpro.php:        4XX\n\t\t\t\tclasses/WeeblySubscription.php:      5XX\n\t\t\t\tclasses/ARBSubscription.php:         6XX\n\t\t\tbilling_processing_update_service_cc.php:7XX\n\t\t\t\tutility scripts for data updates     10XX\n\t\t\t\tphp/Billing/PurchaseScreen/PaymentController.php 11XX\n\t\t\t\tphp/API/Resource/V1/Users/ServicesResource.php 20XX\n\t\t\t\tphp/Editor/RemoteAPI/BillingRemoteAPI.php 30XX\n\t\t\t\tclasses/BillingUserService.php \t\t40XX\n\n\t*/\n\n\t/* -------------------------\n\t\tService-related functions\n\t\t=========================\n\t*/\n\n\tpublic function __construct($userID = null)\n\t{\n\t\tif ($_SESSION['admin_member_id']) {\n\t\t\t\\Admin\\Controller\\AdminTransactionController::getInstance()->setAdminId($_SESSION['admin_member_id']);\n\t\t}\n\n\t\tglobal $db;\n\t\tif ($userID) {\n\t\t\t$db = mysql_db::getShardDB($userID);\n\t\t} else if (!$db && $_SESSION['user_id']) {\n\t\t\t$db = mysql_db::getShardDB($_SESSION['user_id']);\n\t\t}\n\t}\n\n\tpublic function checkAndUpdateAccountStatus($userServiceID, $userID, $date = false)\n\t{\n\t\tglobal $db;\n\n\t\t$billingSystem = $db->get_one(\"SELECT billing_system FROM billing_user_service WHERE user_service_id = ?\", $userServiceID);\n\n\t\tif ($billingSystem == \"arb\") {\n\t\t\treturn ARBSubscription::checkAndUpdateAccountStatus($userServiceID, $userID);\n\t\t} else if ($billingSystem == \"weebly-cim\") {\n\t\t\treturn WeeblySubscription::checkAndUpdateAccountStatus($userServiceID, $userID, $date);\n\t\t}\n\t}\n\n\tpublic function disableAutoRenew($userServiceID, $userId = null)\n\t{\n\t\tif ($userId) {\n\t\t\t$db = new mysql_db('weebly', $userId);\n\t\t} else {\n\t\t\t$db = $GLOBALS['db'];\n\t\t}\n\n\t\tlist($userID, $xSubID, $serviceID, $billingSystem) = $db->get(\"SELECT user_id, x_sub_id, service_id, billing_system FROM billing_user_service WHERE user_service_id = ?\", $userServiceID);\n\n\t\tif ($billingSystem == \"weebly-cim\") {\n\t\t\tif (!$db->query(\"UPDATE billing_user_service SET auto_renew = 0 WHERE user_service_id = ?\", $userServiceID)) {\n\t\t\t\t$this->internalError = true;\n\t\t\t\t$this->errors = \"Failed turning off auto renew.\";\n\t\t\t\t$this->writeMessage(\"ERROR\", 40, \"\", \"\", \"Failed turning off auto-renew.\", $userServiceID, $userID);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t} else if ($billingSystem == \"arb\") {\n\t\t\tif (!ARBSubscription::removeSubscription($userServiceID, $userID)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t}\n\t\t$this->writeMessage(\"DISABLEAUTORENEW\", 99, \"\", \"\", \"Disabled Auto Renew\", $userServiceID, $userID);\n\n\t\t// If this is a domain, disable registrar auto renewal.\n\t\tif (Util\\BillingServiceHelper::isCustomDomain($serviceID)) {\n\t\t\tDomain::setRenew($userServiceID, 0, $userId);\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tpublic function enableAutoRenew($userServiceID)\n\t{\n\t\tglobal $db;\n\n\t\tlist($userID, $xSubID, $serviceID, $billingSystem) = $db->get(\"SELECT user_id, x_sub_id, service_id, billing_system FROM billing_user_service WHERE user_service_id = ?\", $userServiceID);\n\n\t\tif ($billingSystem == \"weebly-cim\") {\n\t\t\tif (!$db->query(\"UPDATE billing_user_service SET auto_renew = 1 WHERE user_service_id = ?\", $userServiceID)) {\n\t\t\t\t$this->internalError = true;\n\t\t\t\t$this->errors = \"Failed turning on auto renew.\";\n\t\t\t\t$this->writeMessage(\"ERROR\", 41, \"\", \"\", \"Failed turning on auto-renew.\", $userServiceID, $userID);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t} else if ($billingSystem == \"arb\") {\n\t\t\t$this->internalError = true;\n\t\t\t$this->errors = \"Error: Please update your billing information to enable auto-renew.\";\n\t\t\t$this->writeMessage(\"ERROR\", 42, \"\", \"\", \"Failed turning on auto-renew (old ARB system).\", $userServiceID, $userID);\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// If this is a domain, disable registrar auto renewal.\n\t\tif (Util\\BillingServiceHelper::isCustomDomain($serviceID)) {\n\t\t\tDomain::setRenew($userServiceID, 1);\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tpublic static function doesServiceRenew($userServiceID)\n\t{\n\t\tglobal $db;\n\n\t\tlist($billingSystem, $xSubID, $autoRenew, $deleted) = $db->get(\"SELECT billing_system, x_sub_id, auto_renew, deleted FROM billing_user_service WHERE user_service_id = ?\", $userServiceID);\n\n\t\tif ($deleted) {\n\t\t\treturn false;\n\t\t} else if ($billingSystem == 'arb' && $xSubID) {\n\t\t\treturn true;\n\t\t} else if ($billingSystem == 'weebly-cim' && $autoRenew) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * noPaymentFlags\n\t * + falsey : charge the card right now\n\t * + 1 or any non-numeric truthy value : free service\n\t * + 2 : not free, but no charge to add service\n\t * + 3 : first charge doesn't happen until next billing date.  setup billing profile but don't charge the card\n\t * + 4 : paid a variable price by check (e.g. invoices)\n\t */\n\tpublic function addService($userID, $serviceID, $options = array(), $serviceItemID = null)\n\t{\n\t\tglobal $db, $validate;\n\t\textract($options);\n\t\tif (is_array($ccDetails)) {\n\t\t\textract($ccDetails);\n\t\t}\n\n\t\t$currency = 'USD'; //Default unless a service item id is provided\n\t\tif ($serviceItemID) {\n\t\t\t$serviceItem = BillingServiceItemModel::findByServiceItemId($serviceItemID);\n\t\t\t$currency = $serviceItem->currency_code;\n\t\t}\n\n\t\t$this->provider = $options['provider'];\n\t\t$this->nonce = $options['nonce'];\n\n\t\t$_SESSION['user_id'] = $userID ? $userID : $_SESSION['user_id'];\n\t\t$this->userId = $_SESSION['user_id'];\n\n\t\t\\Admin\\Controller\\AdminTransactionController::getInstance()->setUserId($_SESSION['user_id']);\n\n\t\t$quantity = preg_replace(\"/[^0-9]/\", \"\", $quantity);\n\t\t$quantity = $quantity > 0 ? $quantity : 1;\n\n\t\t$startDate = $startDate ?: \"CURRENT_TIMESTAMP\";\n\t\tif ($startDate == \"CURRENT_TIMESTAMP\") {\n\t\t\t$startDate = $db->get_one(\"SELECT CURRENT_TIMESTAMP\");\n\t\t}\n\n\t\t// Use new service item model if supplied\n\t\tif ($serviceItem instanceof \\Billing\\Model\\BillingServiceItemModel) {\n\t\t\t$description        = $serviceItem->legacy_service_id;\n\t\t\t$amount             = $serviceItem->price;\n\t\t\t$currency           = $serviceItem->currency_code;\n\t\t\t$recurringPeriod    = $serviceItem->term_length;\n\t\t\t$serviceDescription = $serviceItem->description;\n\t\t\t$scope              = $serviceItem->base_scope;\n\t\t\t$level              = $serviceItem->base_level;\n\t\t} else {\n\t\t\tlist($description, $amount, $recurringPeriod, $serviceDescription, $scope, $level) = $db->get(\n\t\t\t\t\"\n\t\t\t\tSELECT service_id, amount, recurring_period, description, scope, level\n\t\t\t\tFROM weebly_definition.billing_service\n\t\t\t\tWHERE service_id = ?\n\t\t\t\t\",\n\t\t\t\t$serviceID\n\t\t\t);\n\t\t}\n\t\tif (isset($totalAmount)) { // if total_amount is set in options\n\t\t\t$amount = $totalAmount;\n\t\t} else {\n\t\t\t$amount = $amount * $quantity;\n\t\t}\n\n\t\t// If we're unable to fetch the information from the DB for $serviceID\n\t\tif (!$description) {\n\t\t\t// log error\n\t\t\t$this->internalError = true;\n\t\t\t$this->errors = \"Could not retrieve information for service '$serviceID'.\";\n\t\t\t$this->writeMessage(\"ERROR\", 1, $amount, $currency, \"Could not retrieve information for service '$serviceID'.\", '');\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($scope == 'site') {\n\t\t\t$site_id = $site_id ?: $_SESSION['site_id'];\n\t\t\tif (!$site_id) {\n\t\t\t\t$this->internalError = true;\n\t\t\t\t$this->errors = \"No site sepcified for service ($serviceID).\";\n\t\t\t\t$this->writeMessage(\"ERROR\", 1, $amount, $currency, \"No site sepcified for service ($serviceID).\", '');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif ($level) {\n\t\t\t$appleCharge = $amount; // save this amount for tablet\n\t\t\t$prorate = prorateLeveledService(\n\t\t\t\t$_SESSION['user_id'],\n\t\t\t\t$scope == 'site' ? ($site_id ?: $_SESSION['site_id']) : null,\n\t\t\t\t$level,\n\t\t\t\t$amount,\n\t\t\t\tstrtotime($startDate),\n\t\t\t\t$obsoleteUserServiceID\n\t\t\t);\n\t\t\t$amount = $prorate['amount'];\n\t\t\t$this->creditAmount = $appleCharge - $amount;\n\n\t\t\t// We have a special case with apple app store purchases where we cannot discount a users purchase\n\t\t\t// Instead we'll extend there service the equivalent of whatever their discount would have been\n\t\t\tif ($tablet && $prorate['discount']) {\n\t\t\t\t// Calculate the price per day of the new service and use the discount to calculate how many days we will extend\n\t\t\t\t$pricePerDay = (($appleCharge/$recurringPeriod)/30.4);\n\t\t\t\t$additionalDays = floor($prorate['discount']/$pricePerDay);\n\t\t\t\t$nextDate = date('Y-m-d', strtotime(\"+$recurringPeriod months +$additionalDays day\", strtotime($startDate)));\n\t\t\t}\n\n\t\t\tif ($obsoleteUserServiceID) {\n\t\t\t\t\\Admin\\Controller\\AdminTransactionController::getInstance()->setPreviousServiceVar('user_service_id', $obsoleteUserServiceID);\n\t\t\t\t$db->query(\n\t\t\t\t\t\"UPDATE billing_user_service SET deleted='1' WHERE user_service_id = ?\",\n\t\t\t\t\t$obsoleteUserServiceID\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t$purchased_addons = array();\n\t\tif (is_array($addon_ids)) {\n\t\t\tforeach ($addon_ids as $a_id) {\n\t\t\t\t$addon = $db->get_assoc(\"SELECT * FROM weebly_definition.billing_addon WHERE addon_id=?\", $a_id);\n\t\t\t\tif (!$addon) {\n\t\t\t\t\t$this->internalError = true;\n\t\t\t\t\t$this->errors = \"Could not retrieve information for addon '$a_id'.\";\n\t\t\t\t\t$this->writeMessage(\"ERROR\", 1, $amount, $currency, \"Could not retrieve information for addon '$a_id'.\", '');\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t$purchased_addons[] = $addon;\n\t\t\t\t$amount += $addon['amount'] * ($recurringPeriod/12);\n\t\t\t}\n\t\t}\n\n\t\tif ($serviceID == 'Weebly.stockMedia') {\n\t\t\t$nextDate = null;\n\t\t} else {\n\t\t\t$nextDate = $nextDate ? $nextDate : $db->get_one(\"SELECT ? + INTERVAL $recurringPeriod month\", $startDate);\n\t\t}\n\n\t\t// Insert record into billing_user_service\n\t\t$subscriptionId = $response;\n\n\t\t$creditData = \\Billing\\Credit::calculateCredit($_SESSION['user_id'], $serviceID, $amount);\n\t\tif ($creditData['credit_used']) {\n\t\t\t$this->creditAmount = $this->creditAmount + floatval($creditData['credit_lost']);\n\t\t\t$amount = $creditData['amount'];\n\t\t}\n\n\t\t$userServiceID = rand_id(\"billing_user_service\", \"user_service_id\");\n\n\t\tif ($db->query(\"INSERT INTO billing_user_service (user_service_id, start_date, user_id, service_id, status, quantity, renews_on, billing_system, service_item_id) VALUES (?, ?, ?, ?, 'active', ?, ?, ?, ?)\", $userServiceID, $startDate, $_SESSION['user_id'], $serviceID, $quantity, $nextDate, 'weebly-cim', $serviceItemID)) {\n\t\t\tif ($scope == 'site') {\n\t\t\t\t$db->query(\"UPDATE billing_user_service SET site_id=? WHERE user_service_id=?\", $site_id, $userServiceID);\n\t\t\t}\n\n\t\t\t$billing_message_id = $this->writeMessage(\"ADDSERVICE\", 6, $amount, $currency, \"Successfully added service $serviceID to account.\", $userServiceID, $_SESSION['user_id'], '', $serviceID);\n\n\t\t\t$referer = \\Util\\Analytics::getReferer();\n\t\t\tif ($referer) {\n\t\t\t\t$referer['user_service_id'] = $userServiceID;\n\t\t\t\t$referer['billing_message_id'] = $billing_message_id;\n\t\t\t\t$message_id = rand_id(\"user_messages\", \"message_id\", $db);\n\t\t\t\t$db->query(\"INSERT INTO user_messages (message_id, user_id, type, subtype, description, date) VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP())\", $message_id, $_SESSION['user_id'], 'referer', 'purchase', json_encode($referer));\n\t\t\t}\n\t\t\t\\Util\\Analytics::clearReferer();\n\n\t\t} else {\n\t\t\t$this->internalError = true;\n\t\t\t$this->errors = \"Failure inserting row into billing_user_service.\";\n\t\t\t$this->writeMessage(\"ERROR\", 7, $amount, $currency, \"Failure inserting row into billing_user_service.\", $userServiceID);\n\t\t\treturn false;\n\t\t}\n\n\t\t// Determine how to process the payment based upon amount and nopayment flag\n\t\tif (!$noPaymentFlag && $amount > 0) {\n\t\t\t// Deduct coupon amount\n\t\t\t$newAmount = $amount;\n\t\t\tif ($this->couponCode) {\n\t\t\t\t$couponValue = $this->getCouponValue($this->couponCode, $amount);\n\t\t\t\t$newAmount = $amount - $couponValue;\n\n\t\t\t\t// If this coupon was generated by a specific Admin member, that admin member should be attributed with\n\t\t\t\t// the sale.\n\t\t\t\t$coupon = \\Billing\\Model\\BillingUserCouponModel::findById($userID, $this->couponCode);\n\t\t\t\tif ($coupon->creator_id) {\n\t\t\t\t\t\\Admin\\Controller\\AdminTransactionController::getInstance()->setAdminId($coupon->creator_id);\n\t\t\t\t}\n\n\t\t\t\t\\Admin\\Controller\\AdminTransactionController::getInstance()->setCoupon($this->couponCode, $couponValue);\n\t\t\t}\n\n\t\t\t$this->subtotalAmount = $newAmount;\n\n\t\t\t// if they didn't pay more than $10 for this order\n\t\t\t// then delete any vouchers we issued them.\n\t\t\tif ($this->subtotalAmount < 10 && $this->voucher) {\n\t\t\t\t$this->voucher->destroy();\n\t\t\t\t$this->voucher = null;\n\t\t\t}\n\n\t\t\tif ($skip_taxes) {\n\t\t\t\t// Skip taxes if purchased from the support admin until that part has been implemented\n\t\t\t} else {\n\t\t\t\t$tax = \\Billing\\Tax::getTaxDue($_SESSION['user_id'], $newAmount, $ccDetails, $serviceID);\n\t\t\t\t$newAmount += $tax;\n\t\t\t\t$this->taxAmount = $tax;\n\t\t\t}\n\n\t\t\t// Charge credit card if amount is greater than 0 after coupon\n\t\t\tif ($newAmount > 0) {\n\t\t\t\t$processResult = $this->processCharge($userServiceID, $userServiceID, $newAmount, $ccDetails, $serviceID, $serviceItemID, $currency);\n\t\t\t\tif (!$processResult) {\n\t\t\t\t\t// If charge doesn't go through, cancel the service we just set up\n\t\t\t\t\t$this->removeService($userServiceID);\n\t\t\t\t\t//If a service was deleted, put it back\n\t\t\t\t\tif ($obsoleteUserServiceID) {\n\t\t\t\t\t\t$db->query(\n\t\t\t\t\t\t\t\"UPDATE billing_user_service SET deleted='0' WHERE user_service_id = ?\",\n\t\t\t\t\t\t\t$obsoleteUserServiceID\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Add billing profile, update billing_user_service!\n\t\t\t$this->setBillingProfile($userServiceID, $ccDetails);\n\t\t} else if ($noPaymentFlag == 3) { //setup recurring billing, but no charge right now\n\t\t\tif (!$billingProfile && !$this->processAuthorization($userServiceID, $userServiceID, \"1.00\", $currency, $cardNumber, $expirationDate, $firstName, $lastName, $zip, $cvv2)) {\n\t\t\t\t$this->removeService($userServiceID);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$this->setBillingProfile($userServiceID, $ccDetails);\n\t\t\t$this->transactionID = \\Billing\\Credit::generateFreeChargeAttempt($_SESSION['user_id'], $userServiceID, $freeChargeAttemptId);\n\n\t\t} else if ($amount > 0 && $noPaymentFlag == 4) { //setup recurring billing, but no charge right now\n\t\t\t$this->transactionID = \\Billing\\Credit::generateCheckChargeAttempt($_SESSION['user_id'], $userServiceID, $amount, $freeChargeAttemptId);\n\n\t\t} else if ($noPaymentFlag == 1) {\n\t\t\t// Insert FREESERVICE message\n\t\t\t$this->writeMessage(\"FREESERVICE\", 8, 0, $currency, \"Received free service ($serviceID) from $startDate to $nextDate.\", $userServiceID, $_SESSION['user_id'], '', $serviceID);\n\n\t\t} else if ($amount == 0 && $creditData['credit_used']) {\n\t\t\t$this->transactionID = \\Billing\\Credit::generateFreeChargeAttempt($_SESSION['user_id'], $userServiceID, $freeChargeAttemptId);\n\t\t\t$this->writeMessage(\"CREDITFREESERVICE\", 9, 0, $currency, \"User credit ({$creditData['starting_credit']}) larger than amount ({$creditData['credit_lost']})\", $userServiceID, $_SESSION['user_id'], $this->transactionID, $serviceID);\n\t\t}\n\n\n\t\tif ($this->couponCode && $this->isCouponValidForService($this->couponCode, $serviceID)) {\n\t\t\t$this->useCoupon($this->couponCode, $userServiceID, $amount, $serviceID);\n\t\t\t// If the coupon value was equal the order amount then create a free transaction record for receipt\n\t\t\t// used when a domain credit is applied\n\t\t\tif ($amount == $couponValue) {\n\t\t\t\t$this->transactionID = \\Billing\\Credit::generateFreeChargeAttempt($_SESSION['user_id'], $userServiceID, $freeChargeAttemptId);\n\t\t\t}\n\t\t}\n\n\t\tif ($creditData['credit_used'] && !$noPaymentFlag) {\n\t\t\t\\Billing\\Credit::setUserCredit($_SESSION['user_id'], $creditData['remaining_credit']);\n\t\t\t$this->writeMessage('CREDITUSED', 10, $creditData['credit_lost'], $currency, \"Used credit\", $userServiceID, $_SESSION['user_id'], $this->transactionID, $serviceID);\n\t\t}\n\n\t\tif ($prorate && $prorate['extra_credit'] > 0) {\n\t\t\t$this->transactionID = \\Billing\\Credit::generateFreeChargeAttempt($_SESSION['user_id'], $userServiceID, $freeChargeAttemptId);\n\t\t\t$currentCredit = \\Billing\\Credit::getUserCredit($_SESSION['user_id']);\n\t\t\t\\Billing\\Credit::setUserCredit($_SESSION['user_id'], $currentCredit + $prorate['extra_credit']);\n\t\t\t$this->writeMessage('CREDITADDED', 11, $prorate['extra_credit'], $currency, \"Added credit.\", $userServiceID, $_SESSION['user_id'], $this->transactionID, $serviceID);\n\t\t}\n\n\t\tif ($tax && !$noPaymentFlag) {\n\t\t\t\\Billing\\Tax::writeTaxMessage($tax, $currency, $ccDetails, $userServiceID, $_SESSION['user_id'], $this->transactionID ?: '', $serviceID);\n\t\t}\n\n\t\t$this->userServiceID = $userServiceID;\n\n\t\t// Purchase addons are not offered at the moment and haven't been since 2014.\n\t\t// These were for our old email system, but is not relevant now that we have switched to GoogleApps\n\t\t// foreach($purchased_addons as $a) {\n\t\t// \t$user_addon_id = rand_id('billing_service_addon', 'user_addon_id');\n\t\t// \t$db->query(\"INSERT INTO billing_service_addon (user_addon_id, user_service_id, user_id, addon_id, start_date, expiration_date) VALUE (?, ?, ?, ?, NOW(), ?)\",\n\t\t// \t\t$user_addon_id,\n\t\t// \t\t$userServiceID,\n\t\t// \t\t$_SESSION['user_id'],\n\t\t// \t\t$a['addon_id'],\n\t\t// \t\t$nextDate);\n\t\t// \t$this->writeMessage('CREATEADDON', 9, $a['amount'], $currency, \"Added \" . $a['addon_id'], $userServiceID, $_SESSION['user_id'], $this->transactionID, $serviceID);\n\t\t// \t$this->logChargeAttemptItem('addon', $user_addon_id, $a['amount'], $_SESSION['user_id']);\n\t\t// }\n\n\t\t$userService = new BillingUserService($this->userServiceID);\n\n\t\tif ($userID && $site_owner_id && ($userID != $site_owner_id)) {\n\t\t\t//designer platform master account holders make SSL purchases on behalf of the client so we must pass in the site owner id\n\t\t\t$userService->afterAdd($site_id, $site_owner_id);\n\t\t} else {\n\t\t\t$userService->afterAdd($site_id);\n\t\t}\n\t\t$billingProfileId = empty($billingProfile['id']) ? $this->billingProfileId : $billingProfile['id'];\n\t\t$this->logRevenueRecognition($_SESSION['user_id'], $userServiceID, null, $billingProfileId, $ccDetails, $obsoleteUserServiceID, $freeChargeAttemptId, $currency);\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Adds or increases the quantity a billing service addon.\n\t * Used for pre Google apps email, which some users are still on.\n\t *\n\t * @param $addon_id string The id of the addon from weebly_definition.billing_addon table\n\t * @param $user_service_id int The user service recieving the addon\n\t * @param $quantity int\n\t * @param $billing_options array Can be a billing_profile_id, credit card data, or free addon indicator\n\t *\n\t * @return bool\n\t **/\n\tpublic function updateServiceAddon($addon_id, $user_service_id, $billing_options = array())\n\t{\n\t\tglobal $db;\n\n\t\tif ($_SESSION['user_id']) {\n\t\t\tPermissions::requireUserService($user_service_id);\n\t\t\tif ($billing_options['billing_profile'] && $billing_options['billing_profile']['type'] == 'CIM') {\n\t\t\t\tPermissions::requireBillingProfile($billing_options['billing_profile']['id']);\n\t\t\t}\n\t\t}\n\n\t\t$addon = $db->get_assoc(\"SELECT * FROM weebly_definition.billing_addon WHERE addon_id=?\", $addon_id);\n\t\tif (!$addon) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$current_addon = $db->get_assoc(\n\t\t\t\"SELECT *\n\t\t\tFROM billing_service_addon bsa INNER JOIN\n\t\t\t\tweebly_definition.billing_addon ba ON bsa.addon_id = ba.addon_id\n\t\t\tWHERE user_service_id=?\n\t\t\t\tAND addon_type=?\n\t\t\t\tAND deleted = 0\",\n\t\t\t$user_service_id,\n\t\t\t$addon['addon_type']\n\t\t);\n\n\t\tif ($current_addon['addon_id'] == $addon_id) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$s = new BillingUserService($user_service_id);\n\t\t$amount = $s->getAddonUpgradePrice($addon_id);\n\n\t\t$billing_options['billingProfile'] = $billing_options['billing_profile'];\n\t\tif (!$billing_options['free_service'] && $amount > 0) {\n\t\t\t$result = $this->processCharge(\n\t\t\t\t$user_service_id,\n\t\t\t\t$addon_id,\n\t\t\t\t$amount,\n\t\t\t\t$billing_options,\n\t\t\t\t$user_service['service_id']\n\t\t\t);\n\t\t\tif (!$result) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif ($current_addon['user_addon_id']) {\n\t\t\t$user_addon_id = $current_addon['user_addon_id'];\n\t\t\t$db->query(\"UPDATE billing_service_addon SET addon_id=?, disabled=0 WHERE user_addon_id=?\", $addon_id, $current_addon['user_addon_id']);\n\t\t\t$this->writeMessage('UPDATEADDON', 81, $amount, 'USD', \"Updated addon from {$current_addon['addon_id']} to $addon_id\", $user_service_id, $s->user_id, $this->transactionID, $s->service_id);\n\t\t} else {\n\t\t\t$user_addon_id = rand_id('billing_service_addon', 'user_addon_id');\n\t\t\t$db->query(\n\t\t\t\t\"INSERT INTO billing_service_addon (user_addon_id, user_service_id, user_id, addon_id, start_date, expiration_date) VALUE (?, ?, ?, ?, NOW(), ?)\",\n\t\t\t\t$user_addon_id,\n\t\t\t\t$user_service_id,\n\t\t\t\t$s->user_id,\n\t\t\t\t$addon_id,\n\t\t\t\t$s->renews_on\n\t\t\t);\n\t\t\t$this->writeMessage('CREATEADDON', 82, $amount, 'USD', \"Added $addon_id\", $user_service_id, $s->user_id, $this->transactionID, $s->service_id);\n\t\t}\n\t\t$this->logChargeAttemptItem('addon', $user_addon_id, $amount, $s->user_id);\n\t\t//send receipt\n\t\t$t = new BillingTransaction($this->transactionID);\n\t\tif (!$billing_options['free_service']) {\n\t\t\trequire_once(CONFIG_INCL_PATH . \"/email.php\");\n\t\t\tlist($status, $message) = emailTemplate($s->user_id, \"billing-addonReceipt\", array('BillingUserService' => $s, \"BillingTransaction\" => $t), false);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic function removeService($userServiceID, $userID = null)\n\t{\n\t\tif ($userID) {\n\t\t\t$db = new mysql_db('weebly', $userID);\n\t\t} else {\n\t\t\tglobal $db;\n\t\t}\n\n\t\tlist($serviceID, $xSubID, $user_id, $site_id) = $db->get(\"SELECT service_id, x_sub_id, user_id, site_id FROM billing_user_service WHERE user_service_id = ?\", $userServiceID);\n\n\t\tif ($this->disableAutoRenew($userServiceID)) {\n\t\t\t// Remove entry from user_service_id\n\t\t\tif (!$db->query(\"UPDATE billing_user_service SET deleted = 1, deleted_date = CURRENT_TIMESTAMP WHERE user_service_id = ? AND user_id = ?\", $userServiceID, $user_id)) {\n\t\t\t\t$this->internalError = true;\n\t\t\t\t$this->errors = \"Failure canceling service.\";\n\t\t\t\t$this->writeMessage(\"ERROR\", 11, '', '', \"Failure deleting entry from billing_user_service, user_service_id $userServiceID.\", $userServiceID);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif ($serviceID === 'Weebly.simpleChatSite12' || $serviceID === 'Weebly.simpleChatSiteRevised12') {\n\t\t\t\\SimpleChat\\Controller\\SimpleChatController::disableSimpleChatAccount($user_id, $site_id);\n\t\t} else if ($serviceID === \"Weebly.googleAppsTrial\" || $serviceID === \"Weebly.googleAppsDomain\") {\n\t\t\t$appDomain = \\Google\\Model\\GoogleAppsDomainModel::findByUserServiceID($user_id, $userServiceID);\n\t\t\tif ($appDomain) {\n\t\t\t\t$appDomain->destroy();\n\t\t\t}\n\t\t}\n\n\t\t$this->writeMessage(\"REMOVESERVICE\", 13, '', '', \"Successfully removed service $serviceID (user_service_id: $userServiceID, x_sub_id: $xSubId).\", $userServiceID, $user_id, '', $serviceID);\n\n\t\treturn true;\n\n\t}\n\n\tpublic function swapService($userServiceID, $newServiceID, $newServiceItemID = null, $userID = null, $forceSwap = false)\n\t{\n\t\tglobal $validate;\n\n\t\t$userID = $userID ? $userID : $_SESSION['user_id'];\n\n\t\t$db = \\Data\\Shard\\ShardDB::getShardDB($userId);\n\t\t$s = new BillingUserService($userServiceID);\n\n\t\t// Is this the same service already?\n\t\tif ($s->service_id == $newServiceID) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!$forceSwap && !$this->serviceIsSwappable($s->service_id, $newServiceID)) {\n\t\t\t$this->internalError = true;\n\t\t\t$this->errors = \"Failure changing service: new service type is invalid.\";\n\t\t\t$this->writeMessage(\"ERROR\", 46, '', '', \"Failure swapping service: new service id ($newServiceID) not compatible with existing service id ({$s->service_id})\", $userServiceID, $userID);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!$db->query(\"UPDATE billing_user_service SET service_id = ?, service_item_id = ? WHERE user_service_id = ? AND user_id = ?\", $newServiceID, $newServiceItemID, $userServiceID, $userID)) {\n\t\t\t$this->internalError = true;\n\t\t\t$this->errors = \"Failure changing service.\";\n\t\t\t$this->writeMessage(\"ERROR\", 47, '', '', \"Failure updating service_id while trying to swap $newServiceID ($newServiceItemID) for {$s->service_id} ({$s->service_item_id}).\", $userServiceID);\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->writeMessage(\"SWAPSERVICE\", 48, '', '', \"Successfully changed {$s->service_id} ({$s->service_item_id}) into $newServiceID ($newServiceItemID).\", $userServiceID, $userID);\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Determines if $currentServiceID can be swapped for $newServiceID. This is usually done\n\t * to change a domain to a different renewal period.\n\t */\n\tpublic function serviceIsSwappable($currentServiceID, $newServiceID, $isTrial = false)\n\t{\n\t\t//Apps trials can be swapped to the paying service.\n\t\tif ($currentServiceID == \\Google\\Controller\\AppsController::TRIAL_SERVICE_ID &&\n\t\t   $newServiceID == \\Google\\Controller\\AppsController::PAYING_SERVICE_ID) {\n\t\t\treturn true;\n\t\t}\n\n\t\t//Can't swap to a free service. I guess this is just being really careful. --drew@weebly.com\n\t\t$dbd = mysql_db::getDefinitionDB();\n\t\t$amount = $dbd->get_one(\"SELECT amount FROM billing_service WHERE service_id = ?\", $newServiceID);\n\t\tif (!$amount) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($isTrial && $dbd->get_one(\"SELECT level FROM billing_service WHERE service_id=?\", $newServiceID)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t//Service roots must match.\n\t\t$currentRoot = $this->getServiceRoot($currentServiceID);\n\t\t$newRoot = $this->getServiceRoot($newServiceID);\n\t\treturn $currentRoot == $newRoot;\n\t}\n\n\tpublic function extendSubscription($userServiceID, $time = false, $period = 'MONTH')\n\t{\n\t\tglobal $db;\n\n\t\t$s = new BillingUserService($userServiceID);\n\t\tif (!$s->user_service_id || !$s->renews_on) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$time = $time ? $time : $s->recurring_period;\n\n\t\tif ($period != \"DAY\" && $period != \"MONTH\" && $period != \"YEAR\") {\n\t\t\t$period = \"MONTH\";\n\t\t}\n\n\t\tif ($s->service_id == Developer::SERVICE_ID) {\n\t\t\t$renews = date(\"Y-m-01 00:00:00\", strtotime(\"+1 month\")); //Start of the next month\n\t\t\tif (!$db->query(\"UPDATE billing_user_service SET renews_on = ?  WHERE user_service_id = ? LIMIT 1\", $renews, $s->user_service_id)) {\n\t\t\t\t$this->internalError = true;\n\t\t\t\t$this->errors = \"Failed extending {$s->service_id} to $renews\";\n\t\t\t\t$this->writeMessage(\"ERROR\", 502, '', '', \"Failed extending {$s->service_id} to $renews\", $s->user_service_id, $s->user_id, '', $s->service_id);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t$this->writeMessage(\"EXTEND\", 503, '', '', \"Extended {$s->service_id} to $renews\", $s->user_service_id, $s->user_id, '', $s->service_id);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tif (!$db->query(\"UPDATE billing_user_service SET renews_on = renews_on + INTERVAL ? $period WHERE user_service_id = ?\", $time, $s->user_service_id)) {\n\t\t\t\t$this->internalError = true;\n\t\t\t\t$this->errors = \"Failed extending {$s->service_id} another $time {$period}s\";\n\t\t\t\t$this->writeMessage(\"ERROR\", 500, '', '', \"Failed extending {$s->service_id} another $time {$period}s\", $s->user_service_id, $s->user_id, '', $s->service_id);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t$this->writeMessage(\"EXTEND\", 501, '', '', \"Extended {$s->service_id} another $time {$period}s\", $s->user_service_id, $s->user_id, '', $s->service_id);\n\t\t\t\tif ($s->hasAddons()) {\n\t\t\t\t\t$this->extendAddons($userServiceID);\n\t\t\t\t}\n\t\t\t\t$s->afterExtend();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * When a service is extended all disabled addons are deleted and\n\t * active addons are extend to match the service expiration\n\t **/\n\tpublic function extendAddons($userServiceID)\n\t{\n\t\tglobal $db;\n\n\t\t$s = new BillingUserService($userServiceID);\n\t\t$db->query(\"UPDATE billing_service_addon SET deleted=1 WHERE user_service_id=? AND disabled=1\", $userServiceID);\n\t\t$db->query(\"UPDATE billing_service_addon SET expiration_date=? WHERE user_service_id=? AND deleted=0\", $s->renews_on, $userServiceID);\n\t}\n\n\tpublic function updateSubscription($userServiceID, $options = array())\n\t{\n\t\tglobal $db, $validate;\n\t\textract($options);\n\t\tif (is_array($ccDetails)) {\n\t\t\textract($ccDetails);\n\t\t}\n\n\t\t$this->userId = $_SESSION['user_id'];\n\t\t$this->provider = $paymentProvider;\n\t\t// PAYMENT-TODO-BRAINTREE, make this use ccDetails like Adyen implementation\n\t\t$this->nonce = $_POST['payment_method_nonce'];\n\n\t\t$s = new BillingUserService($userServiceID);\n\t\t// PAYMENT-TODO check to see if this should be in dynamic currencies or USD only\n\t\t$currency = 'USD';\n\t\t// Check that the new service currency matches the old service, otherwise abandon process\n\t\tif ($newServiceItemID) {\n\t\t\t$newServiceItem = BillingServiceItemModel::findByServiceItemId($newServiceItemID);\n\t\t\tif ($s->currency !== $newServiceItem->currency_code) {\n\t\t\t\t$this->internalError = true;\n\t\t\t\t$this->errors = \"Failure updating service: new service currency does not match the previous service currency.\";\n\t\t\t\t$this->writeMessage(\"ERROR\", 38, '', '', \"Failure updating subscription $subscriptionID, user_service_id $userServiceID: new service id ($newServiceID, $newServiceItemID) not compatible with existing service id ({$s->service_id}, {$s->service_item_id})\", $userServiceID);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t$currency = $newServiceItem->currency_code;\n\t\t}\n\n\t\t\\Admin\\Controller\\AdminTransactionController::getInstance()->setUserId($s->user_id);\n\n\t\t// This is a subscription, meaning the User Service ID doesn't change!  Because of this, we need to store the current USID and status\n\t\t// so that our admin tools can properly understand and compare the old/new values.\n\t\t\\Admin\\Controller\\AdminTransactionController::getInstance()->setPreviousServiceVar('user_service_id', $userServiceID);\n\t\t\\Admin\\Controller\\AdminTransactionController::getInstance()->setPreviousUserServiceStatus($s->status);\n\n\t\t// Can't switch services that don't match the same root\n\t\tif ($newServiceID && !$this->serviceIsSwappable($s->service_id, $newServiceID, $s->is_trial)) {\n\t\t\t$this->internalError = true;\n\t\t\t$this->errors = \"Failure updating service: new service type is invalid.\";\n\t\t\t$this->writeMessage(\"ERROR\", 37, '', '', \"Failure updating subscription $subscriptionID, user_service_id $userServiceID: new service id ($newServiceID) not compatible with existing service id ({$s->service_id})\", $userServiceID);\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($newServiceID) {\n\t\t\t\\Admin\\Controller\\AdminTransactionController::getInstance()->setPreviousServiceVar('service_id', $s->service_id);\n\t\t}\n\n\t\t// Make sure newServiceID is a valid service\n\n\t\t// Don't allow a deleted service to be updated\n\t\tif ($s->deleted && stripos($s->service_id, 'trial')==false) {\n\t\t\t$this->internalError = true;\n\t\t\t$this->errors = \"Failure updating service: service is deleted.\";\n\t\t\t$this->writeMessage(\"ERROR\", 34, '', '', \"Failure updating subscription $subscriptionID, user_service_id $userServiceID: subscription is deleted.\", $userServiceID);\n\t\t\treturn false;\n\t\t}\n\n\t\t// Don't allow a service to be extend far in advance\n\t\tif ($extend) {\n\t\t\t$dNextRecur = $this->getNextRecurrenceDate($userServiceID);\n\t\t\tif (strtotime($dNextRecur) > strtotime(\"+3 years\")) {\n\t\t\t\t$this->internalError = true;\n\t\t\t\t$this->errors = \"Can not extend service far in advance.\";\n\t\t\t\t$this->writeMessage(\"ERROR\", 49, '', '', \"Failure extending subscription $subscriptionID, user_service_id $userServiceID: can not extend service far in advance.\", $userServiceID);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// 1)  -----------------------------------\n\t\t// If status is not active, process charge to restore to an active state\n\t\tif ($s->status != 'active' || $extend) {\n\t\t\t$serviceID = $newServiceID ?: $s->service_id;\n\t\t\t// new service handling system\n\t\t\t$serviceItemID = $newServiceItemID ?: $s->service_item_id;\n\t\t\tif ($serviceItemID) {\n\t\t\t\t$serviceItem = BillingServiceItemModel::findByServiceItemId($serviceItemID);\n\t\t\t\t$serviceAmount = $serviceItem->price;\n\t\t\t} else {\n\t\t\t\t$serviceAmount = ($newServiceID && $s->service_id != $newServiceID) ? $db->get_one(\"SELECT amount FROM weebly_definition.billing_service WHERE service_id = ?\", $newServiceID) : $s->amount;\n\t\t\t}\n\t\t\t$quantity = $s->quantity ?: 1;\n\t\t\tif (isset($totalAmount)) { // if total_amount is set in options\n\t\t\t\t$newAmount = $totalAmount;\n\t\t\t} else {\n\t\t\t\t$newAmount = $serviceAmount * $quantity;\n\t\t\t}\n\t\t\tif ($s->hasAddons()) {\n\t\t\t\tif ($newServiceID) {\n\t\t\t\t\t$yearlyAddonTotal = $s->getYearlyAddonTotal();\n\t\t\t\t\t$months = $db->get_one(\"SELECT recurring_period FROM weebly_definition.billing_service WHERE service_id = ?\", $newServiceID);\n\t\t\t\t\t$years = $months / 12;\n\t\t\t\t\t$newAmount += $yearlyAddonTotal * $years;\n\t\t\t\t} else {\n\t\t\t\t\t$newAmount += $s->getRenewalAddonTotal();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Some variables used for revenue-recognition\n\t\t\t */\n\n\t\t\t$couponAmount = 0;\n\t\t\t$creditAmount = 0;\n\t\t\t$taxAmount = 0;\n\t\t\t$subtotal = 0; // Amount before taxes\n\t\t\t$tax = 0;\n\t\t\t$previous_expiry_date = $s->renews_on;\n\n\t\t\t$creditData = \\Billing\\Credit::calculateCredit($s->user_id, $serviceID, $newAmount);\n\t\t\tif ($creditData['credit_used']) {\n\t\t\t\t$newAmount = $creditData['amount'];\n\t\t\t\t$creditAmount = $creditData['credit_lost'];\n\t\t\t}\n\n\t\t\t// See noPaymentFlag options from addService\n\t\t\tif ($newAmount > 0 && $noPaymentFlag == 4) { // Register a payment by check\n\t\t\t\t$this->transactionID = \\Billing\\Credit::generateCheckChargeAttempt($s->user_id, $userServiceID, $newAmount, $freeChargeAttemptId);\n\n\t\t\t} elseif ($newAmount > 0) {\n\t\t\t\tif ($this->couponCode) {\n\t\t\t\t\t$couponAmount = $this->getCouponValue($this->couponCode, $newAmount);\n\t\t\t\t\t$newAmount = $newAmount - $couponAmount;\n\t\t\t\t}\n\t\t\t\t$subtotal = $newAmount;\n\t\t\t\tif (!$skip_taxes) {\n\t\t\t\t\t$tax = \\Billing\\Tax::getTaxDue($s->user_id, $newAmount, $ccDetails, $serviceID);\n\t\t\t\t\t$newAmount += $tax;\n\t\t\t\t}\n\t\t\t\tif ($newAmount > 0) {\n\t\t\t\t\tif (!$this->processCharge($userServiceID, $userServiceID, $newAmount, $ccDetails, $newServiceID, $newServiceItemID, $currency)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} elseif ($newAmount == 0 && $creditData['credit_used']) {\n\t\t\t\t$this->transactionID = \\Billing\\Credit::generateFreeChargeAttempt($s->user_id, $userServiceID, $freeChargeAttemptId);\n\t\t\t\t$this->writeMessage(\"CREDITFREESERVICE\", 9, 0, '', \"User credit ({$creditData['starting_credit']}) larger than amount ({$creditData['credit_lost']})\", $userServiceID, $s->user_id, $this->transactionID, $serviceID);\n\t\t\t}\n\n\t\t\t// Do we need to swap the service?\n\t\t\tif ($newServiceID) {\n\t\t\t\tif (!$this->swapService($userServiceID, $newServiceID, $newServiceItemID, $s->user_id, true)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t$s = new BillingUserService($userServiceID);\n\t\t\t}\n\n\t\t\t// If charge is successful, extend subscription and make account active again\n\t\t\t$this->extendSubscription($userServiceID);\n\n\t\t\t// If service is not active, make active\n\t\t\tif ($s->status != 'active') {\n\t\t\t\tWeeblySubscription::doAction_makeAccount($s, 'active');\n\t\t\t}\n\n\t\t\t// Remove any special timeline modifiers\n\t\t\t$db->query(\"UPDATE billing_user_service SET timeline_modifier = '' WHERE user_service_id = ?\", $userServiceID);\n\n\t\t\t$this->writeMessage(\"RENEW\", 45, $newAmount, $currency, \"User manually renewed '{$s->service_id}'.\", $userServiceID, $s->user_id, '', $s->service_id);\n\n\t\t\t// Mark coupon as used if necessary\n\t\t\tif ($this->couponCode) {\n\t\t\t\t$this->useCoupon($this->couponCode, $userServiceID, $s->amount, $serviceID);\n\t\t\t}\n\n\t\t\tif ($creditData['credit_used']) {\n\t\t\t\t\\Billing\\Credit::setUserCredit($s->user_id, $creditData['remaining_credit']);\n\t\t\t\t$this->writeMessage('CREDITUSED', 46, $creditData['credit_lost'], $currency, \"Used credit\", $userServiceID, $s->user_id, $this->transactionID ?: '', $serviceID);\n\t\t\t}\n\n\t\t\tif ($tax) {\n\t\t\t\t\\Billing\\Tax::writeTaxMessage($tax, $currency, $ccDetails, $userServiceID, $s->user_id, $this->transactionID ?: '', $s->service_id);\n\t\t\t}\n\n\t\t\t// Then, send out receipt\n\t\t\t$t = new BillingTransaction($this->transactionID);\n\t\t\t$s = new BillingUserService($userServiceID);\n\t\t\t$site = Site::getBySiteID($s->site_id, $s->user_id);\n\n\t\t\tif ($s->is_trial || ($site && $site->hasExpiredTrial())) {\n\t\t\t\t\\Billing\\Controller\\FreeTrialController::convertToPaid($s->user_id, $s->user_service_id);\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Log revenue recognition\n\t\t\t */\n\t\t\t$tax_details = null;\n\t\t\tif ($tax > 0) {\n\t\t\t\t$tax_details = \\Billing\\Tax::getTaxReportingInformation($s->user_id, $ccDetails, $subtotal);\n\t\t\t}\n\t\t\t$billingProfileId = empty($billingProfile['id']) ? $this->billingProfileId : $billingProfile['id'];\n\n\t\t\t$charge_attempt_id = $this->last_charge_attempt_id ? $this->last_charge_attempt_id :  $freeChargeAttemptId;\n\t\t\tif (empty($charge_attempt_id)) {//might be redundant\n\t\t\t\t$charge_attempt = \\Billing\\Model\\BillingChargeAttemptModel::findByXId($s->user_id, $this->transactionID, true);\n\t\t\t\t$charge_attempt_id = $charge_attempt->charge_attempt_id;\n\t\t\t}\n\n\t\t\t\\Billing\\Controller\\ReportingOrderController::recordSingleRenewal(\n\t\t\t\t$s->user_id,\n\t\t\t\t$userServiceID,\n\t\t\t\t$charge_attempt_id,\n\t\t\t\t$billingProfileId,\n\t\t\t\t$previous_expiry_date, // The date the service WOULD have expired\n\t\t\t\tfalse, // Is autorenew? Why, no.\n\t\t\t\t$subtotal, // Amount after discounts & credits but before tax\n\t\t\t\t$currency,\n\t\t\t\t$couponAmount, // Amount of discount\n\t\t\t\t$this->couponCode,\n\t\t\t\t$creditAmount,\n\t\t\t\t$tax,\n\t\t\t\t$tax_details\n\t\t\t);\n\n\t\t\trequire_once(CONFIG_INCL_PATH . \"/email.php\");\n\t\t\tif (!$skipReceiptEmail) {\n\t\t\t\tif (BillingServiceHelper::isCustomDomain($s->service_id)) {\n\t\t\t\t\t// Extend domain by another x year(s)!\n\t\t\t\t\t$years = floor($s->recurring_period / 12);\n\t\t\t\t\tDomain::extend($s->user_service_id, $years);\n\t\t\t\t\t$this->writeMessage(\"DOMAINEXTEND\", \"49-$years\", $newAmount, $currency, \"Extended domain registration by $years years.\", $userServiceID, $s->user_id, '', $s->service_id);\n\t\t\t\t\tlist($status, $message) = emailTemplate($s->user_id, \"billing-domainReceiptRenewal\", array('BillingUserService' => $s, \"BillingTransaction\" => $t), false);\n\n\t\t\t\t} else if (BillingServiceHelper::isProAccount($s->service_id)) {\n\t\t\t\t\tlist($status, $message) = emailTemplate($s->user_id, \"billing-proReceiptRenewal\", array(\"BillingUserService\" => $s, \"BillingTransaction\" => $t), false);\n\t\t\t\t} else if (Billing::getServiceRoot($s->service_id) == Developer::SERVICE_ID) {\n\t\t\t\t\t$Dev = Developer::getByUserID($s->user_id);\n\t\t\t\t\t$Dev->setSiteChargesPaid($this->transactionID);\n\t\t\t\t\tlist($status, $message) = emailTemplate($s->user_id, \"billing-designerReceipt\", array('BillingUserService' => $s, \"BillingTransaction\" => $t), false, \"designersupport@weebly.com\");\n\t\t\t\t} else {\n\t\t\t\t\tlist($status, $message) = emailTemplate($s->user_id, \"billing-genericReceiptRenewal\", array(\"BillingUserService\" => $s, \"BillingTransaction\" => $t), false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else if (!$billingProfile) {\n\t\t\t// PAYMENT-TODO Log when when profile are created and when they fail to create\n\t\t\tif ($this->provider == 'adyen') {\n\t\t\t\t$provider = new AdyenProvider();\n\t\t\t\t$provider->createFromPaymentDetails($this->userId, $ccDetails);\n\t\t\t\t$provider->createRecurring();\n\t\t\t\t$billingProfile['id'] = $provider->addBillingProfile();\n\t\t\t\tif(!$billingProfile['id']) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else if (!$this->processAuthorization($userServiceID, $userServiceID, \"1.00\", $currency, $cardNumber, $expirationDate, $firstName, $lastName, $zip, $cvv2)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\n\t\t// 2)  -----------------------------------\n\t\t// Add or update billing profile\n\t\tif (!($billingProfile && $billingProfile[\"skipUpdate\"])) {\n\t\t\tif (!$billingProfile) {\n\t\t\t\t$billingProfile = array(\"type\" => \"CIM\");\n\t\t\t\t$billingProfile['id'] = $this->addBillingProfile($ccDetails);\n\t\t\t}\n\n\t\t\tif (!$billingProfile['id']) {\n\t\t\t\t$this->internalError = true;\n\t\t\t\t$this->errors = \"Failure creating billing profile.\";\n\t\t\t\t$this->writeMessage(\"NOTICE\", 31, $amount, $currency, \"Failure creating billing profile.\", $userServiceID);\n\t\t\t} else {\n\t\t\t\t//Update profile location data (used for taxes)\n\t\t\t\tif ($zip) {\n\t\t\t\t\t$profile = \\Billing\\Model\\BillingUserProfileModel::findByProfileId($s->user_id, $billingProfile['id']);\n\t\t\t\t\tif ($profile) {\n\t\t\t\t\t\t$profile->country = $country;\n\t\t\t\t\t\t$profile->zip = $zip;\n\t\t\t\t\t\t$profile->vat_id = $vat_id;\n\t\t\t\t\t\t$profile->save();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!$db->query(\"UPDATE billing_user_service SET billing_profile_id = ? WHERE user_service_id = ?\", $billingProfile['id'], $userServiceID)) {\n\t\t\t\t\t$this->internalError = true;\n\t\t\t\t\t$this->errors = \"Failure updating billing_user_service with billing profile.\";\n\t\t\t\t\t$this->writeMessage(\"NOTICE\", \"39-b\", $amount, $currency, \"Failure updating billing_user_service with billing profile.\", $userServiceID);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t// 3)  -----------------------------------\n\t\t// Migrate subscription to new system\n\t\tif ($s->billing_system == \"arb\") {\n\t\t\tif ($s->x_sub_id) {\n\t\t\t\tif (!deleteSubscription($s->x_sub_id)) {\n\t\t\t\t\t$this->internalError = true;\n\t\t\t\t\t$this->errors = \"Failure updating service.\";\n\t\t\t\t\t$this->writeMessage(\"ERROR\", 43, \"\", $currency, \"Failure migrating user_service_id $userServiceID: couldn't remove old subscription.\", $userServiceID);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$db->query(\"UPDATE billing_user_service SET billing_system = 'weebly-cim' WHERE user_service_id = ?\", $userServiceID);\n\t\t\t$this->writeMessage(\"MIGRATESERVICE\", 44, $s->amount, $currency, \"Successfully migrated {$s->service_id} subscription from old 'arb' system to new 'weebly-cim' system.\", $userServiceID, $s->user_id, '', $s->service_id);\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Updates the payment method associated with this userService. This will not create\n\t * any charges. Works for active or deleted services.\n\t */\n\tpublic function changePaymentMethod($userID, $userServiceID, $ccDetails)\n\t{\n\t\tglobal $db;\n\t\textract($ccDetails);\n\n\t\tif (!$billingProfile) {\n\t\t\tif ($paymentProvider == 'adyen') {\n\t\t\t\t$provider = new AdyenProvider();\n\t\t\t\t$provider->createFromPaymentDetails($userID, $ccDetails);\n\t\t\t\t$provider->createRecurring();\n\t\t\t\t$billingProfile['id'] = $provider->addBillingProfile();\n\t\t\t} elseif ($paymentProvider =='paypal') {\n\t\t\t\t$paypal = new PayPal();\n\t\t\t\t$return = $paypal->createBillingAgreement($_REQUEST['token']);\n\n\t\t\t\t$billingProfile['id'] = $this->addPayPalBillingProfile($ccDetails, $return);\n\n\t\t\t} else {\n\t\t\t\t$currency = LocaleController::getCurrency($userID);\n\t\t\t\tif ($this->processAuthorization($userServiceID, $userServiceID, \"1.00\", $currency, $cardNumber, $expirationDate, $firstName, $lastName, $zip, $cvv2)) {\n\t\t\t\t\t$billingProfile = array(\"type\" => \"CIM\");\n\t\t\t\t\t$billingProfile['id'] = $this->addBillingProfile($ccDetails);\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$billingProfile['id']) {\n\t\t\t\t$this->internalError = true;\n\t\t\t\t$this->errors = \"Failure creating billing profile.\";\n\t\t\t\t$this->writeMessage(\"NOTICE\", \"31-b\", 0, '', \"Failure creating billing profile.\", $userServiceID);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t$db->query(\n\t\t\t\"UPDATE billing_user_service SET billing_profile_id=?, billing_system='weebly-cim' WHERE user_id=? AND user_service_id=?\",\n\t\t\t$billingProfile['id'],\n\t\t\t$userID,\n\t\t\t$userServiceID\n\t\t);\n\t\treturn true;\n\t}\n\n\n\n\t/* -------------------------\n\t\tCoupon functions\n\t\t=========================\n\t*/\n\n\tpublic function getCouponValue($couponCode, $amount, $used = 0) {\n\t\tglobal $db;\n\t\t$currency_code = LocaleController::getCurrency($_SESSION['user_id']);\n\n\t\t$used = $used ? \"\" : \"AND buc.used = 0 \";\n\t\tlist($couponType, $couponAmount) = $db->get(\"SELECT bc.type, bc.amount FROM billing_user_coupon buc, weebly_definition.billing_coupon bc WHERE buc.user_coupon_id = ? AND buc.user_id = ? $used AND buc.expires_on > CURRENT_TIMESTAMP AND buc.coupon_id = bc.coupon_id AND bc.currency_code = ?\", $couponCode, $_SESSION['user_id'],  $currency_code);\n\n\t\tif (!$couponType || !$couponAmount) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\tif ($couponType == 'percentage') {\n\t\t\t\treturn number_format($amount * ($couponAmount/100), 2);\n\t\t\t}\n\t\t\tif ($couponType == 'dollar') {\n\t\t\t\treturn number_format($couponAmount, 2);\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tpublic function useCoupon($couponCode, $userServiceID, $amount, $serviceID = null)\n\t{\n\t\tglobal $db;\n\n\t\t$this->writeMessage(\"COUPON\", 36, $this->getCouponValue($couponCode, $amount), '', \"Coupon $couponCode used.\", $userServiceID, null, null, $serviceID);\n\t\t$coupon = \\Billing\\Model\\BillingUserCouponModel::findById($_SESSION['user_id'], $couponCode);\n\t\t$coupon->used = '1';\n\t\t$coupon->used_on = new \\DateTime();\n\t\treturn $coupon->save();\n\n\t}\n\n\t/**\n\t * Checks to see if this coupon is valid for the given service\n\t * returns true if so otherwise false\n\t *\n\t * @param $couponCode\n\t * @param $serviceID\n\t *\n\t * @return bool\n\t */\n\tpublic function isCouponValidForService($couponCode, $serviceID)\n\t{\n\t\tglobal $db;\n\t\t$currency = LocaleController::getCurrency($this->userId);\n\t\t$results = $db->get_one(\"SELECT billing_service_id FROM weebly_definition.billing_coupon WHERE coupon_id=? AND currency_code=?\", $couponCode, $currency);\n\n\t\tif (!$results) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (strpos($serviceID, $results) !== false) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @see BillingUserCouponModel::generateCouponForUser\n\t * @param $userId\n\t * @param $couponCode\n\t * @param $daysLeft\n\t * @param null $creator_id\n\t * @return bool|string\n\t */\n\tpublic function createCoupon($userId, $couponCode, $daysLeft, $creator_id = null)\n\t{\n\t\tglobal $db;\n\n\t\t$user_coupon_id = randomString(10, \"ABCDEFGHJKLMNPQRSTUVWXYZ123456789\");\n\t\tif ($db->query(\n\t\t\t\"INSERT INTO billing_user_coupon (user_coupon_id, user_id, coupon_id, used, used_on, expires_on, creator_id)\n\t\t\tVALUES (?, ?, ?, 0, NULL, CURRENT_TIMESTAMP + INTERVAL ? DAY, ?)\",\n\t\t\t$user_coupon_id,\n\t\t\t$userId,\n\t\t\t$couponCode,\n\t\t\t$daysLeft,\n\t\t\t$creator_id\n\t\t)) {\n\t\t\treturn $user_coupon_id;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Get a code for a user's unexpired, unused coupon, if one exists.\n\t * @param int $userId The user's ID.\n\t * @param string $coupon_id The ID of the coupon you want to get.\n\t * @return string|bool Coupon code, or false if user does not have an unexpired coupon.\n\t */\n\tpublic function getExistingCouponData($userId, $coupon_id)\n\t{\n\t\tglobal $db;\n\t\t$coupons = $db->get_all_assoc(\n\t\t\t\"SELECT *\n\t\t\tFROM billing_user_coupon\n\t\t\tWHERE used = 0\n\t\t\tAND expires_on > CURRENT_TIMESTAMP\n\t\t\tAND user_id = ?\n\t\t\tAND coupon_id = ?\",\n\t\t\t$userId,\n\t\t\t$coupon_id\n\t\t);\n\t\treturn $coupons[0];\n\t}\n\n\t/**\n\t * Get a code for a user's unexpired, unused coupon, if one exists.\n\t * @param int $userId The user's ID.\n\t * @param string $coupon_id The ID of the coupon you want to get.\n\t * @return string|bool Coupon code, or false if user does not have an unexpired coupon.\n\t */\n\tpublic function getExistingCoupon($userId, $coupon_id)\n\t{\n\t\treturn ($coupon = $this->getExistingCouponData($userId, $coupon_id)) ? $coupon['user_coupon_id'] : false;\n\t}\n\n\t/**\n\t * Get a code for a user's unexpired, unused coupon, if one exists.\n\t * @param int $userId The user's ID.\n\t * @param string $coupon_id The ID of the coupon you want to get.\n\t * @return bool True if the user has an unexpired coupon\n\t */\n\tpublic function hasCoupon($userId, $coupon_id)\n\t{\n\t\treturn (bool) $this->getExistingCoupon($userId, $coupon_id);\n\t}\n\n\t/**\n\t * Get coupon data. Create coupon if one does not exist.\n\t * @TODO: The algorithm here is a bit backwards.   getCoupon() should call thi, etc.\n\t * @param int $userId The user's ID.\n\t * @param string $coupon_id The ID of the coupon you want to get.\n\t * @param int Days until coupon would expire (used to create coupon if needed).\n\t * @return sarray An array of coupon information.\n\t */\n\tpublic function getCouponData($userId, $coupon_id, $daysLeft)\n\t{\n\t\tif (!$this->hasCoupon($userId, $coupon_id)) {\n\t\t\t$this->createCoupon($userId, $coupon_id, $daysLeft);\n\t\t}\n\n\t\treturn $this->getExistingCouponData($userId, $coupon_id);\n\t}\n\n\t/**\n\t * Get a code for a user's unexpired, unused coupon. If one does not exist, create it.\n\t * @param int $userId The user's ID.\n\t * @param string $coupon_id The ID of the coupon you want to get.\n\t * @param int Days until coupon would expire (used to create coupon if needed).\n\t * @return string|bool Coupon code, or false if one could not be created.\n\t */\n\tpublic function getCoupon($userId, $coupon_id, $daysLeft)\n\t{\n\t\treturn $this->getExistingCoupon($userId, $coupon_id)\n\t\t\t?: $this->createCoupon($userId, $coupon_id, $daysLeft);\n\t}\n\n\t/**\n\t * Gets the expiration date for a coupon.\n\t * @param int $userId The coupon owner's user ID.\n\t * @param string $coupon_id The coupon ID.\n\t * @return int|bool Returns a timestamp if the user has an unexpired coupon, false if not.\n\t */\n\tpublic function getCouponExpiration($userId, $coupon_id)\n\t{\n\t\treturn ($coupon = $this->getExistingCouponData($userId, $coupon_id)) ? strtotime($coupon['expires_on']) : false;\n\t}\n\n\t/* -------------------------\n\t\tPromotion functions\n\t\t=========================\n\t*/\n\n\tpublic function redeemPromotion($promoCode, $userId = false, $couponExpiresDays = 7)\n\t{\n\t\tglobal $db;\n\n\t\t$userId = $userId ? $userId : $_SESSION['user_id'];\n\t\t$dbg = mysql_db::getGlobalDB();\n\t\t$currency = LocaleController::getCurrency($userId);\n\n\t\t$coupon_id = $dbg->get_one(\"SELECT coupon_id FROM billing_promo WHERE remaining > 0 AND expires > CURRENT_TIMESTAMP() AND deleted = 0 AND promo_id = ?\", $promoCode);\n\n\t\tif (!$coupon_id) {\n\t\t\treturn array(false, tl(\"Invalid promotional code.\"));\n\t\t} else if ($db->get_one(\"SELECT promo_id FROM billing_user_promo WHERE promo_id = ? AND user_id = ?\", $promoCode, $userId)) {\n\t\t\treturn array(false, tl(\"You have already redeemed this promotional code.\"));\n\t\t} else {\n\t\t\t$dbg->query(\"UPDATE billing_promo SET remaining = remaining - 1 WHERE promo_id = ?\", $promoCode);\n\n\t\t\t$user_coupon_id = $this->createCoupon($userId, $coupon_id, $couponExpiresDays);\n\t\t\t$db->query(\"INSERT INTO billing_user_promo (promo_id, user_id, used_on) VALUES (?, ?, CURRENT_TIMESTAMP())\", $promoCode, $userId);\n\n\t\t\t$this->writeMessage(\"PROMO\", 52, 0, '', \"Redeemed promo code $promoCode. Assigned coupon '$coupon_id': $user_coupon_id, expires in $couponExpiresDays days.\");\n\n\t\t\t$description = $db->get_one(\"SELECT description FROM weebly_definition.billing_coupon WHERE coupon_id = ? AND currency_code = ?\", $coupon_id, $currency);\n\n\t\t\treturn array($user_coupon_id, $description);\n\t\t}\n\n\t}\n\n\n\t/* -------------------------\n\t\tPayment functions\n\t\t=========================\n\t*/\n\n\t/**\n\t * ccDetails\n\t * - billingProfile(If profile is used no other details are needed)\n\t *   - type (CIM or PayPal)\n\t *   - id\n\t * - cardNumber\n\t * - expirationDate\n\t * - firstName\n\t * - lastName\n\t * - zip\n\t * - country\n\t * - vat_id\n\t */\n\tpublic function processCharge($userServiceID, $description, $amount, $ccDetails, $serviceID = null, $serviceItemID = null, $currency = 'USD')\n\t{\n\t\tglobal $db;\n\t\textract($ccDetails);\n\n\t\t$this->attemptedAmount = $amount;\n\n\t\tif ($this->hasTooManyFailedAttempts($userServiceID)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($ccDetails['paymentProvider'] == \"braintree\") {\n\t\t\tif ($billingProfile['id']) {\n\t\t\t\treturn $this->processBillingProfileCharge($amount, $currency, $billingProfile['id'], $userServiceID, $serviceID, $serviceItemID);\n\t\t\t}\n\t\t} else if ($billingProfile['type'] == \"CIM\") {\n\t\t\treturn $this->processBillingProfileCharge($amount, $currency, $billingProfile['id'], $userServiceID, $serviceID, $serviceItemID);\n\t\t} else if ($billingProfile['type'] == \"paypal\") {\n\t\t\treturn $this->processPaypalCharge($amount, $currency, $userServiceID, $serviceID, $serviceItemID, $ccDetails);\n\t\t}\n\n\n\t\tif ($ccDetails['paymentProvider'] == \"braintree\") {\n\t\t\t$userDetails = [\n\t\t\t\t'firstName' => $ccDetails['firstName'],\n\t\t\t\t'lastName' => $ccDetails['lastName'],\n\t\t\t\t'zip' => $ccDetails['zip'],\n\t\t\t\t'country' => $ccDetails['country'],\n\t\t\t\t'vat_id' => $ccDetails['vat_id'],\n\t\t\t\t'phone' => $ccDetails['phone'],\n\t\t\t];\n\n\t\t\t$provider = new BraintreeProvider();\n\t\t\t$provider->createFromPaymentDetails($this->userId, $this->nonce, $userDetails);\n\t\t\t$response = $provider->charge($amount);\n\t\t\t$ccDetails = $response['ccDetails'];\n\t\t\t$this->paymentProvider = $provider;\n\t\t} elseif ($ccDetails['paymentProvider'] == 'adyen') {\n\t\t\t$this->paymentProvider = new AdyenProvider();\n\t\t\t$this->paymentProvider->createFromPaymentDetails($this->userId, $ccDetails);\n\t\t\t$response = $this->paymentProvider->charge($amount, $currency, $serviceItemID);\n\t\t} else {\n\t\t\t// AuthorizeNet based charge (the current default)\n\t\t\t$lastFour = substr($cardNumber, -4, 4);\n\t\t\t$cardType = getCardType($cardNumber);\n\n\t\t\t$ccZip = BILLING_ENABLE_ZIPCODE_VERIFICATION ? $zip : '';\n\t\t\t// Always in USD\n\t\t\t$response = createCharge(\"AUTH_CAPTURE\", $description, $amount, $cardNumber, $expirationDate, $firstName, $lastName, $ccZip, $cvv2);\n\t\t}\n\t\t/**\n\t\t * Register this transaction with the Spam\\Fraud Event system if this is not a cron-based operation\n\t\t */\n\t\tif ($_SESSION['user_id'] > 0) {\n\t\t\t\\Spam\\Event::getInstance($_SESSION['user_id'])->register(\n\t\t\t\t\\Spam\\Event::USER_PURCHASE,\n\t\t\t\tarray(\n\t\t\t\t\t'amount' => $amount,\n\t\t\t\t\t'postal' => $zip,\n\t\t\t\t\t'userIp' => $_SERVER['REMOTE_ADDR'],\n\t\t\t\t\t'userServiceId' => $userServiceID,\n\t\t\t\t\t'success' => ( $response['code'] === '1' ),\n\t\t\t\t\t'avs' => $response['AVS'],\n\t\t\t\t\t'cvv' => $response['CVV'],\n\t\t\t\t\t'timestamp' => time(),\n\t\t\t\t\t'cardDetails' => array(\n\t\t\t\t\t\t'lastFour' => $lastFour,\n\t\t\t\t\t\t'bin' => substr($cardNumber, 0, 6)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t// If charge fails, set errors and return false\n\t\tif ($response['code'] != \"1\" && $response['success'] != true) {\n\t\t\t$this->internalError = false;\n\t\t\tif ($ccDetails['paymentProvider'] == 'adyen' || $ccDetails['paymentProvider'] == 'braintree') {\n\t\t\t\t$this->errors = \"Failure (\".$response['error_code'].\"): \".$response['error_message'];\n\t\t\t\t$this->errorCode = $response['error_code'];\n\t\t\t\t$this->errorText = $response['error_message'];\n\t\t\t\t$this->writeMessage(\"ERROR\", 18, $amount, $currency, \"Payment failed due to: \".$response['error_message'], $userServiceID, $db->user_id, $response['transactionID'], $serviceID);\n\t\t\t\t$this->logChargeAttempt(\"ERROR\", $userServiceID, $amount, $currency, $response['error_code'], $response['error_message'], $ccDetails, $_SERVER['REMOTE_ADDR'], $response['transactionID'], $serviceID, $serviceItemID, '', '', $f['fraudScore'], $f['fraudExplanation']);\n\t\t\t} else {\n\t\t\t\t// AUTHORIZE_DELETE\n\t\t\t\t//Only AuthorizeNet will hit this flow, which will hopefully be removed soon :)\n\t\t\t\t$this->errors = \"Failure (\".$response['code'].\"): \".$response['reasonText'];\n\t\t\t\t$this->errorCode = $response['reasonCode'];\n\t\t\t\t$this->errorText = $response['reasonText'];\n\t\t\t\t$this->writeMessage(\"ERROR\", 18, $amount, $currency, \"Payment failed on card ending in $lastFour: \".$response['reasonText'], $userServiceID, $db->user_id, $response['transactionID'], $serviceID);\n\t\t\t\t$this->logChargeAttempt(\"ERROR\", $userServiceID, $amount, $currency, $response['reasonCode'], $response['reasonText'], $ccDetails, $_SERVER['REMOTE_ADDR'], $response['transactionID'], $serviceID, $serviceItemID, $response['AVS'], $response['CCV'], $f['fraudScore'], $f['fraudExplanation']);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->transactionID = $response['transactionID'];\n\t\t$userID = $_SESSION['user_id'];\n\t\tif (!$userID) {\n\t\t\t$userID = $db->get_one(\"SELECT user_id FROM billing_user_service WHERE user_service_id=?\", $userServiceID);\n\t\t}\n\t\tif (!$serviceID) {\n\t\t\t$serviceID = $db->get_one(\"SELECT service_id FROM billing_user_service WHERE user_service_id=?\", $userServiceID);\n\t\t}\n\n\t\tif ($ccDetails['paymentProvider'] == 'adyen' || $ccDetails['paymentProvider'] == 'braintree') {\n\t\t\t$this->writeMessage(\"PAYMENT\", 102, $amount, $currency, \"Payment successfully processed (transaction ID: {$this->transactionID})\", $userServiceID, $userID, $this->transactionID, $serviceID);\n\t\t\t$this->logChargeAttempt(\"SUCCESS\", $userServiceID, $amount, $currency, $response['response_code'], $response['response_message'], $ccDetails, $_SERVER['REMOTE_ADDR'], $this->transactionID, $serviceID, $serviceItemID, '', '', 0, 'Minfraud Disabled');\n\t\t} else {\n\t\t\t$this->writeMessage(\"PAYMENT\", 102, $amount, $currency, \"Payment successfully processed (transaction ID: {$this->transactionID})\", $userServiceID, $userID, $this->transactionID, $serviceID);\n\t\t\t$this->logChargeAttempt(\"SUCCESS\", $userServiceID, $amount, $currency, $response['reasonCode'], $response['reasonText'], $ccDetails, $_SERVER['REMOTE_ADDR'], $this->transactionID, $serviceID, $serviceItemID, $response['AVS'], $response['CCV'], 0, 'Minfraud Disabled');\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic function processVoid($userServiceID, $transactionID, $userID)\n\t{\n\n\t\t$response = voidCharge($userServiceID, $transactionID);\n\n\t\t// If charge fails, set errors and return false\n\t\tif ($response['code'] != \"1\" || $response['transactionID'] === '0') {\n\t\t\t$this->internalError = false;\n\t\t\t$this->errors = \"Failure (\".$response['code'].\"): \".$response['reasonText'];\n\t\t\t$this->errorCode = $response['reasonCode'];\n\t\t\t$this->errorText = $response['reasonText'];\n\t\t\t$this->writeMessage(\"ERROR\", 19, $amount, 'USD', \"Void failed: \".$response['reasonText'], $userServiceID, $userID); //$amount is undefined\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->transactionID = $response['transactionID'];\n\t\t$bus = BillingUserServiceModel::findByUserServiceId($userID, $userServiceID);\n\t\t$serviceID = $bus ? $bus->service_id : '';\n\t\t$serviceItemID = $bus ? $bus->service_item_id : '';\n\t\tlist($amount, $currency) = \\Data\\Shard\\ShardDB::getShardDB($userID)->get(\"SELECT amount, currency FROM billing_messages WHERE x_id = ? AND type = 'PAYMENT'\", $transactionID);\n\n\t\t$this->writeMessage(\"VOID\", 10104, $amount, $currency, \"Void successfully processed (transaction ID: {$this->transactionID}, ref ID: $transactionID)\", $userServiceID, $userID, $this->transactionID, $serviceID);\n\t\t$this->logChargeAttempt(\"SUCCESS\", $userServiceID, $amount, $currency, $response['reasonCode'], $response['reasonText'], \"\", $_SERVER['REMOTE_ADDR'], $response['transactionID'], $serviceID, $serviceItemID, \"\", \"\", \"\", \"\", $userID, \"VOID\", $transactionID);\n\n\t\t$client_attr = ReportingController::buildClientAttributes($_SERVER, $_SESSION);\n\t\tReportingOrderController::recordReturn(\"VOID\", $userID, $userServiceID, $client_attr, $this->last_charge_attempt_id, null, $currency);\n\n\t\treturn true;\n\n\t}\n\n\tpublic function processRefund($userId, $userServiceID, $transactionID, $amount, $currency, $paymentProvider = null, $attemptVoid = false)\n\t{\n\t\tglobal $validate;\n\t\t$db = \\mysql_db::getShardDB($userId);\n\t\t$amount = preg_replace(\"/[^0-9\\.]/\", \"\", $amount);\n\n\t\tswitch($paymentProvider) {\n\t\t\tcase self::ADYEN:\n\n\t\t\t\t$result = new Result();\n\t\t\t\t$provider = new AdyenProvider();\n\t\t\t\tif ($attemptVoid) {\n\t\t\t\t\t$response = $provider->void($transactionID);\n\t\t\t\t\t$result->message = tl(\"Void or Refund Adyen payment successfully sent\");\n\t\t\t\t} else {\n\t\t\t\t\t$response = $provider->refund($transactionID, $amount, $currency);\n\t\t\t\t\t$result->message = tl(\"Refund Adyen payment successfully sent\");\n\t\t\t\t}\n\t\t\t\t// If charge fails, set errors and return false\n\t\t\t\tif ($response['success'] == false) {\n\t\t\t\t\t$this->internalError = false;\n\t\t\t\t\t$this->errors = \"Failure (\".$response['code'].\"): \".$response['reasonText'];\n\t\t\t\t\t$this->errorCode = $response['reasonCode'];\n\t\t\t\t\t$this->errorText = $response['reasonText'];\n\t\t\t\t\t$this->writeMessage(\"ERROR\", 35, $amount, $currency, \"Refund failed: \".$response['reasonText'], $userServiceID, $userId);\n\n\t\t\t\t\t$result->success = false;\n\t\t\t\t\t$result->message = tl(\"Error refunding Adyen payment\");\n\t\t\t\t\treturn $result;\n\t\t\t\t}\n\n\t\t\t\t// For logging\n\t\t\t\t$ccDetails = [\n\t\t\t\t\t\"paymentProvider\" => self::ADYEN\n\t\t\t\t];\n\n\t\t\t\t$this->transactionID = $response['transactionID'];\n\t\t\t\t$bus = BillingUserServiceModel::findByUserServiceId($userId, $userServiceID);\n\t\t\t\t$serviceID = $bus ? $bus->service_id : '';\n\t\t\t\t$serviceItemID = $bus ? $bus->service_item_id : '';\n\n\t\t\t\t$this->writeMessage(\"REFUND\", 10102, $amount, $currency, \"Refund successfully sent (transaction ID: {$this->transactionID}, ref ID: $transactionID)\", $userServiceID, $userId, $this->transactionID, $serviceID);\n\t\t\t\t$this->logChargeAttempt(\"SUCCESS\", $userServiceID, $amount, $currency, $response['reasonCode'], $response['response'], $ccDetails, $_SERVER['REMOTE_ADDR'], $response['transactionID'], $serviceID, $serviceItemID, \"\", \"\", \"\", \"\", $userId, \"REFUND\", $transactionID);\n\n\t\t\t\t$client_attr = ReportingController::buildClientAttributes($_SERVER, $_SESSION);\n\t\t\t\tReportingOrderController::recordReturn(\"REFUND\", $userId, $userServiceID, $client_attr, $this->last_charge_attempt_id, null, '', $currency, $profile_id);\n\n\n\t\t\t\t$result->success = true;\n\n\t\t\t\treturn $result;\n\n\t\t\tcase self::PAYPAL:\n\t\t\t\t$result = new Result();\n\t\t\t\tif ($this->processPayPalRefund($userId, $transactionID, $amount)) {\n\t\t\t\t\t$result->success = true;\n\t\t\t\t\t$result->message = tl(\"Refund PayPal payment successful\");\n\t\t\t\t} else {\n\t\t\t\t\t$result->success = false;\n\t\t\t\t\t$result->message = tl(\"Error refunding PayPal payment\");\n\t\t\t\t}\n\t\t\t\treturn $result;\n\t\t\tdefault:\n\t\t}\n\n\t\tlist($origAmount, $currency, $profile_id, $user_id, $email, $firstName, $lastName) = $db->get(\"\n\t\tSELECT\n\t\t\tbm.amount,\n\t\t\tbm.currency,\n\t\t\tbup.billing_profile_id,\n\t\t\tbup.user_id, u.email,\n\t\t\tbup.first_name,\n\t\t\tbup.last_name\n\t\tFROM\n\t\t\tbilling_messages bm,\n\t\t\tbilling_user_service bus,\n\t\t\tbilling_user_profile bup,\n\t\t\tuser u\n\t\tWHERE\n\t\t\tbm.user_service_id = bus.user_service_id\n\t\tAND\n\t\t\tbus.billing_profile_id = bup.billing_profile_id\n\t\tAND\n\t\t\tbm.user_id = u.user_id\n\t\tAND\n\t\t\tbm.type = 'PAYMENT'\n\t\tAND\n\t\t\tbm.x_id = '{$validate->db($transactionID)}'\n\t\t\");\n\t\t$ccLast4 = $db->get_one(\"SELECT cc_last4 FROM billing_charge_attempt WHERE x_id=? AND (transaction_type NOT IN ('REFUND', 'VOID') OR transaction_type IS NULL) LIMIT 1\", $transactionID);\n\n\t\tif (!$ccLast4 && $profile_id) {\n\t\t\t$ccLast4 = $db->get_one(\"SELECT cc_last4 FROM billing_user_profile WHERE billing_profile_id=?\", $profile_id);\n\t\t}\n\t\tif (!$profile_id) {  //Billing profile was removed. Look it up in the billing messages.\n\t\t\t$user_id = $db->get_one(\"SELECT user_id FROM billing_user_service WHERE user_service_id=?\", $userServiceID);\n\t\t\t$prof_message = $db->get_one(\"SELECT description FROM billing_messages WHERE user_id=? AND type='REMOVEDPROFILE' ORDER BY date DESC LIMIT 1\", $user_id);\n\t\t\tif ($prof_message) {\n\t\t\t\tpreg_match(\"/Removed profile:(.*?)$/\", $prof_message, $matches);\n\t\t\t\t$profile_id = $matches[1];\n\t\t\t\tif ($profile_id) {\n\t\t\t\t\t$origAmount = $db->get_one(\"SELECT amount FROM billing_messages WHERE user_id=? AND x_id=? AND type='PAYMENT'\", $user_id, $transactionID);\n\t\t\t\t\tlist($ccLast4_profile, $firstName, $lastName, $email) = $db->get(\"SELECT cc_last4, first_name, last_name, email FROM billing_user_profile bup INNER JOIN user u ON bup.user_id=u.user_id WHERE bup.billing_profile_id=?\", $profile_id);\n\t\t\t\t\tif (!$ccLast4 && $ccLast4_profile) {\n\t\t\t\t\t\t$ccLast4 = $ccLast4_profile;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!$profile_id || !$ccLast4) {\n\t\t\t$this->internalError = true;\n\t\t\t$this->errors = \"Refund failed: Unable to find billing profile for user service $userServiceID\";\n\t\t\t$this->writeMessage(\"ERROR\", 35, $amount, $currency, $this->errors, $userServiceID, $userId);\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!$amount) {\n\t\t\t$amount = $origAmount;\n\t\t} else if ($amount > $origAmount) {\n\t\t\t$amount = $origAmount;\n\t\t}\n\n\t\t// Processes a refund for AuthorizeNet, always assumes USD\n\t\t$response = refundCharge($userServiceID, $transactionID, $amount, $ccLast4, $user_id, $email, $firstName, $lastName);\n\n\t\t// If charge fails, set errors and return false\n\t\tif ($response['code'] != \"1\") {\n\t\t\t$this->internalError = false;\n\t\t\t$this->errors = \"Failure (\".$response['code'].\"): \".$response['reasonText'];\n\t\t\t$this->errorCode = $response['reasonCode'];\n\t\t\t$this->errorText = $response['reasonText'];\n\t\t\t$this->writeMessage(\"ERROR\", 35, $amount, $currency, \"Refund failed: \".$response['reasonText'], $userServiceID, $userId);\n\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->transactionID = $response['transactionID'];\n\t\t$bus = BillingUserServiceModel::findByUserServiceId($user_id, $userServiceID);\n\t\t$serviceID = $bus ? $bus->service_id : '';\n\t\t$serviceItemID = $bus ? $bus->service_item_id : '';\n\n\t\t$this->writeMessage(\"REFUND\", 10102, $amount, $currency, \"Refund successfully processed (transaction ID: {$this->transactionID}, ref ID: $transactionID)\", $userServiceID, $userId, $this->transactionID, $serviceID);\n\t\t$this->logChargeAttempt(\"SUCCESS\", $userServiceID, $amount, $currency, $response['reasonCode'], $response['reasonText'], \"\", $_SERVER['REMOTE_ADDR'], $response['transactionID'], $serviceID, $serviceItemID, \"\", \"\", \"\", \"\", $userId, \"REFUND\", $transactionID);\n\n\t\t$client_attr = ReportingController::buildClientAttributes($_SERVER, $_SESSION);\n\t\tReportingOrderController::recordReturn(\"REFUND\", $userId, $userServiceID, $client_attr, $this->last_charge_attempt_id, null, '', $currency, $profile_id);\n\t\treturn true;\n\n\t}\n\n\tpublic function processAuthorization($userServiceID, $description, $amount, $currency, $cardNumber, $expirationDate, $firstName, $lastName, $zip, $cvv2)\n\t{\n\n\t\tif ($this->hasTooManyFailedAttempts($userServiceID)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($this->provider == 'braintree') {\n\t\t\t$userDetails = [\n\t\t\t\t'firstName' => $firstName,\n\t\t\t\t'lastName' => $lastName,\n\t\t\t\t'zip' => $zip\n\t\t\t];\n\n\t\t\t$provider = new BrainTreeProvider();\n\t\t\t$provider->createFromPaymentDetails($this->userId, $this->nonce, $userDetails);\n\t\t\t$response = $provider->authorize();\n\t\t\t$this->paymentProvider = $provider;\n\n\t\t\tif (!$response['success']) {\n\t\t\t\t$this->internalError = false;\n\t\t\t\t$this->errors = \"Failure (\".$response['error_code'].\"): \".$response['error_text'];\n\t\t\t\t$this->errorCode = $response['error_code'];\n\t\t\t\t$this->errorText = $response['error_text'];\n\t\t\t\t$this->writeMessage(\"ERROR\", 20, 0, '', \"Authorization failed on card ending in \" . $response['last4'] . \": \".$response['error_text'], $userServiceID);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$this->writeMessage(\"AUTHONLY\", 21, $amount, $currency, \"Validation successful on card ending in \" . $response['last4'] . \".\", $userServiceID);\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$lastFour = substr($cardNumber, -4, 4);\n\t\t\t// AuthorizeNet always assumes USD\n\t\t\t$response = createCharge(\"AUTH_ONLY\", $description, $amount, $cardNumber, $expirationDate, $firstName, $lastName, $zip, $cvv2);\n\n\t\t\t// If authorization fails, set errors and return false\n\t\t\tif ($response['code'] != \"1\") {\n\t\t\t\t$this->internalError = false;\n\t\t\t\t$this->errors = \"Failure (\".$response['code'].\"): \".$response['reasonText'];\n\t\t\t\t$this->errorCode = $response['reasonCode'];\n\t\t\t\t$this->errorText = $response['reasonText'];\n\t\t\t\t$this->writeMessage(\"ERROR\", 20, $amount, $currency, \"Authorization failed on card ending in $lastFour: \".$response['reasonText'], $userServiceID);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$this->writeMessage(\"AUTHONLY\", 21, $amount, $currency, \"Authorization successful on card ending in $lastFour (transaction ID: {$response['transactionID']}).\", $userServiceID);\n\n\t\t\t// Success, now cancel the temporary authorization\n\t\t\t$response2 = voidCharge($userServiceID, $response['transactionID']);\n\n\t\t\t// If authorization cancel fails, set errors\n\t\t\tif ($response2['code'] != \"1\") {\n\t\t\t\t$this->internalError = false;\n\t\t\t\t$this->errors = \"Failure (\".$response['code'].\"): \".$response['reasonText'];\n\t\t\t\t$this->errorCode = $response['reasonCode'];\n\t\t\t\t$this->errorText = $response['reasonText'];\n\t\t\t\t$this->writeMessage(\"ERROR\", 22, $amount, $currency, \"Authorization VOID failed on card ending in $lastFour: \".$response['reasonText'], $userServiceID);\n\t\t\t}\n\n\t\t\t// Don't need to record a success, it's recorded in the post-back!\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tprivate function logTransactionSuccess($amount, $currency, $userServiceID, $serviceID, $serviceItemID, $transactionID, $responseCode, $responseText, $ccDetails, $description, $subtype, $exp_increased = false, $userID = false)\n\t{\n\t\tif (!$userID) {\n\t\t\t$userID = $_SESSION['user_id'];\n\t\t}\n\t\t$this->transactionID = $transactionID;\n\t\tif ($userServiceID && !$serviceID) {\n\t\t\t$billingService = BillingUserServiceModel::findByUserServiceId($userID, $userServiceID);\n\t\t\t$serviceID = $billingService->service_id;\n\t\t\t$serviceItemID = $billingService->service_item_id;\n\t\t}\n\t\t$this->writeMessage(\"PAYMENT\", $subtype, $amount, $currency, $description, $userServiceID, $userID, $transactionID, $serviceID);\n\t\t$this->logChargeAttempt(\"SUCCESS\", $userServiceID, $amount, $currency, $responseCode, $responseText, $ccDetails, $_SERVER['REMOTE_ADDR'], $transactionID, $serviceID, $serviceItemID);\n\t\tif ($exp_increased) {\n\t\t\t$this->writeMessage(\"EXPIRATIONINCREASESUCCESS\", \"98-$exp_increased\", $amount, $currency, \"Successfully processed payment after increasing cc expiration date\", $userServiceID, $userID);\n\t\t}\n\t}\n\n\tprivate function logTransactionFail($amount, $currency, $userServiceID, $serviceID, $serviceItemID, $description, $responseCode, $responseText, $transactionID, $ccDetails, $subtype)\n\t{\n\t\t$this->writeMessage(\"ERROR\", $subtype, $amount, $currency, $description, $userServiceID);\n\t\t$this->logChargeAttempt(\"ERROR\", $userServiceID, $amount, $currency, $responseCode, $responseText, $ccDetails, $_SERVER['REMOTE_ADDR'], $transactionID, $serviceID, $serviceItemID);\n\t\t$this->errorText = $responseText;\n\t}\n\n\tprivate function processPaypalReferenceBillingProfileCharge($billingProfile, $amount, $currency, $billingProfileId, $userServiceID = '', $serviceID = false, $serviceItemID = false)\n\t{\n\t\t$referenceId = $billingProfile->x_info_id;\n\t\trequire_once(CONFIG_INCL_PATH . '/paypalphp/paypal.php');\n\t\t$serviceName = \"\";\n\t\tif ($userServiceID) {\n\t\t\t$bus = BillingUserServiceModel::findById($billingProfile->user_id, $userServiceID);\n\t\t\t$serviceName = $bus->service_id;\n\t\t}\n\n\t\t$ccDetails = [\n\t\t\t'cardType' => self::PAYPAL,\n\t\t\t'paymentProvider' => self::PAYPAL\n\t\t];\n\n\t\t$paypalAccount = self::getPaypalAccount($serviceName);\n\t\t$paypal = new PayPal($paypalAccount);\n\t\t$paypalResult = $paypal->doReferenceTransaction($amount, $referenceId, '', $currency);\n\t\tif (strtolower($paypalResult['ACK']) == 'success') {\n\t\t\t$description = \"PayPal payment successfully processed (transaction ID: {$paypalResult['TRANSACTIONID']}, account: {$paypalAccount})\";\n\t\t\t$this->logTransactionSuccess($amount, $currency, $userServiceID, $serviceID, $serviceItemID, $paypalResult['TRANSACTIONID'], 1, $paypalResult['PAYMENTSTATUS'], $ccDetails, $description, 50, '', $billingProfile->user_id);\n\t\t\treturn $paypalResult['TRANSACTIONID'];\n\t\t} else {\n\t\t\t$description = \"PayPal payment failed for profile $billingProfileId - {$paypalResult['L_ERRORCODE0']}: {$paypalResult['L_SHORTMESSAGE0']}\";\n\t\t\t$this->logTransactionFail($amount, $currency, $userServiceID, $serviceID, $serviceItemID, $description, $paypalResult['L_ERRORCODE0'], $paypalResult['L_SHORTMESSAGE0'], false, $ccDetails, 51);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate function processAuthorizeNetBillingProfileCharge($billingProfile, $amount, $billingProfileId, $userServiceID = '', $serviceID = false, $serviceItemID = false, $allow_expiration_increasing = false)\n\t{\n\t\t$exp_increased = false;\n\t\t$ccDetails = array( //Used for logging the charge attempt.\n\t\t\t'cardType' => $billingProfile->cc_type,\n\t\t\t'lastFour' => $billingProfile->cc_last4,\n\t\t\t'expirationDate' => $billingProfile->cc_expiration,\n\t\t\t'firstName' => $billingProfile->first_name,\n\t\t\t'lastName' => $billingProfile->last_name,\n\t\t\t'zip' => $billingProfile->zip,\n\t\t\t'country' => $billingProfile->country,\n\t\t\t'vat_id' => $billingProfile->vat_id,\n\t\t\t'paymentProvider' => self::AUTHORIZE_NET\n\t\t);\n\t\tlist($status, $response) = createBillingProfileCharge($amount, $billingProfile->x_info_id, $billingProfile->x_pmt_id, $userServiceID);\n\t\tif ($status != \"SUCCESS\" && $allow_expiration_increasing && preg_match(\"/card has expired/i\", $response['text'])) {\n\t\t\tif ($this->increaseProfileExpirationDate($billingProfile, 2)) {\n\t\t\t\t$exp_increased = 1;\n\t\t\t\t$this->logChargeAttempt(\"ERROR\", $userServiceID, $amount, 'USD', $response['code'], $response['text'], $ccDetails, $_SERVER['REMOTE_ADDR'], $response[6], $serviceID, $serviceItemID);\n\t\t\t\tlist($status, $response) = createBillingProfileCharge($amount, $billingProfile->x_info_id, $billingProfile->x_pmt_id, $userServiceID);\n\t\t\t\tif ($status != \"SUCCESS\" && preg_match(\"/card has expired/i\", $response['text'])) {\n\t\t\t\t\tif ($this->increaseProfileExpirationDate($billingProfile, 3)) {\n\t\t\t\t\t\t$exp_increased = 2;\n\t\t\t\t\t\t$this->logChargeAttempt(\"ERROR\", $userServiceID, $amount, 'USD', $response['code'], $response['text'], $ccDetails, $_SERVER['REMOTE_ADDR'], $response[6], $serviceID, $serviceItemID);\n\t\t\t\t\t\tlist($status, $response) = createBillingProfileCharge($amount, $billingProfile->x_info_id, $billingProfile->x_pmt_id, $userServiceID);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($status == \"SUCCESS\") {\n\t\t\t$description = \"Payment successfully processed (transaction ID: {$response[6]})\";\n\t\t\t$this->logTransactionSuccess($amount, 'USD', $userServiceID, $serviceID, $serviceItemID, $response[6], $response[2], $response[3], $ccDetails, $description, 101, $exp_increased, $billingProfile->user_id);\n\t\t\treturn $response[6];\n\t\t} else {\n\t\t\t$description = \"Profile charge failed for profile $billingProfileId - {$response['code']}: {$response['text']}\";\n\t\t\t$this->logTransactionFail($amount, 'USD', $userServiceID, $serviceID, $serviceItemID, $description, $response['code'], $response['text'], $response[6], $ccDetails, 58);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function processBillingProfileCharge($amount, $currency, $billingProfileId, $userServiceID = '', $serviceID = false, $serviceItemID = false, $allow_expiration_increasing = false, $userID = false)\n\t{\n\t\tif (!$userID) {\n\t\t\t$userID = $_SESSION['user_id'];\n\t\t}\n\t\t$billingProfile = \\Billing\\Model\\BillingUserProfileModel::findByProfileId($userID, $billingProfileId);\n\n\t\t$this->provider = $billingProfile->payment_provider;\n\n\t\tif ($this->provider == \"braintree\" || $this->provider == \"adyen\") {\n\t\t\tif ($this->provider == \"braintree\") {\n\t\t\t\t$provider = new BrainTreeProvider();\n\t\t\t} elseif ($this->provider ==\"adyen\") {\n\t\t\t\t$provider = new AdyenProvider();\n\t\t\t}\n\n\t\t\t$provider->createFromBillingProfile($userID, $billingProfileId);\n\t\t\t$this->paymentProvider = $provider;\n\t\t\t$result = $provider->charge($amount, $currency, $serviceItemID);\n\n\t\t\tif ($result['success']) {\n\t\t\t\t$responseCode = $result['response_code'];\n\t\t\t\t$responseText= $result['response_message'];\n\t\t\t\t$description = \"Payment successfully processed (transaction ID: {$result['transactionID']})\";\n\t\t\t\t$this->logTransactionSuccess($amount, $currency, $userServiceID, $serviceID, $serviceItemID, $result['transactionID'], $responseCode, $responseText, $result['ccDetails'], $description, 101, false, $billingProfile->user_id);\n\t\t\t\treturn $result['transactionID'];\n\t\t\t} else {\n\t\t\t\t$description = \"Profile charge failed for profile $billingProfileId - {$response['error_code']}: {$response['error_message']}\";\n\t\t\t\t$this->logTransactionFail($amount, $currency, $userServiceID, $serviceID, $serviceItemID, $description, $result['error_code'], $result['error_message'], $transactionID, $result['ccDetails'], 58);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t$payment_type = $billingProfile->cc_type;\n\t\t\tif (strtolower($payment_type)=='paypal') {\n\t\t\t\treturn $this->processPaypalReferenceBillingProfileCharge($billingProfile, $amount, $currency, $billingProfileId, $userServiceID, $serviceID, $serviceItemID);\n\t\t\t} else {\n\t\t\t\t// always in USD for AuthorizeNet\n\t\t\t\treturn $this->processAuthorizeNetBillingProfileCharge($billingProfile, $amount, $billingProfileId, $userServiceID, $serviceID, $serviceItemID, $allow_expiration_increasing);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static function getPaypalAccount($serviceID)\n\t{\n\t\treturn ($serviceID === \\Billing\\PurchaseScreen\\ResellerInvoiceController::INVOICE_SERVICE_ID ?\n\t\t\tPayPal::ACCOUNT_RESELLER : PayPal::ACCOUNT_WEEBLY);\n\t}\n\n\tpublic function processPaypalCharge($amount, $currency, $userServiceID = '', $serviceID = false, $serviceItemID = false, $ccDetails = array())\n\t{\n\t\tglobal $db;\n\t\textract($ccDetails);\n\n\t\trequire_once(CONFIG_INCL_PATH . '/paypalphp/httprequest.php');\n\t\trequire_once(CONFIG_INCL_PATH . '/paypalphp/paypal.php');\n\n\t\t$serviceName = \"\";\n\t\tif ($userServiceID) {\n\t\t\t$serviceName = $db->get_one(\"SELECT service_id FROM billing_user_service WHERE user_service_id = ?\", $userServiceID);\n\t\t}\n\n\t\t$userID = $_SESSION['user_id'];\n\t\t$paypalAccount = self::getPaypalAccount($serviceName);\n\t\t$paypal = new PayPal($paypalAccount);\n\n\t\t$ccDetails['cardType'] = 'PayPal';\n\t\t$ccDetails['lastFour'] = '';\n\t\t$ccDetails['expirationDate'] = '';\n\t\t$ccDetails['paymentProvider'] = self::PAYPAL;\n\n\t\tif ($billingProfile['id']) {\n\t\t\t$profile = \\Billing\\Model\\BillingUserProfileModel::findByActiveProfileId($userID, $billingProfile['id']);\n\t\t\t$final = $paypal->doReferenceTransaction($amount, $profile->x_info_id, '', $currency);\n\t\t\t$ccDetails['country'] = $profile->country;\n\t\t\t$ccDetails['zip'] = $profile->zip;\n\t\t\t$ccDetails['vat_id'] = $profile->vat_id;\n\t\t\t$ccDetails['firstName'] = $profile->first_name;\n\t\t\t$ccDetails['lastName'] = $profile->last_name;\n\n\t\t} else {\n\t\t\t$details = $paypal->getCheckoutDetails($_GET['token']);\n\t\t\t$final = $paypal->doPayment();\n\t\t\t$ccDetails['firstName'] = $details['FIRSTNAME'] ?: $ccDetails['first_name'];\n\t\t\t$ccDetails['lastName'] = $details['LASTNAME'] ?: $ccDetails['last_name'];\n\t\t\t$ccDetails['email'] = $details['EMAIL'];\n\t\t}\n\n\t\tif ($final['ACK'] == 'Success' && $userServiceID) {\n\t\t\t// Setting our TransactionID, comes back differently for first express checkout purchases vs\n\t\t\t// recurring reference transactions\n\t\t\tif ($billingProfile['id']) {\n\t\t\t\t$transactionID = $final['TRANSACTIONID'];\n\t\t\t\t$chargedAmount = $final['AMT'];\n\t\t\t\t$currency = $final['CURRENCYCODE'];\n\t\t\t} else {\n\t\t\t\t$transactionID = $final['PAYMENTINFO_0_TRANSACTIONID'];\n\t\t\t\t$chargedAmount = $final['PAYMENTINFO_0_AMT'];\n\t\t\t\t$currency = $final['PAYMENTINFO_0_CURRENCYCODE'];\n\t\t\t}\n\t\t\tif ($chargedAmount == null) {\n\t\t\t\t$chargedAmount = $amount;\n\t\t\t}\n\t\t\t$this->transactionID = $transactionID;\n\n\t\t\t// Fetch the user service and service definition\n\t\t\t$user_service = BillingUserServiceModel::findByUserServiceId($userID, $userServiceID);\n\t\t\t$service = $user_service->service()->getOne();\n\n\t\t\t// Only provide service description when purchasing premium services\n\t\t\t$serviceDescription = BillingServiceHelper::isPremiumService($serviceID) ? refinePaypalDescription($service->description, $service->recurring_period) : '';\n\n\t\t\t// Only create a billing profile if PayPal has returned a billing agreement ID\n\t\t\tif ($final['BILLINGAGREEMENTID']) {\n\t\t\t\t// The billing agreement id is included in the $final array\n\t\t\t\tif (!$billingProfile['id']) {\n\t\t\t\t\t$billingProfile = array(\"type\" => \"paypal\");\n\t\t\t\t\t$billingProfile['id'] = $this->addPayPalBillingProfile($ccDetails, $final);\n\t\t\t\t\t$this->billingProfileId = $billingProfile['id'];\n\t\t\t\t}\n\n\t\t\t\tif ($billingProfile['id']) {\n\t\t\t\t\t$user_service->billing_profile_id = $billingProfile['id'];\n\t\t\t\t\t$user_service->save();\n\n\t\t\t\t\t// Save parameters to the billing agreement for future reference\n\t\t\t\t\t$paypalCustomReturnParam = $userID.'|'.$billingProfile['id'];\n\t\t\t\t\t$update = $paypal->updateBillingAgreement($final['BILLINGAGREEMENTID'], $paypalCustomReturnParam, $serviceDescription);\n\t\t\t\t} else {\n\t\t\t\t\t$this->internalError = true;\n\t\t\t\t\t$this->errors = \"Failure creating billing profile.\";\n\t\t\t\t\t$this->writeMessage(\"NOTICE\", 31, $chargedAmount, $currency, \"Failure creating billing profile.\", $userServiceID);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Logging/Messaging\n\n\t\t\t$this->writeMessage(\"PAYMENT\", 50, $chargedAmount, $currency, \"PayPal payment successfully processed (transaction ID: {$transactionID}, account: {$paypalAccount})\", $userServiceID, $userID, $transactionID, $serviceName);\n\n\t\t\tif (isset($final['PAYMENTSTATUS'])) {\n\t\t\t\t$successText = $final['PAYMENTSTATUS'];\n\t\t\t} elseif (isset($final['PAYMENTINFO_0_PAYMENTSTATUS'])) {\n\t\t\t\t$successText = $final['PAYMENTINFO_0_PAYMENTSTATUS'];\n\t\t\t} else {\n\t\t\t\t$successText = 'unknown success';\n\t\t\t}\n\t\t\t$this->logChargeAttempt(\"SUCCESS\", $userServiceID, $chargedAmount, $currency, 1, $successText, $ccDetails, $_SERVER['REMOTE_ADDR'], $transactionID, $serviceID, $serviceItemID, \"\", \"\", 0, 'Minfraud Disabled', \"\", \"PAYMENT\", \"\", 'PayPal');\n\t\t\treturn $transactionID;\n\t\t} else {\n\t\t\t// Todo: Delete the created billing profile\n\n\t\t\t// Set our error state appropriately\n\t\t\t$this->internalError = false;\n\t\t\t$this->errorText = tl(\"PayPal payment failed. Please try again.\");\n\t\t\t$this->writeMessage(\"ERROR\", 51, $amount, $currency, \"PayPal payment failed for user {$details['EMAIL']}\", $userServiceID);\n\n\t\t\tif (isset($final['L_ERRORCODE0'])) {\n\t\t\t\t$errorCode = $final['L_ERRORCODE0'];\n\t\t\t} else {\n\t\t\t\t$errorCode = 0;\n\t\t\t}\n\t\t\tif (isset($final['L_LONGMESSAGE0'])) {\n\t\t\t\t$errorText = $final['L_LONGMESSAGE0'];\n\t\t\t} else {\n\t\t\t\t$errorText = 'unknown error';\n\t\t\t}\n\t\t\t$this->logChargeAttempt(\"ERROR\", $userServiceID, $amount, $currency, $errorCode, $errorText, $ccDetails, $_SERVER['REMOTE_ADDR'], $transactionID, $serviceID, $serviceItemID, \"\", \"\", 0, 'Minfraud Disabled', \"\", \"PAYMENT\", \"\", 'PayPal');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// This function should be used in cases of either refunds or voids\n\tpublic function processPayPalRefund($userId, $transactionID, $amount, $fullRefund = false)\n\t{\n\t\tglobal $db;\n\n\t\trequire_once(CONFIG_INCL_PATH . '/paypalphp/httprequest.php');\n\t\trequire_once(CONFIG_INCL_PATH . '/paypalphp/paypal.php');\n\n\t\tlist($user_service_id, $service_id, $origAmount, $currency) = $db->get(\"SELECT user_service_id, service_id, amount, currency FROM billing_messages WHERE user_id=? AND x_id=? AND type='PAYMENT'\", $userId, $transactionID);\n\n\t\t$paypalAccount = self::getPaypalAccount($service_id);\n\t\t$paypal = new PayPal($paypalAccount);\n\n\t\t// get the maximum refundable amount\n\t\tif ($fullRefund || $amount == $origAmount) {\n\t\t\t$amount = $origAmount;\n\t\t\t$result = $paypal->doRefund($transactionID, $amount, 'full');\n\t\t} else {\n\t\t\t$result = $paypal->doRefund($transactionID, $amount, 'partial');\n\t\t}\n\n\t\tif ($result['ACK'] == \"Success\") {\n\t\t\t$bus = BillingUserServiceModel::findByUserServiceId($userId, $user_service_id);\n\t\t\t$this->writeMessage(\"REFUND\", \"102-pp\", $amount, $currency, \"Refund successfully processed (transaction ID: {$transactionID}, account: {$paypalAccount})\", $user_service_id, $userId, $transactionID, $service_id);\n\t\t\t$this->logChargeAttempt(\"SUCCESS\", $user_service_id, $amount, $currency, '', '', ['paymentProvider'=>self::PAYPAL], $_SERVER['REMOTE_ADDR'], $result['REFUNDTRANSACTIONID'], $service_id, $bus->service_item_id, \"\", \"\", \"\", \"\", $userId, \"REFUND\", $transactionID, \"PayPal\");\n\n\t\t\t$client_attr = ReportingController::buildClientAttributes($_SERVER, $_SESSION);\n\t\t\tReportingOrderController::recordReturn(\"REFUND\", $userId, $user_service_id, $client_attr, $this->last_charge_attempt_id, $currency);\n\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\n\t/* -------------------------\n\t\tBilling profile functions\n\t\t=========================\n\t*/\n\n\tpublic function addPayPalBillingProfile($ccDetails, $recurringDetails)\n\t{\n\t\tglobal $db, $validate;\n\t\textract($ccDetails);\n\n\t\t$xInfoID = $recurringDetails['BILLINGAGREEMENTID'];\n\t\t$xPmtID = $recurringDetails['PAYMENTINFO_0_TRANSACTIONID'];\n\n\t\tif (!$xInfoID) {\n\t\t\treturn false;\n\t\t}\n\n\n\t\t$billingProfileId = rand_id('billing_user_profile', 'billing_profile_id');\n\t\t$billingProfile = new \\Billing\\Model\\BillingUserProfileModel();\n\t\t$billingProfile->billing_profile_id = $billingProfileId;\n\t\t$billingProfile->user_id = $_SESSION['user_id'];\n\t\t$billingProfile->first_name = $ccDetails['firstName'];\n\t\t$billingProfile->last_name = $ccDetails['lastName'];\n\t\t$billingProfile->payment_provider = self::PAYPAL;\n\t\t$billingProfile->cc_type = \"PayPal\";\n\t\t$billingProfile->cc_last4 = null;\n\t\t$billingProfile->cc_expiration = null;\n\t\t$billingProfile->x_info_id = $xInfoID;\n\t\t$billingProfile->x_pmt_id = $xPmtID;\n\t\t$billingProfile->deleted = false;\n\t\t$billingProfile->country = $ccDetails['country'];\n\t\tif ($country == 'US' && $state = \\Billing\\Tax::getStateFromZip($zip)) {\n\t\t\t$billingProfile->state = $state;\n\t\t}\n\t\t$billingProfile->zip = $ccDetails['zip'];\n\t\t$billingProfile->vat_id = $ccDetails['vat_id'];\n\t\t$billingProfile->email = $ccDetails['email'];\n\t\t$billingProfile->save();\n\n\t\t//Save normalized phone number to the user properties table\n\t\t$user = \\User\\Model\\UserModel::findById($_SESSION['user_id']);\n\t\t$phone = \\Util\\PhoneUtils::normalizeUserPhone($phone, $user->last_country);\n\t\t$user->phone = $phone;\n\t\t$user->save();\n\n\n\t\t$GLOBALS['updated_profile_id'] = $billingProfile->billing_profile_id;\n\t\treturn $billingProfile->billing_profile_id;\n\t}\n\n\tpublic function addBillingProfile($ccDetails)\n\t{\n\t\tglobal $db, $validate;\n\t\textract($ccDetails);\n\n\t\tif ($this->paymentProvider) {\n\t\t\treturn $this->paymentProvider->addBillingProfile();\n\t\t} else if ($this->provider == 'adyen') {\n\t\t\t$provider = new AdyenProvider();\n\t\t\t$provider->createFromPaymentDetails($this->userId, $ccDetails);\n\t\t\t$provider->createRecurring();\n\t\t\t$this->paymentProvider = $provider;\n\t\t\treturn $this->paymentProvider->addBillingProfile();\n\t\t}\n\n\t\t// Check to see if this user already has a CIM CustomerProfile\n\t\t$xInfoID = getProperty(\"user\", $_SESSION['user_id'], \"x_info_id\");\n\n\t\t// If not, create one!\n\t\tif (!$xInfoID) {\n\t\t\tlist($status, $xInfoID) = createCustomerProfile($_SESSION['user_id']);\n\n\t\t\tif ($status != \"SUCCESS\" && $status != \"DUPLICATE\") {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$newProfile = 1;\n\n\t\t}\n\n\t\t// If we created a new profile, set it in user_properties\n\t\tif ($newProfile) {\n\t\t\tsetProperty(\"user\", $_SESSION['user_id'], \"x_info_id\", $xInfoID);\n\t\t}\n\n\n\t\t// Next, create the CustomerPaymentProfile\n\t\tlist($status, $xPmtID) = createCustomerPaymentProfile($xInfoID, $cardNumber, $expirationDate, $firstName, $lastName);\n\t\t$billingProfile = \\Billing\\Model\\BillingUserProfileModel::findByRemoteIDs($_SESSION['user_id'], $xInfoID, $xPmtID);\n\n\t\t// New profile successfully added? INSERT row into billing_user_profile\n\t\tif ($status == \"SUCCESS\" || ($status == \"DUPLICATE\" && !$billingProfile)) {\n\t\t\t$billingProfileId = rand_id('billing_user_profile', 'billing_profile_id');\n\t\t\t$last4 = substr(preg_replace(\"/[^0-9]/\", \"\", $cardNumber), -4, 4);\n\t\t\t$cardType = getCardType($cardNumber);\n\n\t\t\t$billingProfile = new \\Billing\\Model\\BillingUserProfileModel();\n\t\t\t$billingProfile->billing_profile_id = $billingProfileId;\n\t\t\t$billingProfile->payment_provider = self::AUTHORIZE_NET;\n\t\t\t$billingProfile->user_id = $_SESSION['user_id'];\n\t\t\t$billingProfile->cc_type = $cardType;\n\t\t\t$billingProfile->cc_last4 = $last4;\n\t\t\t$billingProfile->cc_expiration = $expirationDate;\n\t\t\t$billingProfile->x_info_id = $xInfoID;\n\t\t\t$billingProfile->x_pmt_id = $xPmtID;\n\t\t\t$billingProfile->deleted = false;\n\t\t\t$billingProfile->save();\n\n\t\t// Profile already exists? Find the appropriate billing_profile_id\n\t\t} else if ($status == \"DUPLICATE\") {\n\t\t\tif (!$billingProfile) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t$billingProfileId = $billingProfile->billing_profile_id;\n\t\t\t$billingProfile->deleted = false;\n\t\t\t$billingProfile->cc_expiration = $expirationDate;\n\t\t\t$billingProfile->modified_date = date(\"Y-m-d H:i:s\");\n\t\t\t$billingProfile->save();\n\n\t\t\t$this->setProfileExpirationDate($billingProfile, $expirationDate);\n\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($billingProfile) {\n\t\t\t$billingProfile->first_name = $firstName;\n\t\t\t$billingProfile->last_name = $lastName;\n\t\t\t$billingProfile->zip = $zip;\n\t\t\t$billingProfile->country = $country;\n\t\t\tif ($country == 'US' && $state = \\Billing\\Tax::getStateFromZip($zip)) {\n\t\t\t\t$billingProfile->state = $state;\n\t\t\t}\n\t\t\t$billingProfile->vat_id = $vat_id;\n\t\t\t$billingProfile->phone_number = $phone;\n\t\t\t$billingProfile->save();\n\t\t}\n\n\t\tupdateName($_SESSION['user_id'], $firstName, $lastName);\n\n\t\t//Save normalized phone number to the user properties table\n\t\t$user = \\User\\Model\\UserModel::findById($_SESSION['user_id']);\n\t\t$phone = \\Util\\PhoneUtils::normalizeUserPhone($phone, $user->last_country);\n\t\t$user->phone = $phone;\n\t\t$user->save();\n\n\n\t\t$GLOBALS['updated_profile_id'] = $billingProfileId;\n\t\treturn $billingProfileId;\n\n\t}\n\n\tpublic function deleteBillingProfile($billingProfileId, $replacementProfileId = '')\n\t{\n\t\tglobal $db, $validate;\n\n//\t\t$db->query(\"UPDATE billing_user_profile SET deleted = 1 WHERE user_id = ? AND billing_profile_id = ?\", $_SESSION['user_id'], $billingProfileId);\n\t\t$this->userId = $this->userId ? $this->userId : $_SESSION['logged_in_user'];\n\t\t$billingProfile = \\Billing\\Model\\BillingUserProfileModel::findByProfileId($this->userId, $billingProfileId);\n\n\t\tif ($billingProfile->payment_provider == 'adyen') {\n\t\t\t$provider = new AdyenProvider();\n\t\t\t$provider->createFromBillingProfile($this->userId, $billingProfileId);\n\t\t\t$provider->disableRecurring();\n\t\t}\n\n\t\t$billingProfile->destroy();\n\n\t\tif ($replacementProfileId > 0) {\n\t\t\t$db->query(\"UPDATE billing_user_service SET billing_profile_id = ? WHERE user_id = ? AND billing_profile_id = ?\", $replacementProfileId, $_SESSION['user_id'], $billingProfileId);\n\t\t} else {\n\t\t\t$db->query(\"UPDATE billing_user_service SET billing_profile_id = null WHERE user_id = ? AND billing_profile_id = ?\", $_SESSION['user_id'], $billingProfileId);\n\t\t}\n\t\t$this->writeMessage(\"REMOVEDPROFILE\", 99, \"\", \"\", \"Removed profile:$billingProfileId\", '', $_SESSION['user_id']);\n\n\t}\n\n\tpublic function setBillingProfile($userServiceID, $ccDetails)\n\t{\n\t\tglobal $db;\n\t\textract($ccDetails);\n\n\t\tif (stripos($ccDetails['billingProfile']['type'], 'PayPal') !== false) {\n\t\t\tif ($billingProfile && $billingProfile['id']) {\n\t\t\t\tif (!$db->query(\"UPDATE billing_user_service SET billing_profile_id = ? WHERE user_service_id = ?\", $billingProfile['id'], $userServiceID)) {\n\t\t\t\t\t$this->internalError = true;\n\t\t\t\t\t$this->errors = \"Failure updating billing_user_service with billing profile.\";\n\t\t\t\t\t$this->writeMessage(\"NOTICE\", 62, 0, \"\", \"Failure updating billing_user_service with billing profile.\", $userServiceID);\n\t\t\t\t}\n\t\t\t\t\t$this->billingProfileId = $billingProfile['id'];\n\t\t\t} else {\n\t\t\t\t// Paypal profile creation is handled in processPaypalPayment or updatePayment\n\t\t\t\t// since it requires a special flow to get to get the billing agreement for future charges\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (!($billingProfile && $billingProfile[\"skipUpdate\"])) {\n\t\t\tif (!$billingProfile) {\n\t\t\t\t$billingProfile = array(\"type\" => \"CIM\");\n\t\t\t\t$billingProfile['id'] = $this->addBillingProfile($ccDetails);\n\t\t\t}\n\n\t\t\tif (!$billingProfile['id']) {\n\t\t\t\t$this->internalError = true;\n\t\t\t\t$this->errors = \"Failure creating billing profile.\";\n\t\t\t\t$this->writeMessage(\"NOTICE\", 61, 0, \"\", \"Failure creating billing profile.\", $userServiceID);\n\t\t\t\t$this->disableAutoRenew($userServiceID);\n\t\t\t} else {\n\t\t\t\tif (!$db->query(\"UPDATE billing_user_service SET billing_profile_id = ? WHERE user_service_id = ?\", $billingProfile['id'], $userServiceID)) {\n\t\t\t\t\t$this->internalError = true;\n\t\t\t\t\t$this->errors = \"Failure updating billing_user_service with billing profile.\";\n\t\t\t\t\t$this->writeMessage(\"NOTICE\", 62, 0, \"\", \"Failure updating billing_user_service with billing profile.\", $userServiceID);\n\t\t\t\t}\n\t\t\t\t$this->billingProfileId = $billingProfile['id'];\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function increaseProfileExpirationDate($profile, $years = 2)\n\t{\n\n\t\t$profile_year = date(\"Y\", strtotime($profile->cc_expiration));\n\t\t$profile_month = date(\"m\", strtotime($profile->cc_expiration));\n\t\t$new_year = $profile_year + $years;\n\t\t$new_exp = $new_year . '-' . $profile_month;\n\t\t$result = $this->setProfileExpirationDate($profile, $new_exp);\n\t\tif ($result) {\n\t\t\t$profile->cc_expiration = $new_exp;\n\t\t\t$profile->save();\n\t\t\t$this->writeMessage(\"INCREASEEXPIRATIONDATE\", 97, 0, \"\", \"Changed expiration date from $profile_year-$profile_month to $new_exp for profile:{$profile->billing_profile_id}\", null, $profile->user_id);\n\t\t\treturn true;\n\t\t} else {\n\t\t\t$this->writeMessage(\"FAILEDINCREASEEXPIRATIONDATE\", 97, 0, \"\", \"Failed changing expiration date from $profile_year-$profile_month to $new_exp for profile:{$profile->billing_profile_id}\", null, $profile->user_id);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic function setProfileExpirationDate($profile, $date)\n\t{\n\t\t$result = updateCustomerPaymentProfile(\n\t\t\t$profile->x_info_id,\n\t\t\t$profile->x_pmt_id,\n\t\t\t'XXXX'.$profile->cc_last4,\n\t\t\t$date,\n\t\t\t$profile->first_name,\n\t\t\t$profile->last_name\n\t\t);\n\t\treturn $result[0] == 'SUCCESS';\n\t}\n\n\n\t/* -------------------------\n\t\tUtility functions\n\t\t=========================\n\t*/\n\n\tpublic function hasService($serviceID, $userID)\n\t{\n\t\tglobal $db, $validate;\n\n\t\t$userID = $userID ? $userID : $_SESSION['user_id'];\n\t\t$services = \\AccessControl\\UpgradeRestrictions::getUserServices($userID);\n\n\t\treturn in_array($serviceID, $services) ? true : false;\n\t\t//return $db->get_one(\"SELECT user_id FROM billing_user_service WHERE user_id = '\".$userID.\"' AND deleted = 0 AND service_id LIKE '\".$validate->db($serviceID).\"%' AND (status = 'active' OR status='overdue')\") ? true : false;\n\n\t}\n\n\tpublic function getServices($userID)\n\t{\n\t\tglobal $db, $validate;\n\n\t\t$userID = $validate->id($userID);\n\n\t\t$serviceArray = array();\n\t\t$query = $db->query(\"SELECT * FROM billing_user_service WHERE user_id = '$userID' AND deleted = 0\");\n\t\t$x = 0;\n\n\t\twhile ($serviceRow = $db->fetch_assoc($query)) {\n\t\t\t$serviceArray[$x]['service'] = $serviceRow;\n\t\t\t$serviceArray[$x]['serviceDescription'] = $db->get_assoc(\"SELECT * FROM weebly_definition.billing_service WHERE service_id = '\".$serviceRow['service_id'].\"'\");\n\t\t\t$serviceArray[$x]['profile'] = $db->get_assoc(\"SELECT * FROM billing_user_profile WHERE billing_profile_id = '\".$serviceRow['billing_profile_id'].\"'\");\n\n\t\t\t$x++;\n\n\t\t}\n\n\t\treturn $serviceArray;\n\n\t}\n\n\tpublic function getProServices($nUserID)\n\t{\n\t\treturn self::findUserServices('pro', $nUserID);\n\t}\n\n\tpublic function getDomainServices($nUserID)\n\t{\n\t\treturn self::findUserServices('domain', $nUserID);\n\t}\n\n\tpublic static function findUserServices($sService, $nUserID)\n\t{\n\t\tglobal $db, $validate;\n\t\t$sService = $validate->db($sService);\n\t\t$nUserID = $validate->id($nUserID);\n\t\t$sQry = \"\n\t\t\tSELECT bus.user_service_id, bus.service_id, bus.start_date, bus.status, bus.billing_system, bus.billing_profile_id, bs.description,\n\t\t\t\t\tbup.cc_type, bup.cc_last4, bus.x_sub_id, bs.amount, bs.recurring_period\n\t\t\tFROM billing_user_service bus INNER JOIN\n\t\t\t\tweebly_definition.billing_service bs ON bus.service_id = bs.service_id LEFT OUTER JOIN\n\t\t\t\tbilling_user_profile bup ON bus.billing_profile_id = bup.billing_profile_id\n\t\t\tWHERE\n\t\t\t\tbus.user_id = ?\n\t\t\t\tAND bus.service_id LIKE '%$sService%'\n\t\t\t\tAND bus.deleted = 0\n\t\t\";\n\t\t$aryFinal = array();\n\t\t$Result = $db->query($sQry, $nUserID);\n\t\twhile ($aryRow = $db->fetch_assoc($Result)) {\n\t\t\t$aryFinal[] = $aryRow;\n\t\t}\n\t\treturn $aryFinal;\n\t}\n\n\tpublic function getServiceQuantity($userServiceId)\n\t{\n\t\tglobal $db;\n\n\t\treturn $db->get_one(\"SELECT quantity FROM billing_user_service WHERE user_service_id = ?\", $userServiceId);\n\n\t}\n\n\tpublic function setServiceQuantity($userServiceId, $quantity)\n\t{\n\t\t\tglobal $db;\n\n\t\tif (preg_match(\"/^\\+/\", $quantity)) {\n\t\t\t$current  = $this->getServiceQuantity($userServiceId);\n\t\t\t$quantity = $current + preg_replace(\"/[^0-9]/\", \"\", $quantity);\n\t\t} else if (preg_match(\"/^\\-/\", $quantity)) {\n\t\t\t$current  = $this->getServiceQuantity($userServiceId);\n\t\t\t$quantity = $current - preg_replace(\"/[^0-9]/\", \"\", $quantity);\n\t\t}\n\n\t\treturn $db->query(\"UPDATE billing_user_service SET quantity = ? WHERE user_service_id = ?\", $quantity, $userServiceId);\n\t}\n\n\tpublic function getServiceRoot($serviceID)\n\t{\n\n\t\tforeach (Billing::$serviceRoots as $serviceRoot) {\n\t\t\tif (stristr($serviceID, $serviceRoot)) {\n\t\t\t\treturn $serviceRoot;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic function getNextPaymentDate($userServiceID)\n\t{\n\t\tglobal $db;\n\n\t\t$billingSystem = $db->get_one(\"SELECT billing_system FROM billing_user_service WHERE user_service_id = ?\", $userServiceID);\n\n\t\tif ($billingSystem == \"arb\") {\n\t\t\treturn ARBSubscription::getNextPaymentDate($userServiceID);\n\t\t} else if ($billingSystem == \"weebly-cim\") {\n\t\t\treturn WeeblySubscription::getNextPaymentDate($userServiceID);\n\t\t}\n\n\t}\n\n\tpublic function getNextRecurrenceDate($userServiceID)\n\t{\n\t\tglobal $db;\n\n\t\t$billingSystem = $db->get_one(\"SELECT billing_system FROM billing_user_service WHERE user_service_id = ?\", $userServiceID);\n\n\t\tif ($billingSystem == \"arb\") {\n\t\t\treturn ARBSubscription::getNextRecurrenceDate($userServiceID);\n\t\t} else if ($billingSystem == \"weebly-cim\") {\n\t\t\treturn WeeblySubscription::getNextRecurrenceDate($userServiceID);\n\t\t}\n\n\t}\n\n\tpublic function prettyDate($uglyDate, $format = \"expanded\")\n\t{\n\t\t// Temporary, later we'll choose based on the user locale\n\t\tif ($format == \"datetime\") {\n\t\t\t$format = \"us-datetime\";\n\t\t} else if ($format == \"date\") {\n\t\t\t$format = \"us-date\";\n\t\t}\n\n\t\t// Account for UNIX time\n\t\t$uglyDate = preg_match(\"/^[0-9]{10}$/\", $uglyDate) ? \"@\".$uglyDate : $uglyDate;\n\n\t\t$date = new DateTime($uglyDate);\n\n\t\tif ($format == \"expanded\") {\n\t\t\treturn $date->format('F jS, Y');\n\t\t} else if ($format == \"us-date\") {\n\t\t\treturn $date->format('m/d/Y');\n\t\t} else if ($format == \"us-datetime\") {\n\t\t\treturn $date->format('M d, Y h:ia');\n\t\t} else if ($format == \"eu-date\") {\n\t\t\treturn $date->format('d/m/Y');\n\t\t} else if ($format == \"eu-datetime\") {\n\t\t\treturn $date->format('d/m/Y H:i');\n\t\t} else if ($format == \"month-and-day\") {\n\t\t\treturn $date->format('F jS');\n\t\t}\n\n\t}\n\n\tpublic static function getLastBillDate($dStartDate, $nRecurringMonths)\n\t{\n\t\tif ($nRecurringMonths > 0) {\n\t\t\t$nNewDate = strtotime($dStartDate);\n\t\t\twhile ($nNewDate < time()) {\n\t\t\t\t$nLastDate = $nNewDate;\n\t\t\t\t$nNewDate = strtotime('+'.$nRecurringMonths.' months', $nNewDate);\n\t\t\t}\n\t\t\treturn $nLastDate;\n\t\t}\n\t}\n\n\tpublic function hasTooManyFailedAttempts($nUserServiceID, $nUserID = null)\n\t{\n\t\tglobal $db;\n\n\t\t$nUserID = $nUserID ? $nUserID : $db->user_id;\n\n\t\t$nMaxDailyFailedAttempts = 50;\n\n\t\t$sQry = \"\n\t\t\tSELECT count(billing_message_id)\n\t\t\tFROM billing_messages\n\t\t\tWHERE user_id = ?\n\t\t\t\tAND type = 'ERROR'\n\t\t\t\tAND date  > (NOW() - INTERVAL 24 HOUR)\n\t\t\";\n\t\t$nCount = $db->get_one($sQry, $nUserID) + 0;\n\t\tif ($nCount > $nMaxDailyFailedAttempts) {\n\t\t\t$this->writeMessage(\"NOTICE\", 70, 0, \"\", \"Too many failed attempts ($nCount)\", $nUserServiceID);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic function setVoucher($voucher)\n\t{\n\t\t$this->voucher = $voucher;\n\t\treturn $this->voucher;\n\t}\n\n\n\t/* -------------------------\n\t\tLogging functions\n\t\t=========================\n\t*/\n\n\tpublic function logChargeAttempt($status, $userServiceID, $amount, $currency, $responseCode, $responseText, $ccDetails, $ipAddr, $xID, $serviceID = false, $serviceItemID = false, $avsResponse = \"\", $cvv2Response = \"\", $fraudScore = \"\", $fraudExplanation = \"\", $user_id = \"\", $transactionType = \"PAYMENT\", $refXID = \"\", $specificPaymentType = null)\n\t{\n\t\tglobal $db;\n\t\textract($ccDetails);\n\t\tif ($cardNumber) {\n\t\t\t$lastFour = substr($cardNumber, -4, 4);\n\t\t\tif (empty($cardType)) {\n\t\t\t\t$cardType = getCardType($cardNumber);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!empty($last4)) {\n\t\t\t\t//TODO: need to cleanup ccDetails reliance for various scenarios and why cardType=cardType.\n\t\t\t\t$lastFour = $last4;\n\t\t\t}\n\t\t\t$cardType = $cardType;\n\t\t}\n\n\t\tif (!empty($specificPaymentType)) { //card type override, mostly used for paypal transaction\n\t\t\t$cardType = $specificPaymentType;\n\t\t}\n\n\t\tif (!$serviceID) {\n\t\t\t$serviceID = $db->get_one(\"SELECT service_id FROM billing_user_service WHERE user_service_id = ?\", $userServiceID);\n\t\t}\n\n\t\tif (empty($user_id)) {\n\t\t\t$user_id = $db->user_id;\n\t\t}\n\n\t\t$id = rand_id('billing_charge_attempt', 'charge_attempt_id');\n\t\t$res = $db->query(\n\t\t\t\"INSERT INTO billing_charge_attempt (charge_attempt_id, user_id, status, transaction_type, user_service_id, currency, amount, response_code, response_text, avs_response, cvv2_response, fraud_score, fraud_explanation, payment_provider, cc_type, cc_last4, cc_expiration, first_name, last_name, zip, country, vat_id, ip_addr, x_id, ref_x_id, service_id, service_item_id, date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)\",\n\t\t\t$id,\n\t\t\t$user_id,\n\t\t\t$status,\n\t\t\t$transactionType,\n\t\t\t$userServiceID,\n\t\t\t$currency,\n\t\t\t$amount,\n\t\t\t$responseCode,\n\t\t\t$responseText,\n\t\t\t$avsResponse,\n\t\t\t$cvv2Response,\n\t\t\t$fraudScore,\n\t\t\t$fraudExplanation,\n\t\t\t$paymentProvider,\n\t\t\t$cardType,\n\t\t\t$lastFour,\n\t\t\t$expirationDate,\n\t\t\t$firstName,\n\t\t\t$lastName,\n\t\t\t$zip,\n\t\t\t$country,\n\t\t\t$vat_id ?: '',\n\t\t\t$ipAddr,\n\t\t\t$xID,\n\t\t\t$refXID,\n\t\t\t$serviceID,\n\t\t\t$serviceItemID\n\t\t);\n\t\t$this->last_charge_attempt_id = $id;\n\n\t\t//Log this message with revenue explicitly to the Rabbit event channel.\n\t\tif ($status == 'SUCCESS') {\n\t\t\t\\Util\\EventSender::sendEvent($db->user_id, 'user', 'payment', array('revenue' => ($amount * 100), 'service_id' => $serviceID));\n\t\t}\n\t}\n\n\tpublic function logChargeAttemptItem($type, $id, $amount, $user_id)\n\t{\n\t\tglobal $db;\n\n\t\tif ($this->last_charge_attempt_id) {\n\t\t\t$attempt_item_id = rand_id('billing_charge_attempt_item', 'charge_attempt_item_id');\n\t\t\t$db->query(\n\t\t\t\t\"INSERT INTO billing_charge_attempt_item (charge_attempt_item_id, charge_attempt_id, user_id, item_type, item_id, amount) VALUES (?, ?, ?, ?, ?, ?)\",\n\t\t\t\t$attempt_item_id,\n\t\t\t\t$this->last_charge_attempt_id,\n\t\t\t\t$user_id,\n\t\t\t\t$type,\n\t\t\t\t$id,\n\t\t\t\t$amount\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic function writeMessage($type, $subtype, $amount, $currency, $description, $userServiceID, $userId, $transactionID, $serviceID, $admin_id = null)\n\t{\n\t\tglobal $validate;\n\n\t\t$userId = $userId ? $userId : $_SESSION['user_id'];\n\t\t$billing_message_id = rand_id('billing_messages', 'billing_message_id');\n\n\t\t$db = $userId ? \\Data\\Shard\\ShardDB::getShardDB($userId) : $GLOBALS['db'];\n\n\t\t$db->query(\"INSERT INTO billing_messages (billing_message_id, user_id, type, subtype, amount, currency, description, user_service_id, x_id, service_id, date) VALUES ('\".$billing_message_id.\"', '\".$userId.\"', '\".$validate->db($type).\"', '\".$validate->db($subtype).\"', '\".$validate->db($amount).\"', '\".$validate->db($currency).\"', '\".$validate->db($description).\"', '\".$validate->db($userServiceID).\"', '\".$validate->db($transactionID).\"', '\".$validate->db($serviceID).\"', CURRENT_TIMESTAMP)\");\n\n\t\t// If this session is being run by a Weebly Admin/Support team member, we log the transaction and associte it with this Billing Message. We can\n\t\t// also explicitly provide an admin id to use, in the case where we call through to Billing code directly from the Admin tool.\n\n\t\t// Note: For testing, this code is going live BEFORE the admin tool, with a false admin_id randomized, allowing us to gather real transaction data\n\t\t// as if it were coming from an Admin.  We need this data to build and test reporting functionality.\n\t\ttry {\n\t\t\t$admin = \\Admin\\Controller\\AdminTransactionController::getInstance()->getAdminId();\n\n\t\t\t// If we don't already have an Admin ID stored, check if we were provided one directly in this method call.  If so, set it\n\t\t\t// and use it.\n\t\t\tif (!$admin && $admin_id) {\n\t\t\t\t\\Admin\\Controller\\AdminTransactionController::getInstance()->setAdminId($admin_id);\n\t\t\t\t$admin = $admin_id;\n\t\t\t}\n\n\t\t\t// If an admin has logged in to this account in the last 10 minutes, still credit\n\t\t\t// the admin with the transaction. Some customers aren't comfortable giving\n\t\t\t// their credit card info over the phone, but the admin may stay on the phone\n\t\t\t// with them while they complete the transaction.\n\t\t\tif (!$admin && $userId) {\n\t\t\t\t$recentAdminLoginRequest = new \\Data\\Request();\n\n\t\t\t\t$recentAdminLoginRequest->Filter = array();\n\t\t\t\t$recentAdminLoginRequest->Filter[] = new \\Data\\Filter('user_id', $userId);\n\t\t\t\t$recentAdminLoginRequest->Filter[] = new \\Data\\Filter('log_type', 'login');\n\t\t\t\t//only admin users should be credited with the transaction. Reseller admin should not count\n\t\t\t\t$recentAdminLoginRequest->Filter[] = new \\Data\\Filter('admin_type', \\Admin\\Model\\AdminLogActionModel::ADMIN_USER_TYPE);\n\n\t\t\t\t$recentAdminLoginRequest->Sort[] = new \\Data\\Sort('created_date', 'DESC');\n\n\t\t\t\t$recentAdminLogin = \\Admin\\Model\\AdminLogActionModel::findOne($recentAdminLoginRequest);\n\t\t\t\tif ($recentAdminLogin && $recentAdminLogin->created_date >= strtotime('-30 minutes')) {\n\t\t\t\t\t\\Admin\\Controller\\AdminTransactionController::getInstance()->setAdminId($recentAdminLogin->admin_member_id);\n\t\t\t\t\t$admin = $recentAdminLogin->admin_member_id;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If, for some reason, we don't have a User ID at this point, use the one that was provided\n\t\t\t// when we called writeMessage (assuming we have one)\n\t\t\tif (!\\Admin\\Controller\\AdminTransactionController::getInstance()->getUserId() && $userId) {\n\t\t\t\t\\Admin\\Controller\\AdminTransactionController::getInstance()->setUserId($userId);\n\t\t\t}\n\n\t\t\tif ($admin) {\n\t\t\t\t\\Admin\\Controller\\AdminTransactionController::getInstance()->logMessage($billing_message_id, array(\n\t\t\t\t\t'transaction_id' => $transactionID,\n\t\t\t\t\t'user_service_id' => $userServiceID,\n\t\t\t\t\t'service_id' => $serviceID,\n\t\t\t\t\t'amount' => $amount,\n\t\t\t\t\t'type' => $type\n\t\t\t\t));\n\t\t\t}\n\t\t} catch (\\Exception $e) {\n\t\t\t// Do nothing.  Catching exceptions from this code so that even in worst case scenario, it should not affect Weebly performance\n\t\t}\n\n\t\treturn $billing_message_id;\n\t}\n\n\t//Revenue Recognition\n\tfunction logRevenueRecognition($user_id, $user_service_id, $start_date = null, $billingProfileId, $ccDetails, $obsoleteUserServiceID, $freeChargeAttemptId, $currency = 'USD')\n\t{\n\t\tif (empty($start_date)) {\n\t\t\t$start_date =  new \\DateTime();\n\t\t}\n\t\t$order_attr = array();\n\t\t$order_attr['currency'] = $currency;\n\t\t$order_attr['start_date'] = $start_date;\n\t\t$order_attr['user_id'] = $user_id;\n\t\t$order_attr['subtotal'] = $this->subtotalAmount;\n\t\t$order_attr['tax_total'] = $this->taxAmount;\n\t\t$order_attr['credit_amount'] = $this->creditAmount;\n\t\t$order_attr['obsolete_user_service_id'] = $obsoleteUserServiceID;\n\t\tif ($this->taxAmount > 0) {\n\t\t\t$order_attr['tax_details'] = \\Billing\\Tax::getTaxReportingInformation($user_id, $ccDetails, $this->subtotalAmount);\n\t\t}\n\t\t$user_service = $user_service_id;\n\n\t\t$transaction_attr = array();\n\t\t$transaction_attr['charge_attempt_id'] = $this->last_charge_attempt_id;\n\t\t$transaction_attr['gateway'] = $this->provider;\n\n\t\tif (!empty($freeChargeAttemptId) && empty($transaction_attr['charge_attempt_id'])) {\n\t\t\t$transaction_attr['charge_attempt_id'] = $freeChargeAttemptId;\n\t\t}\n\t\tif (!empty($billingProfileId)) {\n\t\t\t$transaction_attr['billing_profile_id'] = $billingProfileId;\n\t\t}\n\n\t\t$client_attr = ReportingController::buildClientAttributes($_SERVER, $_SESSION);\n\n\t\t$order_attr = ReportingOrderController::RecordOrder($order_attr, $transaction_attr, $user_service, $this->couponCode, $this->voucher, $client_attr);\n\n\t\treturn $order_attr['order_id'];\n\t}\n\n\n\t/**\n\t * Given a service and a Billing Message ID, generates the appropriate transaction history to give the agent credit for the\n\t * Trial->Payment rollover\n\t *\n\t * @param string $service a User service ID for a trial service\n\t * @param string $billing_message_id The billing message ID for the rollover payment\n\t */\n\tpublic function processFreeTrialCommission($service, $billing_message_id)\n\t{\n\t\t$admin_transaction_log = \\Admin\\Model\\AdminTransactionModel::findFreeTrial($service->user_service_id);\n\n\t\tif ($admin_transaction_log) {\n\t\t\t$billing_service = $service->findBillingService();\n\n\t\t\t$new_admin_transaction_log = $admin_transaction_log->copy();\n\t\t\t$new_admin_transaction_log->billing_message_id = $billing_message_id;\n\t\t\t$new_admin_transaction_log->amount = $billing_service->amount;\n\t\t\t$new_admin_transaction_log->service_parr2 = $billing_service->parr2;\n\t\t\t$new_admin_transaction_log->save();\n\t\t}\n\t}\n}\n\nfunction hasService($serviceID, $userID)\n{\n\t$billing = new Billing();\n\treturn $billing->hasService($serviceID, $userID);\n}\n","markerStore":{"nextMarkerId":85,"markersById":{"0":{"range":{"start":{"row":993,"column":16},"end":{"row":993,"column":16}},"properties":{"type":"selection","editorId":614,"autoscroll":false,"includeNonWordCharacters":false,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"84":{"range":{"start":{"row":796,"column":0},"end":{"row":797,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"never","maintainHistory":false}},"version":2},"history":{"version":3,"nextCheckpointId":30,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/weebly/html/weebly/incl/billing.php","digestWhenLastPersisted":"1fbba4b2b863c56a116f47f584e1a3e26b58d14f","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"$vendor-logo-sprite: sprite-map('purchase-screen/vendor-logos/*.png');\n\n#main-form {\n\twidth: 842px;\n\tmargin: auto;\n}\n\n#plan-chooser {\n\t.compare {\n\t\tborder: none;\n\t\tfont-size: 1.2em;\n\t\tfont-weight: 400;\n\t\tcolor: $secondary-color;\n\t\tline-height: 1.5;\n\t\tfloat: none;\n\t\tdisplay: block;\n\t\tmargin: -10px 0 10px;\n\t}\n\n\t.heading {\n\t\t&.selected {\n\t\t\t&+ .content {\n\t\t\t\tborder-color: $border-color $secondary-color $secondary-color $secondary-color;\n\t\t\t\tborder-bottom-width: 1px;\n\t\t\t}\n\n\t\t\t.inner {\n\t\t\t\tborder-color: $secondary-color $secondary-color $border-color $secondary-color;\n\t\t\t\tbackground-color: #f2f9ff;\n\n\t\t\t\t.name {\n\t\t\t\t\ttext-shadow: none;\n\n\t\t\t\t\t&::after {\n\t\t\t\t\t\topacity: 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.inner {\n\t\t\tbackground-color: #f0f1f2;\n\t\t\tbackground-image: none;\n\t\t\tbox-shadow: none;\n\t\t\tborder-radius: 0;\n\t\t\tborder-color: $border-color;\n\t\t\t@include transition(border-color 0.375s ease 0.25s);\n\n\t\t\t.price {\n\t\t\t\tcolor: $body-text-color;\n\t\t\t\tfont-size: 1.05em;\n\t\t\t\tfont-weight: 600;\n\t\t\t\tline-height: 3.2;\n\t\t\t\tmargin-right: 15px;\n\t\t\t}\n\n\t\t\t.name {\n\t\t\t\tfont-weight: 600;\n\t\t\t\tcolor: $body-text-color;\n\t\t\t\tbackground: none;\n\t\t\t\tline-height: 2.5;\n\t\t\t\tpadding-left: 45px;\n\n\t\t\t\t&::before {\n\t\t\t\t\t@include radio-outer;\n\t\t\t\t\tleft: 17px;\n\t\t\t\t\ttop: 12px;\n\t\t\t\t}\n\n\t\t\t\t&::after {\n\t\t\t\t\t@include radio-inner;\n\t\t\t\t\tleft: 21px;\n\t\t\t\t\ttop: 16px;\n\t\t\t\t\topacity: 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t.content {\n\t\tbackground-color: #fff;\n\t\tborder-color: $border-color;\n\t\t@include transition(border-color 0.25s ease 0s);\n\n\t\t&.last-visible-child {\n\t\t\tborder-radius: 0px;\n\t\t}\n\n\t\tp {\n\t\t\tpadding: 11px 20px 7px;\n\t\t\tfont-size: 1.14em;\n\t\t\tline-height: 1.37;\n\t\t\tcolor: $body-text-color;\n\t\t}\n\n\t\t.feature-highlight {\n\t\t\tmin-height: initial;\n\t\t\tpadding: 10px 0 8px 18px;\n\n\t\t\t.checkmark,\n\t\t\t.feature-no,\n\t\t\t.message {\n\t\t\t\tfloat: none;\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tposition: relative;\n\t\t\t\tvertical-align: top;\n\t\t\t}\n\n\t\t\t.checkmark,\n\t\t\t.feature-no {\n\t\t\t\tfont-size: 1.2em;\n\t\t\t\tmargin-top: 2px;\n\t\t\t}\n\n\t\t\t.message {\n\t\t\t\tfont-size: $standard-font-size;\n\t\t\t\tpadding: 3px 0 0px 5px;\n\t\t\t\twidth: 300px;\n\t\t\t}\n\t\t}\n\n\t\t.extended-content {\n\t\t\t.price {\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\n.length-chooser {\n\tpadding: 0 0 10px;\n\tmargin: 4px 20px 0;\n\tborder-color: $border-color;\n\n\th3 {\n\t\tfont-size: 1.08em;\n\t\tfont-weight: 600;\n\t\tmargin: 16px 0 0;\n\t}\n}\n\n.radio-list {\n\tli {\n\t\tborder: none;\n\t\tbackground-color: transparent;\n\t\tpadding-left: 27px;\n\t\tposition: relative;\n\t\tmargin: 0;\n\n\t\t&.selected {\n\t\t\t&::after {\n\t\t\t\topacity: 1;\n\t\t\t}\n\n\t\t\t.price,\n\t\t\t.duration-text,\n\t\t\t.description-text {\n\t\t\t\tfont-weight: 600;\n\t\t\t}\n\t\t}\n\n\t\t&::before {\n\t\t\t@include radio-outer;\n\t\t\tleft: 0px;\n\t\t\ttop: 5px;\n\t\t}\n\n\t\t&::after {\n\t\t\t@include radio-inner;\n\t\t\tleft: 4px;\n\t\t\ttop: 9px;\n\t\t\topacity: 0;\n\t\t}\n\n\t\tinput[type='radio'] {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.price,\n\t\t.duration-text,\n\t\t.description-text {\n\t\t\tfont-size: $standard-font-size;\n\t\t\tfont-weight: 400;\n\t\t}\n\n\t\t.savings {\n\t\t\tfont-size: 1em;\n\t\t\tfont-weight: 400;\n\t\t}\n\t}\n}\n\n.extension-area {\n\tbackground-color: #fff;\n\tborder-color: $border-color;\n\tborder-radius: 0;\n\tbox-shadow: none;\n\tpadding: 0 20px 3px;\n\n\t.length-chooser {\n\t\tmargin: 0 0 16px 0;\n\t\tborder-bottom: 1px solid $border-color;\n\t\tpadding-bottom: 9px;\n\n\t\th3 {\n\t\t\tmargin-top: 13px;\n\t\t}\n\n\t\t.expiration {\n\t\t\tmargin: 7px 0;\n\t\t\tfont-size: 15px;\n\t\t}\n\t\t.price {\n\t\t\tmargin-top: 0;\n\t\t\tmargin-right: 0;\n\t\t}\n\t}\n\n\t&> .expiration {\n\t\tfont-size: $standard-font-size;\n\n\t\t&:last-of-type {\n\t\t\tmargin-bottom: 12px;\n\t\t}\n\t}\n}\n\n#domain-content {\n\tdiv {\n\t\theight: auto;\n\t\tline-height: normal;\n\t}\n\n\t#domain-title {\n\t\tborder: 1px solid #ced0d2;\n\t\tcolor: #2990ea;\n\t\tfont-weight: 400;\n\t\tpadding: 13px 20px 12px;\n\t\tmargin-top: 5px;\n\t\tmargin-bottom: 15px;\n\t\tbackground: none;\n\t\tposition: relative;\n\t\tbackground-color: #fff;\n\n\t\t&::before {\n\t\t\tcontent: '';\n\t\t\tposition: absolute;\n\t\t\tbottom: -10px;\n\t\t\tleft: 180px;\n\t\t\tborder-width: 10px 10px 0;\n\t\t\tborder-style: solid;\n\t\t\tborder-color: #ced0d2 transparent;\n\t\t\tdisplay: block;\n\t\t\twidth: 0;\n\t\t}\n\n\t\t&::after {\n\t\t\tcontent: '';\n\t\t\tposition: absolute;\n\t\t\tbottom: -9px;\n\t\t\tleft: 181px;\n\t\t\tborder-width: 9px 9px 0;\n\t\t\tborder-style: solid;\n\t\t\tborder-color: white transparent;\n\t\t\tdisplay: block;\n\t\t\twidth: 0;\n\t\t}\n\t}\n\n\t#domain-container {\n\t\tborder: 1px solid #ced0d2;\n\t\tbox-shadow: none;\n\t\tborder-radius: 0;\n\t\tbackground-color: #fff;\n\n\t\t.feature-list {\n\t\t\tpadding: 0 20px 2px;\n\n\t\t\tli {\n\t\t\t\tbackground: none;\n\t\t\t\tfont-weight: 400;\n\t\t\t\tfont-size: $standard-font-size;\n\t\t\t\tmargin: 0.85em 0;\n\t\t\t\tpadding-left: 15px;\n\t\t\t\tposition: relative;\n\n\t\t\t\t&::before {\n\t\t\t\t\tcolor: #32a531;\n\t\t\t\t\ttext-indent: -1.5em;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t.popover {\n\t\t\t\ttop: auto;\n\t\t\t\tbottom: 0;\n\t\t\t}\n\t\t}\n\n\t\t.length-chooser {\n\t\t\tpadding: 2px 0 14px;\n\n\t\t\t.price {\n\t\t\t\tmargin: 7px 0 0 0;\n\t\t\t}\n\t\t}\n\n\t\t.whois-chooser {\n\t\t\tpadding-top: 15px;\n\n\t\t\t.popover::before {\n\t\t\t\ttop: 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t.icon {\n\t\tcolor: #32a531;\n\t\tfloat: right;\n\t\tmargin-top: -24px;\n\t\tmargin-right: -8px;\n\t\tfont-size: 1.4em;\n\t}\n}\n\n.stock-media {\n\tp {\n\t\tfont-size: 1.03em;\n\t\tline-height: 1.3;\n\t}\n\n\t.preview {\n\t\tposition: relative;\n\t}\n}\n\n#payment-area {\n\t.method-tabs {\n\t\t&.site {\n\t\t\tmargin-top: 25px;\n\t\t}\n\t}\n\n\t.tab-content, .payment-footer {\n\t\tborder-radius: 0;\n\t\tborder-color: $border-color;\n\t\tbackground-color: #fff;\n\t}\n\n\t.back-to-contact-form {\n\t\tmargin-right: 20px;\n\t\tcolor: $secondary-color;\n\t\tdisplay: none;\n\t\tfont-size: $standard-font-size;\n\t\tfont-weight: 500;\n\t}\n\n\t.tab-content {\n\t\tborder-bottom: none;\n\n\t\tinput[type=text] {\n\t\t\tbox-shadow: none;\n\t\t\tborder-radius: 0;\n\t\t\tborder-color: $border-color;\n\t\t\theight: 28px;\n\t\t\tfont-size: $standard-font-size;\n\t\t\tpadding: 5px 0px 5px 10px;\n\t\t\tbox-sizing: content-box;\n\t\t}\n\n\t\t.new {\n\t\t\tmargin: 0;\n\t\t\tpadding: 16px 0 1px 16px;\n\n\t\t\t.paypal-fields {\n\t\t\t\tfont-size: $standard-font-size;\n\n\t\t\t\t.country .dropdown-toggle {\n\t\t\t\t\twidth: 200px;\n\t\t\t\t\theight: 42px;\n\n\t\t\t\t\t.inner {\n\t\t\t\t\t\tline-height: 2.6;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.existing {\n\t\t\tmargin: 0;\n\t\t\tpadding-bottom: 20px;\n\n\t\t\t.radio-list {\n\t\t\t\tmargin-bottom: 5px;\n\t\t\t}\n\n\t\t\t.cc-logo {\n\t\t\t\tmargin: 0 5px 0 0;\n\t\t\t}\n\n\t\t\t.country .dropdown-toggle {\n\t\t\t\twidth: 200px;\n\t\t\t\theight: 42px;\n\n\t\t\t}\n\t\t\t.dropdown-menu li {\n\t\t\t\tpadding: 0;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\t.text {\n\t\t\t\tcolor: $body-text-color;\n\t\t\t\tfont-size: $standard-font-size;\n\n\t\t\t\t.company {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.type-chooser {\n\t\t\tmargin: 0 0 15px 0;\n\t\t}\n\n\t\t.radio-list {\n\t\t\tli {\n\t\t\t\t&::before {\n\t\t\t\t\ttop: 12px;\n\t\t\t\t}\n\n\t\t\t\t&::after {\n\t\t\t\t\ttop: 16px;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t.radio-wrap {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t}\n\n\t\t.cc, li.paypal {\n\t\t\twidth: auto;\n\t\t}\n\t\t.type-chooser.compact {\n\t\t\tli.paypal, li.sepa {\n\t\t\t\tmargin-left: 30px;\n\t\t\t}\n\t\t}\n\n\t\tli.paypal {\n\t\t\t\tmargin-left: 40px;\n\t\t\t}\n\n\t\tli.sepa .cc-logo{\n\t\t\twidth: 60px;\n\t\t}\n\n\t\t.cc-fields {\n\t\t\t.field {\n\t\t\t\t&.zip-code input {\n\t\t\t\t\twidth: 90px;\n\t\t\t\t}\n\n\t\t\t\t&.phone-number {\n\t\t\t\t\tposition: relative;\n\n\t\t\t\t\tinput {\n\t\t\t\t\t\twidth: 267px\n\t\t\t\t\t}\n\n\t\t\t\t\t.required {\n\t\t\t\t\t\twidth: 223px;\n\t\t\t\t\t\tpadding-left: 53px;\n\t\t\t\t\t}\n\n\t\t\t\t\t.calling-code {\n\t\t\t\t\t\tbackground-color: #f1f2f3;\n\t\t\t\t\t\tpadding: 10px 5px 9px;\n\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\tborder: none;\n\t\t\t\t\t\twidth: 35px;\n\t\t\t\t\t\ttop: 25px;\n\t\t\t\t\t\tleft: 2px;\n\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\tfont-weight: 600;\n\t\t\t\t\t\tfont-size: 1em;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t.month + .dropdown-com {\n\t\t\t\t\twidth: 95px;\n\t\t\t\t}\n\n\t\t\t\t.year + .dropdown-com {\n\t\t\t\t\twidth: 90px;\n\t\t\t\t\tmargin-left: 5px;\n\t\t\t\t}\n\n\t\t\t\t&.iban input {\n\t\t\t\t\twidth: 175px;\n\t\t\t\t}\n\n\t\t\t\t&.country .dropdown-com {\n\t\t\t\t\twidth: 192px;\n\t\t\t\t\tmargin-left: 2px;\n\t\t\t\t}\n\n\t\t\t\t.dropdown-com {\n\t\t\t\t\tdisplay: inline-block;\n\n\t\t\t\t}\n\n\t\t\t\t.dropdown-toggle {\n\t\t\t\t\theight: 40px;\n\t\t\t\t\tpadding-left: 10px;\n\n\t\t\t\t\t.inner {\n\t\t\t\t\t\tcolor: $body-text-color;\n\t\t\t\t\t\tline-height: 2.6;\n\t\t\t\t\t\tfont-size: $standard-font-size;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t&.bday input {\n\t\t\t\t\twidth: 174px;\n\t\t\t\t}\n\n\t\t\t\tlabel {\n\t\t\t\t\tfont-size: $standard-font-size;\n\t\t\t\t\tfont-weight: 600;\n\t\t\t\t\tcolor: #4d5357;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.contact-info {\n\t\t\tmargin-bottom: 0;\n\t\t\tmargin-left: 16px;\n\t\t\tpadding-bottom: 10px;\n\n\t\t\t.selectbox-content {\n\t\t\t\twhite-space: normal;\n\t\t\t}\n\n\t\t\t.email,\n\t\t\t.street,\n\t\t\t.city {\n\t\t\t\tinput {\n\t\t\t\t\twidth: 386px;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t.state {\n\t\t\t\t.dropdown-com {\n\t\t\t\t\twidth: 186px;\n\t\t\t\t}\n\n\t\t\t\tinput {\n\t\t\t\t\twidth: 174px;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t.extra-attribute {\n\t\t\t\t.dropdown-com {\n\t\t\t\t\twidth: 398px;\n\t\t\t\t}\n\n\t\t\t\t&.if-fr {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.before-total-area {\n\t\t\tborder: none;\n\n\t\t\t.w-icon-question {\n\t\t\t\tposition: relative;\n\n\t\t\t\t&::before {\n\t\t\t\t\tfont-size: 1.6em;\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\ttop: -7px;\n\t\t\t\t\tleft: 3px;\n\t\t\t\t\tcolor: #9ba0a3;\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t#coupon-apply-button {\n\t\t\t\tborder: 2px solid #d5d6d7;\n\t\t\t\tbackground: #fff;\n\t\t\t\tcolor: $body-text-color;\n\t\t\t\tfont-weight: 400;\n\t\t\t\tfont-size: $standard-font-size;\n\t\t\t\theight: 40px;\n\t\t\t\ttext-shadow: none;\n\t\t\t\tpadding: 6px 20px;\n\t\t\t\tborder-radius: 0;\n\t\t\t\t@include transition(border-color 0.25s ease 0s);\n\n\t\t\t\t&:hover {\n\t\t\t\t\tborder-color: $secondary-color;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#total-breakdown {\n\t\tborder: none;\n\t\tfont-size: $standard-font-size;\n\t}\n\n\t.payment-footer {\n\t\t.agree {\n\t\t\tdisplay: none;\n\t\t}\n\n\t\t.contact-form-footer {\n\t\t\ttext-align: center;\n\t\t\tmargin: 25px 0 0;\n\t\t\tcolor: #b7bbbd;\n\t\t\tdisplay: none;\n\t\t}\n\n\t\tbutton {\n\t\t\tbackground: $secondary-color;\n\t\t\tbox-shadow: none;\n\t\t\ttext-shadow: none;\n\t\t\theight: 45px;\n\t\t\tborder-radius: 23px;\n\t\t\tpadding: 5px 40px;\n\t\t\ttext-transform: none;\n\t\t\tborder: none;\n\t\t}\n\t}\n}\n\n.cc-logo {\n\t&.visa {\n\t\tbackground: sprite($vendor-logo-sprite, 'visa');\n\t}\n\n\t&.mastercard {\n\t\tbackground: sprite($vendor-logo-sprite, 'mc');\n\t}\n\n\t&.amex {\n\t\tbackground: sprite($vendor-logo-sprite, 'amex');\n\t}\n\n\t&.discover {\n\t\tbackground: sprite($vendor-logo-sprite, 'discover');\n\t}\n\n\t&.paypal {\n\t\tbackground: sprite($vendor-logo-sprite, 'paypal');\n\t}\n\n\t&.sepa {\n\t\tbackground: sprite($vendor-logo-sprite, 'sepa');\n\t}\n}\n\n#bottom-area {\n\tmargin-top: 30px;\n\tmargin-bottom: -90px;\n\n\t.agree {\n\t\tmargin-bottom: 75px;\n\t\tcolor: #80868a;\n\n\t\ta {\n\t\t\tcolor: #108cf0;\n\t\t}\n\t}\n\n\t#fine-print {\n\t\tvertical-align: top;\n\t}\n}\n\n.sepa-terms-checkbox {\n\tmargin-top: 20px;\n\tline-height: 22px;\n\tlabel {\n\t\tdisplay: inline;\n\t\twhite-space: initial;\n\t}\n\t.w-checkbox-container {\n\t\tdisplay: inline-block;\n\t\t&::before {\n\t\t\tbottom: -5px;\n\t\t}\n\t\t&.error {\n\t\t\tborder-color: #cc0000;\n\t\t}\n\t}\n}\n","markerStore":{"nextMarkerId":47,"markersById":{"0":{"range":{"start":{"row":667,"column":0},"end":{"row":667,"column":0}},"properties":{"type":"selection","editorId":634,"goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true},"17":{"range":{"start":{"row":699,"column":0},"end":{"row":699,"column":0}},"properties":{},"reversed":false,"tailed":true,"valid":false,"invalidate":"overlap","maintainHistory":false}},"version":2},"history":{"version":3,"nextCheckpointId":44,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/weebly/resources/sass/purchase-screen/_flat_main.scss","digestWhenLastPersisted":"2e104e383651f6a9c6c538aec9b76210c5e70ebe","preferredLineEnding":null,"deserializer":"TextBuffer","version":2}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":554,"softTabs":false,"displayBuffer":{"deserializer":"DisplayBuffer","id":555,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/weebly/html/weebly/incl/billing_purchase_page.php","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":634,"softTabs":false,"scrollRow":607,"displayBuffer":{"deserializer":"DisplayBuffer","id":635,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/weebly/resources/sass/purchase-screen/_flat_main.scss","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":558,"softTabs":false,"displayBuffer":{"deserializer":"DisplayBuffer","id":559,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/weebly/php/Billing/PurchaseScreen/PremiumPlanController.php","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":590,"softTabs":false,"displayBuffer":{"deserializer":"DisplayBuffer","id":591,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/weebly/php/Billing/PurchaseScreen/PaymentController.php","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":594,"softTabs":false,"displayBuffer":{"deserializer":"DisplayBuffer","id":595,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/weebly/php/Billing/Model/BillingServiceItemModel.php","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":614,"softTabs":false,"displayBuffer":{"deserializer":"DisplayBuffer","id":615,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/weebly/html/weebly/incl/billing.php","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":610,"softTabs":false,"displayBuffer":{"deserializer":"DisplayBuffer","id":611,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/weebly/php/Billing/Model/BillingServiceFeatureModel.php","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":606,"softTabs":false,"displayBuffer":{"deserializer":"DisplayBuffer","id":607,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/weebly/php/Billing/Model/BillingServiceModel.php","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":574,"softTabs":false,"displayBuffer":{"deserializer":"DisplayBuffer","id":575,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/weebly/javascript/admin/view/user/purchase/TotalsView.js","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":582,"softTabs":false,"displayBuffer":{"deserializer":"DisplayBuffer","id":583,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/weebly/javascript/admin/view/user/purchase/DomainPurchaseView.js","largeFileMode":false},"largeFileMode":false}},{"deserializer":"TextEditor","id":586,"softTabs":false,"displayBuffer":{"deserializer":"DisplayBuffer","id":587,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/weebly/javascript/admin/view/user/purchase/PaymentView.js","largeFileMode":false},"largeFileMode":false}}],"activeItemURI":"/Users/muhammad/workspace/weebly/resources/sass/purchase-screen/_flat_main.scss","focused":true,"flexScale":1},"activePaneId":3},"fullScreen":false,"packagesWithActiveGrammars":["language-php","language-html","language-sass","language-javascript","language-hyperlink","language-todo"]},"packageStates":{"fuzzy-finder":{"/Users/muhammad/workspace/weebly/html/weebly/incl/billing_purchase_page.php":1446514211147,"/Users/muhammad/workspace/weebly/resources/sass/purchase-screen/_flat_main.scss":1446769299412,"/Users/muhammad/workspace/weebly/php/Billing/PurchaseScreen/PremiumPlanController.php":1446514037549,"/Users/muhammad/workspace/weebly/php/Billing/PurchaseScreen/PaymentController.php":1446514031742,"/Users/muhammad/workspace/weebly/php/Billing/Model/BillingServiceItemModel.php":1446511309214,"/Users/muhammad/workspace/weebly/html/weebly/incl/billing.php":1446511145071,"/Users/muhammad/workspace/weebly/php/Billing/Model/BillingServiceFeatureModel.php":1446511144880,"/Users/muhammad/workspace/weebly/php/Billing/Model/BillingServiceModel.php":1446511132105,"/Users/muhammad/workspace/weebly/javascript/admin/view/user/purchase/TotalsView.js":1446500616926,"/Users/muhammad/workspace/weebly/javascript/admin/view/user/purchase/DomainPurchaseView.js":1446500479801,"/Users/muhammad/workspace/weebly/javascript/admin/view/user/purchase/PaymentView.js":1446513920511},"metrics":{"sessionLength":4886},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/muhammad/workspace/weebly":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},".idea":{"isExpanded":false,"entries":{}},"admin":{"isExpanded":false,"entries":{}},"bin":{"isExpanded":false,"entries":{}},"build":{"isExpanded":false,"entries":{}},"html":{"isExpanded":true,"entries":{"abuse":{"isExpanded":false,"entries":{}},"api":{"isExpanded":false,"entries":{}},"app-center":{"isExpanded":false,"entries":{}},"build_tools":{"isExpanded":false,"entries":{}},"campus":{"isExpanded":false,"entries":{}},"comcast":{"isExpanded":false,"entries":{}},"contact":{"isExpanded":false,"entries":{}},"content":{"isExpanded":false,"entries":{}},"cpanel":{"isExpanded":false,"entries":{}},"css":{"isExpanded":false,"entries":{}},"developer":{"isExpanded":false,"entries":{}},"developer-admin":{"isExpanded":false,"entries":{}},"dmca":{"isExpanded":false,"entries":{}},"docs":{"isExpanded":false,"entries":{}},"ecommerce":{"isExpanded":false,"entries":{}},"editor":{"isExpanded":true,"entries":{"api":{"isExpanded":false,"entries":{}},"apps":{"isExpanded":false,"entries":{}},"assets":{"isExpanded":false,"entries":{}},"cache":{"isExpanded":false,"entries":{}},"fonts":{"isExpanded":false,"entries":{}},"getty_wsdls":{"isExpanded":false,"entries":{}},"header_editor":{"isExpanded":false,"entries":{}},"icc_profiles":{"isExpanded":false,"entries":{}},"images":{"isExpanded":false,"entries":{}},"incl":{"isExpanded":true,"entries":{"blog":{"isExpanded":false,"entries":{}},"classes":{"isExpanded":false,"entries":{}},"email_templates":{"isExpanded":false,"entries":{}},"fonts":{"isExpanded":false,"entries":{}},"form":{"isExpanded":false,"entries":{}},"geoip":{"isExpanded":false,"entries":{}},"microakismet":{"isExpanded":false,"entries":{}},"paypalphp":{"isExpanded":false,"entries":{}},"recaptcha":{"isExpanded":false,"entries":{}}}},"libraries":{"isExpanded":true,"entries":{"amline":{"isExpanded":false,"entries":{}},"boomr":{"isExpanded":false,"entries":{}},"chosen":{"isExpanded":false,"entries":{}},"classes":{"isExpanded":false,"entries":{}},"codemirror":{"isExpanded":false,"entries":{}},"codepress":{"isExpanded":false,"entries":{}},"definitions":{"isExpanded":false,"entries":{}},"fancybox":{"isExpanded":false,"entries":{}},"firebug":{"isExpanded":false,"entries":{}},"jwplayer":{"isExpanded":false,"entries":{}},"lightbox":{"isExpanded":false,"entries":{}},"lightbox202":{"isExpanded":false,"entries":{}},"mediaelement":{"isExpanded":false,"entries":{}},"photoswipe":{"isExpanded":false,"entries":{}},"prettify":{"isExpanded":false,"entries":{}},"rangy-1.2.3":{"isExpanded":false,"entries":{}},"scriptaculous_custom":{"isExpanded":false,"entries":{}},"storage_flash":{"isExpanded":false,"entries":{}},"swfupload":{"isExpanded":false,"entries":{}},"table_order":{"isExpanded":false,"entries":{}},"videojs":{"isExpanded":false,"entries":{}},"videoplayer":{"isExpanded":false,"entries":{}}}},"mobile":{"isExpanded":false,"entries":{}},"mobile_themes":{"isExpanded":false,"entries":{}},"partials":{"isExpanded":false,"entries":{}},"templates":{"isExpanded":false,"entries":{}},"themes":{"isExpanded":false,"entries":{}},"w3c":{"isExpanded":false,"entries":{}}}},"eyefinity":{"isExpanded":false,"entries":{}},"google-domains":{"isExpanded":false,"entries":{}},"home":{"isExpanded":false,"entries":{}},"ifttt":{"isExpanded":false,"entries":{}},"images":{"isExpanded":false,"entries":{}},"js":{"isExpanded":false,"entries":{}},"languages":{"isExpanded":false,"entries":{}},"libraries":{"isExpanded":false,"entries":{}},"link":{"isExpanded":false,"entries":{}},"nederlandverdientonline":{"isExpanded":false,"entries":{}},"oauth":{"isExpanded":false,"entries":{}},"platform":{"isExpanded":false,"entries":{}},"power-of-sites":{"isExpanded":false,"entries":{}},"press":{"isExpanded":false,"entries":{}},"promo":{"isExpanded":false,"entries":{}},"reporting":{"isExpanded":false,"entries":{}},"reseller":{"isExpanded":false,"entries":{}},"spam":{"isExpanded":false,"entries":{}},"square":{"isExpanded":false,"entries":{}},"squarestore":{"isExpanded":false,"entries":{}},"start":{"isExpanded":false,"entries":{}},"templates":{"isExpanded":false,"entries":{}},"theme_browser":{"isExpanded":false,"entries":{}},"theme_community":{"isExpanded":false,"entries":{}},"theme_contest":{"isExpanded":false,"entries":{}},"themes":{"isExpanded":false,"entries":{}},"trial":{"isExpanded":false,"entries":{}},"weebly":{"isExpanded":false,"entries":{}},"whmcs":{"isExpanded":false,"entries":{}}}},"javascript":{"isExpanded":true,"entries":{"admin":{"isExpanded":true,"entries":{"app-center":{"isExpanded":false,"entries":{}},"cloud":{"isExpanded":false,"entries":{}},"collection":{"isExpanded":false,"entries":{}},"control":{"isExpanded":false,"entries":{}},"fraud":{"isExpanded":false,"entries":{}},"import":{"isExpanded":false,"entries":{}},"leaderboard":{"isExpanded":false,"entries":{}},"model":{"isExpanded":false,"entries":{}},"navigation":{"isExpanded":false,"entries":{}},"reports":{"isExpanded":false,"entries":{}},"style-guide":{"isExpanded":false,"entries":{}},"team":{"isExpanded":false,"entries":{}},"translations":{"isExpanded":false,"entries":{}},"ui-framework":{"isExpanded":false,"entries":{}},"util":{"isExpanded":false,"entries":{}},"view":{"isExpanded":true,"entries":{"element":{"isExpanded":false,"entries":{}},"header":{"isExpanded":false,"entries":{}},"login":{"isExpanded":false,"entries":{}},"message":{"isExpanded":false,"entries":{}},"nav":{"isExpanded":false,"entries":{}},"package":{"isExpanded":false,"entries":{}},"page":{"isExpanded":false,"entries":{}},"payment-profile":{"isExpanded":false,"entries":{}},"properties":{"isExpanded":false,"entries":{}},"search":{"isExpanded":false,"entries":{}},"site":{"isExpanded":false,"entries":{}},"tab":{"isExpanded":false,"entries":{}},"transaction":{"isExpanded":false,"entries":{}},"user":{"isExpanded":true,"entries":{"ab-segments":{"isExpanded":false,"entries":{}},"admin-log-action":{"isExpanded":false,"entries":{}},"client-site":{"isExpanded":false,"entries":{}},"coupon":{"isExpanded":false,"entries":{}},"domain":{"isExpanded":false,"entries":{}},"email-campaign":{"isExpanded":false,"entries":{}},"interactions":{"isExpanded":false,"entries":{}},"log-tab":{"isExpanded":false,"entries":{}},"note":{"isExpanded":false,"entries":{}},"purchase":{"isExpanded":true,"entries":{}},"repos":{"isExpanded":false,"entries":{}},"reseller":{"isExpanded":false,"entries":{}},"site-event":{"isExpanded":false,"entries":{}},"transaction":{"isExpanded":false,"entries":{}},"user-message":{"isExpanded":false,"entries":{}},"user-stat":{"isExpanded":false,"entries":{}}}}}}}},"affiliate":{"isExpanded":false,"entries":{}},"app-center":{"isExpanded":false,"entries":{}},"blog":{"isExpanded":false,"entries":{}},"commerce":{"isExpanded":false,"entries":{}},"components":{"isExpanded":false,"entries":{}},"cpanel":{"isExpanded":false,"entries":{}},"designer":{"isExpanded":false,"entries":{}},"developer-portal":{"isExpanded":false,"entries":{}},"editor":{"isExpanded":false,"entries":{}},"editor-site-shared":{"isExpanded":false,"entries":{}},"element":{"isExpanded":false,"entries":{}},"google":{"isExpanded":false,"entries":{}},"home":{"isExpanded":true,"entries":{"controller":{"isExpanded":false,"entries":{}},"helpers":{"isExpanded":false,"entries":{}},"sections":{"isExpanded":true,"entries":{"account":{"isExpanded":true,"entries":{"dialogs":{"isExpanded":false,"entries":{}}}},"blog":{"isExpanded":false,"entries":{}},"common":{"isExpanded":false,"entries":{}},"dashboard":{"isExpanded":false,"entries":{}},"domains":{"isExpanded":false,"entries":{}},"emails":{"isExpanded":false,"entries":{}},"form":{"isExpanded":false,"entries":{}},"simplechat":{"isExpanded":false,"entries":{}},"stats":{"isExpanded":false,"entries":{}}}},"shim":{"isExpanded":false,"entries":{}}}},"landing-pages":{"isExpanded":true,"entries":{"login-signup":{"isExpanded":true,"entries":{"shared":{"isExpanded":true,"entries":{"navigation":{"isExpanded":false,"entries":{}},"tracking":{"isExpanded":false,"entries":{}},"views":{"isExpanded":true,"entries":{}}}}}}}},"languages":{"isExpanded":false,"entries":{}},"marketplace":{"isExpanded":false,"entries":{}},"membership":{"isExpanded":false,"entries":{}},"onboarding":{"isExpanded":false,"entries":{}},"page-layouts":{"isExpanded":false,"entries":{}},"public":{"isExpanded":true,"entries":{"blog":{"isExpanded":false,"entries":{}},"carbon":{"isExpanded":false,"entries":{}},"header":{"isExpanded":false,"entries":{}},"start":{"isExpanded":false,"entries":{}},"vertical":{"isExpanded":false,"entries":{}}}},"purchase-screen":{"isExpanded":false,"entries":{}},"reseller":{"isExpanded":false,"entries":{}},"section":{"isExpanded":false,"entries":{}},"shared":{"isExpanded":false,"entries":{}},"site":{"isExpanded":false,"entries":{}},"tablet":{"isExpanded":false,"entries":{}},"theme-gallery":{"isExpanded":false,"entries":{}},"themes":{"isExpanded":false,"entries":{}},"userhome":{"isExpanded":false,"entries":{}},"util":{"isExpanded":false,"entries":{}},"vendor":{"isExpanded":false,"entries":{}}}},"local_config":{"isExpanded":false,"entries":{}},"log":{"isExpanded":false,"entries":{}},"php":{"isExpanded":true,"entries":{"ABTest":{"isExpanded":false,"entries":{}},"AccessControl":{"isExpanded":false,"entries":{}},"Admin":{"isExpanded":false,"entries":{}},"AdminRemoteAPITrait":{"isExpanded":false,"entries":{}},"API":{"isExpanded":false,"entries":{}},"APIServices":{"isExpanded":false,"entries":{}},"Billing":{"isExpanded":true,"entries":{"BillingTab":{"isExpanded":false,"entries":{}},"Controller":{"isExpanded":false,"entries":{}},"Model":{"isExpanded":true,"entries":{}},"Providers":{"isExpanded":false,"entries":{}},"PurchaseScreen":{"isExpanded":true,"entries":{}}}},"Blog":{"isExpanded":false,"entries":{}},"Comment":{"isExpanded":false,"entries":{}},"Commerce":{"isExpanded":false,"entries":{}},"Cpanel":{"isExpanded":false,"entries":{}},"Data":{"isExpanded":false,"entries":{}},"DataTable":{"isExpanded":false,"entries":{}},"Designer":{"isExpanded":false,"entries":{}},"DeveloperPortal":{"isExpanded":false,"entries":{}},"Domain":{"isExpanded":false,"entries":{}},"Domains":{"isExpanded":false,"entries":{}},"Editor":{"isExpanded":false,"entries":{}},"Element":{"isExpanded":false,"entries":{}},"Email":{"isExpanded":false,"entries":{}},"Exception":{"isExpanded":false,"entries":{}},"Font":{"isExpanded":false,"entries":{}},"Form":{"isExpanded":false,"entries":{}},"Google":{"isExpanded":false,"entries":{}},"i18n":{"isExpanded":true,"entries":{"Address":{"isExpanded":false,"entries":{}},"Build":{"isExpanded":false,"entries":{}},"Controller":{"isExpanded":true,"entries":{}},"Model":{"isExpanded":false,"entries":{}},"Util":{"isExpanded":false,"entries":{}}}},"IFTTT":{"isExpanded":false,"entries":{}},"LandingPage":{"isExpanded":false,"entries":{}},"Marketplace":{"isExpanded":false,"entries":{}},"Membership":{"isExpanded":false,"entries":{}},"Migration":{"isExpanded":false,"entries":{}},"Mobile":{"isExpanded":false,"entries":{}},"Network":{"isExpanded":false,"entries":{}},"Page":{"isExpanded":false,"entries":{}},"PageLayouts":{"isExpanded":false,"entries":{}},"Platform":{"isExpanded":false,"entries":{}},"Protip":{"isExpanded":false,"entries":{}},"PublicPages":{"isExpanded":false,"entries":{}},"Publish":{"isExpanded":false,"entries":{}},"Remote":{"isExpanded":false,"entries":{}},"RemoteAPI":{"isExpanded":false,"entries":{}},"RenderData":{"isExpanded":false,"entries":{}},"Reseller":{"isExpanded":false,"entries":{}},"ResellerAdmin":{"isExpanded":false,"entries":{}},"REST":{"isExpanded":false,"entries":{}},"Section":{"isExpanded":false,"entries":{}},"Settings":{"isExpanded":false,"entries":{}},"Silverpop":{"isExpanded":false,"entries":{}},"SimpleChat":{"isExpanded":false,"entries":{}},"Site":{"isExpanded":false,"entries":{}},"SiteHome":{"isExpanded":false,"entries":{}},"Spam":{"isExpanded":false,"entries":{}},"SSL":{"isExpanded":false,"entries":{}},"StockMedia":{"isExpanded":false,"entries":{}},"Survey":{"isExpanded":false,"entries":{}},"Task":{"isExpanded":false,"entries":{}},"Template":{"isExpanded":false,"entries":{}},"Testing":{"isExpanded":false,"entries":{}},"Theme":{"isExpanded":false,"entries":{}},"ThemeGallery":{"isExpanded":false,"entries":{}},"Translation":{"isExpanded":false,"entries":{}},"User":{"isExpanded":false,"entries":{}},"UserHome":{"isExpanded":false,"entries":{}},"Util":{"isExpanded":true,"entries":{"API":{"isExpanded":false,"entries":{}},"Bootstrap":{"isExpanded":false,"entries":{}},"Cache":{"isExpanded":false,"entries":{}},"Model":{"isExpanded":false,"entries":{}},"RateLimiter":{"isExpanded":false,"entries":{}}}},"Video":{"isExpanded":false,"entries":{}},"ViewModel":{"isExpanded":false,"entries":{}},"WebService":{"isExpanded":false,"entries":{}},"WeeblyOAuth":{"isExpanded":false,"entries":{}},"Widget":{"isExpanded":false,"entries":{}}}},"private":{"isExpanded":false,"entries":{}},"resources":{"isExpanded":true,"entries":{"assets":{"isExpanded":false,"entries":{}},"sass":{"isExpanded":true,"entries":{"admin":{"isExpanded":false,"entries":{}},"affiliate":{"isExpanded":false,"entries":{}},"app-center":{"isExpanded":false,"entries":{}},"blog":{"isExpanded":false,"entries":{}},"commerce":{"isExpanded":false,"entries":{}},"common":{"isExpanded":false,"entries":{}},"common-admin":{"isExpanded":false,"entries":{}},"components":{"isExpanded":false,"entries":{}},"cpanel":{"isExpanded":false,"entries":{}},"designer":{"isExpanded":false,"entries":{}},"designer-public":{"isExpanded":false,"entries":{}},"developer-portal":{"isExpanded":false,"entries":{}},"editor":{"isExpanded":false,"entries":{}},"editor-site-shared":{"isExpanded":false,"entries":{}},"email":{"isExpanded":false,"entries":{}},"flat-admin":{"isExpanded":false,"entries":{}},"google-apps":{"isExpanded":false,"entries":{}},"google-domains":{"isExpanded":false,"entries":{}},"home":{"isExpanded":false,"entries":{}},"inspiration":{"isExpanded":false,"entries":{}},"landing-pages":{"isExpanded":false,"entries":{}},"marketplace":{"isExpanded":false,"entries":{}},"membership":{"isExpanded":false,"entries":{}},"page-layouts":{"isExpanded":false,"entries":{}},"public":{"isExpanded":false,"entries":{}},"purchase-screen":{"isExpanded":false,"entries":{}},"reseller":{"isExpanded":false,"entries":{}},"sites":{"isExpanded":false,"entries":{}},"styles":{"isExpanded":true,"entries":{"defines":{"isExpanded":true,"entries":{"control":{"isExpanded":false,"entries":{}}}},"rules":{"isExpanded":false,"entries":{}}}},"theme-gallery":{"isExpanded":false,"entries":{}},"themes":{"isExpanded":false,"entries":{}},"userhome":{"isExpanded":false,"entries":{}},"util":{"isExpanded":false,"entries":{}},"vendor":{"isExpanded":false,"entries":{}},"video":{"isExpanded":false,"entries":{}},"videojs":{"isExpanded":false,"entries":{}}}}}},"templates":{"isExpanded":false,"entries":{}},"tests":{"isExpanded":false,"entries":{}},"tools":{"isExpanded":true,"entries":{"ab-test":{"isExpanded":false,"entries":{}},"ab-test-reports":{"isExpanded":false,"entries":{}},"admin":{"isExpanded":false,"entries":{}},"adwords":{"isExpanded":false,"entries":{}},"billing":{"isExpanded":false,"entries":{}},"cloud":{"isExpanded":false,"entries":{}},"comcast":{"isExpanded":false,"entries":{}},"commerce":{"isExpanded":false,"entries":{}},"copydata":{"isExpanded":false,"entries":{}},"cpanel":{"isExpanded":false,"entries":{}},"custom_domains":{"isExpanded":false,"entries":{}},"david":{"isExpanded":false,"entries":{}},"designer_platform":{"isExpanded":false,"entries":{}},"eclipse":{"isExpanded":false,"entries":{}},"email":{"isExpanded":false,"entries":{}},"endurance-migration":{"isExpanded":false,"entries":{}},"fraud":{"isExpanded":false,"entries":{}},"gapps-promo":{"isExpanded":false,"entries":{}},"google-apps":{"isExpanded":false,"entries":{}},"identity-verification":{"isExpanded":false,"entries":{}},"js-validation":{"isExpanded":false,"entries":{}},"lifecycle":{"isExpanded":false,"entries":{}},"marketplace":{"isExpanded":false,"entries":{}},"member":{"isExpanded":false,"entries":{}},"nhd":{"isExpanded":false,"entries":{}},"PSRW":{"isExpanded":false,"entries":{}},"reports":{"isExpanded":false,"entries":{}},"repos":{"isExpanded":false,"entries":{}},"reseller":{"isExpanded":false,"entries":{}},"shard_tools":{"isExpanded":false,"entries":{}},"silverpop":{"isExpanded":false,"entries":{}},"solr":{"isExpanded":false,"entries":{}},"spam":{"isExpanded":false,"entries":{}},"spam-david":{"isExpanded":false,"entries":{}},"stats":{"isExpanded":false,"entries":{}},"support":{"isExpanded":false,"entries":{}},"task":{"isExpanded":false,"entries":{}},"templates":{"isExpanded":false,"entries":{}},"translations":{"isExpanded":true,"entries":{}},"video":{"isExpanded":false,"entries":{}},"whmcs":{"isExpanded":false,"entries":{}}}},"vendor":{"isExpanded":false,"entries":{}},"webroots":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/muhammad/workspace/weebly/resources/sass/purchase-screen","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":4018,"width":329},"atom-sync":{},"find-and-replace":{"findOptions":{"findPattern":"existingService","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["totalsview","total","prorate","RPC","setSubtotal","vars","template","prorat","disc","discount","price","exportPlanForView","discount","prorateleveledService","prorateLeveledService","prorated","calculate","discount","pre","rated","prorateLeveledService","template","templatev","prorateDiscount","existingService"],"replaceHistory":["Google Advertising credit test","monthlyPrice"],"pathsHistory":["Google Advertising credit test","monthlyPrice"]},"php-debug":{"deserializer":"GlobalContext","data":{"breakpoints":[],"watchpoints":[]}},"keybinding-resolver":{}}}