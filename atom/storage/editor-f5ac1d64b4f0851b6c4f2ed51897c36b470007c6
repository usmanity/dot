{"version":1,"windowDimensions":{"x":0,"y":23,"width":1434,"height":1413,"maximized":false},"grammars":{"grammarOverridesByPath":{}},"project":{"deserializer":"Project","paths":["/Users/muhammad/workspace/folly"],"buffers":[{"id":"03ba9ca7462717f921c54c5af6458dc9","text":"<?php\n/**\n * Bootstrap stuff\n */\n\nif (defined('WEEBLY_DEBUG') && WEEBLY_DEBUG === true) {\n\tdefine('APPLICATION_ENVIRONMENT', 'development');\n\t/**\n\t * Exception runner\n\t */\n\t(new \\Whoops\\Run)->pushHandler(new \\Whoops\\Handler\\PrettyPageHandler)->register();\n} else {\n\tdefine('APPLICATION_ENVIRONMENT', 'production');\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":10,"column":83},"end":{"row":10,"column":83}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"6":{"id":"6","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":7,"history":{"version":3,"nextCheckpointId":8,"undoStack":[{"type":"group-start","snapshot":{"2":{"1":{"range":[[11,0],[14,82]],"properties":{"type":"selection","goalScreenRange":null},"reversed":true,"tailed":true,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[11,0],[14,82]],"newRange":[[11,0],[11,0]],"oldText":"/**\n * Exception runner\n */\n(new \\Whoops\\Run)->pushHandler(new \\Whoops\\Handler\\PrettyPageHandler)->register();","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[11,0],[11,0]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[6,50],[6,50]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[6,50],[6,50]],"newRange":[[6,50],[7,0]],"oldText":"","newText":"\n"}},{"type":"change","content":{"oldRange":[[7,0],[7,0]],"newRange":[[7,0],[7,1]],"oldText":"","newText":"\t"}},{"type":"change","content":{"oldRange":[[7,1],[7,1]],"newRange":[[7,1],[10,83]],"oldText":"","newText":"/**\n\t * Exception runner\n\t */\n\t(new \\Whoops\\Run)->pushHandler(new \\Whoops\\Handler\\PrettyPageHandler)->register();"}},{"type":"change","content":{"oldRange":[[7,0],[7,1]],"newRange":[[7,0],[7,1]],"oldText":"\t","newText":"\t"}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[10,83],[10,83]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"group-start","snapshot":{"2":{"1":{"range":[[10,83],[10,83]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}},{"type":"change","content":{"oldRange":[[15,0],[16,0]],"newRange":[[15,0],[15,0]],"oldText":"\n","newText":""}},{"type":"change","content":{"oldRange":[[14,0],[15,0]],"newRange":[[14,0],[14,0]],"oldText":"\n","newText":""}},{"type":"group-end","snapshot":{"2":{"1":{"range":[[10,83],[10,83]],"properties":{"type":"selection","goalScreenRange":null},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}}}}],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/folly/src/init.php","digestWhenLastPersisted":"bec8e668ff4834a559cc7a933e1c1cb7b16d249c","preferredLineEnding":null,"nextMarkerId":11,"deserializer":"TextBuffer","version":5},{"id":"6bf5d92ac61f61c22930a10d60e575fa","text":"<?php\n\nnamespace Folly\\View;\n\n\nuse Folly\\Controller\\RequestController;\nuse Folly\\Network\\ContentTypes;\nuse Folly\\View\\Exception\\TemplateNotFoundException;\nuse Folly\\View\\Traits\\XMLRendererTrait;\nuse Folly\\View\\Traits\\YAMLRendererTrait;\nuse ReflectionObject;\nuse Folly\\View\\Traits\\JSONRendererTrait;\nuse Folly\\View\\Traits\\TemplateRendererTrait;\n\n/**\n * Class View\n *\n * Holds on the data pertaining to a specific view\n * for the given request and response\n *\n * @package Folly\\View\n */\nclass View\n{\n\n\tuse TemplateRendererTrait;\n\tuse JSONRendererTrait;\n\tuse XMLRendererTrait;\n\tuse YAMLRendererTrait;\n\n\t/**\n\t * A data array that will be passed into the view upon render\n\t * @var Array\n\t */\n\tprivate $data = [];\n\n\t/**\n\t * The raw view\n\t *\n\t * @var Mixed\n\t */\n\tprivate $rawViews = [];\n\n\t/**\n\t * Override the default layout.\n\t *\n\t * @param String $layout\n\t *\n\t * @return String $layout The layout you want to use instead of the default\n\t */\n\tpublic function setLayout($layout)\n\t{\n\t\t$this->addViewVars([\"layout\" => $layout]);\n\t}\n\n\t/**\n\t * Registers the provided variables as render components.  The key becomes the accessible name\n\t * of the variable in the template.  Only methods of the controller hierarchy can set data.\n\t *\n\t * @param Array $vars\n\t */\n\tpublic function addViewVars($vars)\n\t{\n\t\t$this->data = array_merge($this->data, $vars);\n\t}\n\n\t/**\n\t * Registers the provided variables as render components.  The key becomes the accessible name\n\t * of the variable in the template.\n\t *\n\t * @return Array The view variables\n\t */\n\tpublic function getViewVars()\n\t{\n\t\treturn $this->data;\n\t}\n\n\t/**\n\t * Setups up a template to be rendered\n\t *\n\t * @param String $template\n\t * @param array $data\n\t */\n\tpublic function tpl($template, $data = [])\n\t{\n\t\t$this->addViewVars($data);\n\n\t\t$this->rawViews['tpl'] = $this->renderTpl($template, $this->data);\n\t}\n\n\t/**\n\t * Sets up json to be rendered\n\t *\n\t * @param Array $data\n\t */\n\tpublic function json($data = [])\n\t{\n\t\t$this->addViewVars($data);\n\n\t\t$this->rawViews['json'] = $this->renderJson($this->data);\n\t}\n\n\t/**\n\t *  Sets up xml to be rendered\n\t *\n\t * @param Array $data\n\t */\n\tpublic function xml($data = [])\n\t{\n\t\t$this->addViewVars($data);\n\n\t\t$this->rawViews['xml'] = $this->renderXml($this->data);\n\t}\n\n\t/**\n\t *  Sets up yaml to be rendered\n\t *\n\t * @param Array $data\n\t */\n\tpublic function yaml($data = [])\n\t{\n\t\t$this->addViewVars($data);\n\n\t\t$this->rawViews['yaml'] = $this->renderYaml($this->data);\n\t}\n\n\t/**\n\t * Returns the rendered view in the desired content type\n\t *\n\t * @param Int $contentType\n\t *\n\t * @return mixed\n\t */\n\tpublic function render($contentType)\n\t{\n\t\tswitch ($contentType) {\n\t\t\tcase ContentTypes::HTML:\n\t\t\t\treturn $this->rawViews['tpl'];\n\t\t\tcase ContentTypes::JSON:\n\t\t\t\treturn $this->rawViews['json'];\n\t\t\tcase ContentTypes::XML:\n\t\t\t\treturn $this->rawViews['xml'];\n\t\t\tcase ContentTypes::YAML:\n\t\t\t\treturn $this->rawViews['yaml'];\n\t\t}\n\t}\n\n\t/**\n\t * Gets the rendered response for the given content type\n\t *\n\t * TODO: view adapters\n\t *\n\t * @param $contentType\n\t * @param $action\n\t * @param $controller\n\t *\n\t * @return mixed\n\t *\n\t * @throws TemplateNotFoundException\n\t */\n\tpublic function getRenderedResponseForContentType($contentType, $action, $controller)\n\t{\n\t\t$rendered = $this->render($contentType);\n\n\t\tif ($rendered) {\n\t\t\treturn $rendered;\n\t\t}\n\n\t\ttry {\n\t\t\tswitch ($contentType) {\n\t\t\t\tcase ContentTypes::HTML:\n\t\t\t\t\t$this->setTemplateFromController($controller, $action);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ContentTypes::JSON:\n\t\t\t\t\t$this->json([]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ContentTypes::XML:\n\t\t\t\t\t$this->xml([]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ContentTypes::YAML:\n\t\t\t\t\t$this->yaml([]);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch (TemplateNotFoundException $e) {\n\t\t\tthrow $e;\n\t\t}\n\n\n\t\treturn $this->render($contentType);\n\t}\n\n\t/**\n\t * Sets the template from the controller and action\n\t *\n\t * TODO: this should probably take in an ActionPack instead\n\t *\n\t * @param RequestController $controller\n\t * @param String $action\n\t *\n\t * @throws TemplateNotFoundException\n\t */\n\tpublic function setTemplateFromController($controller, $action)\n\t{\n\n\t\ttry {\n\t\t\t$tpl = $this->findTemplateFromControllerAction($controller, $action);\n\t\t} catch (TemplateNotFoundException $e) {\n\t\t\tthrow $e;\n\t\t}\n\n\n\t\t$this->tpl($tpl);\n\t}\n\n\t/**\n\t * Helper function to convert a camel cased sting to a\n\t * hyphenated one\n\t *\n\t * @param String $string\n\t *\n\t * @return string\n\t */\n\tpublic function camelToHyphens($string)\n\t{\n\t\treturn strtolower(preg_replace('/([a-z])([A-Z])/', '$1-$2', $string));\n\t}\n\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":17,"column":50},"end":{"row":17,"column":50}},"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null,"preserveFolds":true,"includeNonWordCharacters":false},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"6":{"id":"6","maintainHistory":false,"markersById":{},"version":2},"7":{"id":"7","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":8,"history":{"version":3,"nextCheckpointId":2,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/folly/src/View/View.php","digestWhenLastPersisted":"a0bfc5baa1c6fddbc5a3378f1149d2e567af3156","preferredLineEnding":null,"nextMarkerId":15,"deserializer":"TextBuffer","version":5},{"id":"8ea1f787b5a1a5e3472a5c3f281d0fa1","text":"<?php\n\nnamespace Folly\\Controller;\n\nuse Folly\\Controller\\Exception\\ActionNotFoundException;\nuse Folly\\Network\\ContentTypes;\nuse Folly\\Network\\Request;\nuse Folly\\Network\\Response;\nuse Folly\\View\\Exception\\TemplateNotFoundException;\nuse Folly\\View\\View;\n\n/**\n * Class RequestController\n *\n * The request controller gives a controller access\n * to general information about the current request\n *\n * @package Folly\\Controller\n */\nclass RequestController\n{\n\t/**\n\t * The current request\n\t *\n\t * @var Request\n\t */\n\tprivate $request;\n\n\t/**\n\t * The current response\n\t *\n\t * @var Response\n\t */\n\tprivate $response;\n\n\t/**\n\t * The View\n\t *\n\t * @var View\n\t */\n\tpublic $view;\n\n\t/**\n\t * Constructs the controller\n\t *\n\t * @param Request $request\n\t * @param Response $response\n\t * @param View $view\n\t */\n\tpublic function __construct($request, $response, $view)\n\t{\n\t\t$this->request = $request;\n\n\t\t$this->response = $response;\n\n\t\t$this->view = $view;\n\t}\n\n\t/**\n\t * Gets the current request object\n\t *\n\t * @return Request\n\t */\n\tpublic function getRequest()\n\t{\n\t\treturn $this->request;\n\t}\n\n\t/**\n\t * Call an action by name.  This will automatically execute any defined beforeFilters.\n\t *\n\t * @param string $action\n\t *\n\t * @throws ActionNotFoundException\n\t * @throws TemplateNotFoundException\n\t */\n\tpublic function execute($action)\n\t{\n\t\tif (!method_exists($this, $action)) {\n\t\t\tthrow new ActionNotFoundException();\n\t\t}\n\n\t\t$this->triggerActionLifeCycle($action);\n\n\t\tif ($this->isResponseFinished()) {\n\t\t\treturn;\n\t\t}\n\n\t\t$contentType = $this->request->getRequestedContentType();\n\n\t\ttry {\n\t\t\t$rendered = $this->view->getRenderedResponseForContentType($contentType, $action, $this);\n\t\t} catch (TemplateNotFoundException $e) {\n\t\t\tthrow $e;\n\t\t}\n\n\t\t$this->setResponse($rendered, $contentType);\n\t}\n\n\t/**\n\t * Checks if the response is finished\n\t *\n\t * @return bool\n\t */\n\tprivate function isResponseFinished()\n\t{\n\t\treturn $this->response->getBody() || $this->response->isRedirecting();\n\t}\n\n\t/**\n\t * Triggers the action life cycle\n\t *\n\t * @param $action\n\t */\n\tprivate function triggerActionLifeCycle($action)\n\t{\n\t\t$this->triggerBeforeAction();\n\n\t\t$this->{$action}();\n\n\t\t$this->triggerAfterAction();\n\t}\n\n\t/**\n\t * Housekeeping events to trigger\n\t * these should probably be moved into\n\t * an event bus\n\t */\n\tprivate function triggerBeforeAction()\n\t{\n\t\tif (method_exists($this, \"beforeFilter\")) {\n\t\t\t$this->beforeFilter();\n\t\t}\n\n\t\tif (method_exists($this, \"aroundFilter\")) {\n\t\t\t$this->aroundFilter();\n\t\t}\n\t}\n\n\t/**\n\t * Housekeeping events to trigger\n\t */\n\tprivate function triggerAfterAction()\n\t{\n\t\tif (method_exists($this, \"aroundFilter\")) {\n\t\t\t$this->aroundFilter();\n\t\t}\n\n\t\tif (method_exists($this, \"afterFilter\")) {\n\t\t\t$this->afterFilter();\n\t\t}\n\t}\n\n\tpublic function beforeFilter()\n\t{\n\t}\n\n\tpublic function aroundFilter()\n\t{\n\t}\n\n\tpublic function afterFilter()\n\t{\n\t}\n\n\t/**\n\t * Sets the redirect on the response object\n\t *\n\t * @param string $location\n\t */\n\tpublic function redirect($location)\n\t{\n\t\t$this->response->redirect($location);\n\t}\n\n\t/**\n\t * Sets the response body and content type on the\n\t * response object\n\t *\n\t * @param String $body\n\t * @param $contentType\n\t */\n\tpublic function setResponse($body, $contentType = ContentTypes::HTML)\n\t{\n\t\t$this->response->setBody($body);\n\t\t$this->response->setContentType($contentType);\n\t}\n\n\t/**\n\t * Returns the current response object\n\t *\n\t * @return Response\n\t */\n\tpublic function getResponse()\n\t{\n\t\treturn $this->response;\n\t}\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":63,"column":17},"end":{"row":63,"column":27}},"properties":{"type":"selection","autoscroll":false,"includeNonWordCharacters":false,"preserveFolds":true},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/folly/src/Controller/RequestController.php","digestWhenLastPersisted":"51ad721f1d574e6e2888339288a1a371cf97b62a","preferredLineEnding":null,"nextMarkerId":4,"deserializer":"TextBuffer","version":5},{"id":"8335042ca7b172427f82acce8b48e47c","text":"<?php\n\nnamespace Folly\\Controller;\n\nuse Folly\\Controller\\Exception\\ActionNotFoundException;\nuse Folly\\Controller\\Exception\\NotFoundException;\nuse Folly\\Exception\\BaseException;\nuse Folly\\Network\\Request;\nuse Folly\\Network\\Response;\nuse Folly\\Routing\\Route;\nuse Folly\\Routing\\Router;\nuse Folly\\View\\Exception\\TemplateNotFoundException;\nuse Folly\\View\\View;\n\n/**\n * Class ActionPack\n *\n * Instantiates and calls the controller\n * and action combination\n *\n * @package Folly\\Controller\n */\nclass ActionPack\n{\n\t/**\n\t * All of the defined routes\n\t * @var Router\n\t */\n\tprivate $router;\n\n\t/**\n\t * The current request to resolve\n\t * @var Request\n\t */\n\tprivate $request;\n\n\t/**\n\t * The response to be built\n\t * @var Response\n\t */\n\tprivate $response;\n\n\t/**\n\t * The route\n\t * @var Route\n\t */\n\tprivate $route;\n\n\t/**\n\t * Builds the action pack from the given request\n\t * @param Request $request\n\t * @param Response $response\n\t * @param Router $router\n\t */\n\tpublic function __construct($request, $response, $router)\n\t{\n\t\t$this->router = $router;\n\t\t$this->request = $request;\n\t\t$this->response = $response;\n\n\t\t$this->init();\n\t}\n\n\t/**\n\t * Get an instance of the controller associated with this\n\t * request\n\t *\n\t * @return RequestController\n\t */\n\tpublic function getControllerInstance()\n\t{\n\t\t$controller = $this->route->getController();\n\n\t\tif ($controller) {\n\t\t\t$controller = new $controller($this->request, $this->response, new View);\n\t\t}\n\n\t\treturn $controller;\n\t}\n\n\t/**\n\t * Triggers the action on the controller for\n\t * the give request\n\t */\n\tpublic function fire()\n\t{\n\t\tif ($this->route->isRedirecting()) {\n\t\t\t$this->response->redirect($this->route->getRedirect());\n\t\t\treturn;\n\t\t}\n\n\t\t$controller = $this->getControllerInstance();\n\n\t\t$action = $this->route->getAction();\n\n\t\ttry {\n\t\t\t$controller->execute($action);\n\t\t} catch (BaseException $e) {\n\t\t\tif (APPLICATION_ENVIRONMENT === 'development') {\n\t\t\t\tthrow $e;\n\t\t\t}\n\n\t\t\t$this->router->give404();\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if we have a valid controller and action\n\t *\n\t * @return bool\n\t */\n\tpublic function isValid()\n\t{\n\t\treturn $this->route && $this->route->getController() && $this->route->getAction();\n\t}\n\n\t/**\n\t * Builds the action pack object if we are unable\n\t * to resolve the give request we throw an exception\n\t *\n\t * The default request method for a route if not defined is GET\n\t *\n\t * @throws NotFoundException\n\t */\n\tprivate function init()\n\t{\n\t\t$route = $this->request->getRequestUrlWithoutExtension() ?: \"/\";\n\n\t\tif (!$this->router->isRequestedRouteValid($this->request)) {\n\t\t\tthrow new NotFoundException(\"request route \".$route.\" not found\");\n\t\t}\n\n\t\t$this->route = $this->router->lookup($this->request);\n\n\t\t$this->request->setRoute($this->route);\n\n\t\tif ($this->route->getMethod() != $this->request->getMethod()) {\n\t\t\tthrow new NotFoundException(\"request method: \".$this->request->getMethod().\" not found on controller \".$this->route->getController());\n\t\t}\n\t}\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{"3":{"range":{"start":{"row":104,"column":1},"end":{"row":104,"column":2}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"4":{"range":{"start":{"row":85,"column":1},"end":{"row":85,"column":2}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"11":{"range":{"start":{"row":104,"column":1},"end":{"row":104,"column":2}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"},"12":{"range":{"start":{"row":85,"column":1},"end":{"row":85,"column":2}},"properties":{},"reversed":false,"tailed":true,"valid":true,"invalidate":"overlap"}},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":104,"column":2},"end":{"row":104,"column":2}},"properties":{"type":"selection","goalScreenRange":null,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never"}},"version":2},"3":{"id":"3","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2},"6":{"id":"6","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":7,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/folly/src/Controller/ActionPack.php","digestWhenLastPersisted":"b195f99ebcedf02a8514eb9e70e0bf0b2f0e176f","preferredLineEnding":null,"nextMarkerId":15,"deserializer":"TextBuffer","version":5},{"id":"07598bbfd4c7c3e9945f48db4a6ca802","text":"<?php\n\nnamespace Folly\\View\\Traits;\n\nuse Folly\\Controller\\RequestController;\nuse Folly\\View\\Exception\\TemplateNotFoundException;\nuse ReflectionObject;\nuse Template\\TemplateEngine;\n\n/**\n * Class TemplateRendererTrait\n *\n * Renderer for Mustache templates\n *\n * @package Folly\\View\\Traits\n */\ntrait TemplateRendererTrait\n{\n\n\t/**\n\t * The base directory for templates\n\t *\n\t * @var string\n\t */\n\tprivate $templateBaseDirectory = \"/templates\";\n\n\t/**\n\t * This is the search path within the $templateBaseDirectory\n\t * to look in when trying to figure out the template\n\t *\n\t * @var String\n\t */\n\tprivate $templateSearchPath;\n\n\t/**\n\t * The default layout\n\t *\n\t * @var string\n\t */\n\tprivate $defaultLayout = \"landing-page/layout.tpl\";\n\n\t/**\n\t * This is the search path within the controller\n\t * folder to look in\n\t *\n\t * E.g.\n\t *   /controller/action.tpl\n\t *   /controller/somewhere/action.tpl\n\t *\n\t * @var string\n\t */\n\tprivate $infixSearchPath = \"\";\n\n\t/**\n\t * Gets the template directory\n\t *\n\t * @return string\n\t */\n\tpublic function getTemplateBaseDir()\n\t{\n\t\treturn $this->templateBaseDirectory;\n\t}\n\n\t/**\n\t * Sets the template directory\n\t *\n\t * @param $dir\n\t */\n\tpublic function setTemplateBaseDir($dir)\n\t{\n\t\t$this->templateBaseDirectory = $dir;\n\t}\n\n\t/**\n\t * Sets the infix path\n\t *\n\t * @param $path\n\t */\n\tpublic function setInfixSearchPath($path)\n\t{\n\t\t$this->infixSearchPath = $path;\n\t}\n\n\t/**\n\t * Sets the template search path\n\t *\n\t * @param $path\n\t */\n\tpublic function setTemplateSearchPath($path)\n\t{\n\t\t$this->templateSearchPath = $path;\n\t}\n\n\t/**\n\t * Sets the default layout\n\t *\n\t * @param $layout\n\t */\n\tpublic function setDefaultLayout($layout)\n\t{\n\t\t$this->defaultLayout = $layout;\n\t}\n\n\t/**\n\t * Gets the default layout\n\t *\n\t * @return string\n\t */\n\tpublic function getDefaultLayout()\n\t{\n\t\treturn $this->defaultLayout;\n\t}\n\n\t/**\n\t * Renders a template\n\t *\n\t * @param String $template\n\t * @param Array $vars\n\t *\n\t * @return string\n\t */\n\tpublic function renderTpl($template, $vars)\n\t{\n\t\ttry {\n\t\t\t$template = $this->resolveDynamicPartials($template, $vars) ?: $template;\n\t\t\t$engine = new TemplateEngine;\n\t\t\t$output = $engine->render($template, $vars);\n\t\t} catch (TemplateNotFoundException $ex) {\n\t\t\t$output = \"\";\n\t\t}\n\t\treturn $output;\n\t}\n\n\t/**\n\t * Gets the full template path for a given template\n\t *\n\t * @param $template\n\t *\n\t * @return string\n\t */\n\tpublic function getFullTemplatePath($template)\n\t{\n\t\treturn CONFIG_BASE_PATH . $this->getTemplateBaseDir().$template;\n\t}\n\n\t/**\n\t * Returns true if the template exists\n\t *\n\t * @param $template\n\t *\n\t * @return bool\n\t */\n\tpublic function isValidTemplate($template)\n\t{\n\t\treturn file_exists($this->getFullTemplatePath($template));\n\t}\n\n\t/**\n\t * Finds the template from the controller and action\n\t *\n\t * TODO: this should probably take in an ActionPack instead\n\t *\n\t * @param RequestController $controller\n\t * @param String $action\n\t *\n\t * @return string\n\t *\n\t * @throws TemplateNotFoundException\n\t */\n\tpublic function findTemplateFromControllerAction($controller, $action)\n\t{\n\t\t$reflection = new ReflectionObject($controller);\n\n\t\t$name = explode(\"\\\\\", $reflection->getName());\n\n\t\t$parts = explode('Controller', $name[1], 2);\n\n\t\t$controllerName = array_shift($parts);\n\n\t\t$base =  $this->camelToHyphens($controllerName);\n\n\t\t$action = $this->camelToHyphens($action);\n\n\t\t$tpl = \"/$base\".$this->infixSearchPath.\"/$action.tpl\";\n\n\t\tif (is_string($this->templateSearchPath)) {\n\t\t\t$tpl = $this->templateSearchPath.$tpl;\n\t\t}\n\n\t\tif (!$this->isValidTemplate($tpl)) {\n\t\t\tthrow new TemplateNotFoundException($this->getFullTemplatePath($tpl));\n\t\t}\n\n\t\treturn $tpl;\n\t}\n\n\t/**\n\t * Helper function to convert a camel cased sting to a\n\t * hyphenated one\n\t *\n\t * @param String $string\n\t *\n\t * @return string\n\t */\n\tprivate function camelToHyphens($string)\n\t{\n\t\treturn strtolower(preg_replace('/([a-z])([A-Z])/', '$1-$2', $string));\n\t}\n\n\n\t/**\n\t * Adds our own special syntax in mustache templates to allow for\n\t * more dynamic partials\n\t *\n\t * I.E.\n\t *        {{>{{content}} }}\n\t *\n\t * @param $template\n\t * @param $vars\n\t *\n\t * @return mixed\n\t *\n\t * @throws TemplateNotFoundException\n\t */\n\tprivate function resolveDynamicPartials($template, $vars)\n\t{\n\t\t$vars['content'] = $template;\n\n\t\t$layout = $vars['layout'] ?: $this->defaultLayout;\n\n\t\t$file = realpath(CONFIG_BASE_PATH.$this->templateBaseDirectory.'/'.$layout);\n\n\t\tif (!$file) {\n\t\t\tthrow new TemplateNotFoundException($file);\n\t\t}\n\n\t\t$template = file_get_contents($file);\n\n\t\tif (strpos($template, \"{{>{{\") !== false) {\n\t\t\tpreg_match_all(\"/{{>{{(.*?)}} }}/\", $template, $matches);\n\n\t\t\tarray_shift($matches);\n\n\t\t\t$replacements = [];\n\n\t\t\tforeach ($matches[0] as $match) {\n\t\t\t\t$replacements[] = $vars[$match];\n\t\t\t}\n\n\t\t\tif (empty($replacements) || !realpath(CONFIG_BASE_PATH.$this->templateBaseDirectory.'/'.$replacements[0])) {\n\t\t\t\tthrow new TemplateNotFoundException($replacements[0]);\n\t\t\t}\n\n\n\t\t\treturn preg_replace(\"/>({{.*?}}) /\", \">\".$replacements[0], $template);\n\t\t}\n\t}\n}\n","defaultMarkerLayerId":"0","markerLayers":{"0":{"id":"0","maintainHistory":false,"markersById":{},"version":2},"1":{"id":"1","maintainHistory":false,"markersById":{},"version":2},"2":{"id":"2","maintainHistory":true,"markersById":{"1":{"range":{"start":{"row":45,"column":8},"end":{"row":45,"column":8}},"properties":{"type":"selection","autoscroll":false,"goalScreenRange":null},"reversed":false,"tailed":true,"valid":true,"invalidate":"never"}},"version":2},"4":{"id":"4","maintainHistory":false,"markersById":{},"version":2},"5":{"id":"5","maintainHistory":false,"markersById":{},"version":2}},"nextMarkerLayerId":6,"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/muhammad/workspace/folly/src/View/Traits/TemplateRendererTrait.php","digestWhenLastPersisted":"0c9e7dd6625c58256b3e560952df81c519bb31f4","preferredLineEnding":null,"nextMarkerId":12,"deserializer":"TextBuffer","version":5}]},"workspace":{"deserializer":"Workspace","paneContainer":{"deserializer":"PaneContainer","version":1,"root":{"deserializer":"Pane","id":3,"items":[{"deserializer":"TextEditor","id":4,"softTabs":false,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":5,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/folly/src/init.php","bufferId":"03ba9ca7462717f921c54c5af6458dc9","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":28,"softTabs":false,"firstVisibleScreenRow":11,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":29,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/folly/src/View/View.php","bufferId":"6bf5d92ac61f61c22930a10d60e575fa","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":52,"softTabs":false,"firstVisibleScreenRow":23,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":53,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/folly/src/Controller/RequestController.php","bufferId":"8ea1f787b5a1a5e3472a5c3f281d0fa1","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":56,"softTabs":false,"firstVisibleScreenRow":76,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":57,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/folly/src/Controller/ActionPack.php","bufferId":"8335042ca7b172427f82acce8b48e47c","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"TextEditor","id":80,"softTabs":false,"firstVisibleScreenRow":0,"firstVisibleScreenColumn":0,"displayBuffer":{"deserializer":"DisplayBuffer","id":81,"softWrapped":false,"tokenizedBuffer":{"deserializer":"TokenizedBuffer","bufferPath":"/Users/muhammad/workspace/folly/src/View/Traits/TemplateRendererTrait.php","bufferId":"07598bbfd4c7c3e9945f48db4a6ca802","largeFileMode":false},"largeFileMode":false,"foldsMarkerLayerId":"1"},"selectionsMarkerLayerId":"2"},{"deserializer":"SettingsView","version":2,"activePanelName":"Updates","uri":"atom://config/updates"}],"activeItemURI":"/Users/muhammad/workspace/folly/src/View/View.php","focused":true,"flexScale":1},"activePaneId":3},"packagesWithActiveGrammars":["language-php","language-html","language-hyperlink","language-todo"],"destroyedItemURIs":["/Users/muhammad/Desktop/index.html"]},"packageStates":{"find-and-replace":{"findOptions":{"findPattern":"setLayout","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":[".js","location","setviewvar","settemplate","getRequest","setTemplate","setLayout"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/muhammad/workspace/folly/src/init.php":1454978025557,"/Users/muhammad/workspace/folly/src/View/View.php":1455140463082,"/Users/muhammad/workspace/folly/src/Controller/RequestController.php":1455140068476,"/Users/muhammad/workspace/folly/src/Controller/ActionPack.php":1455140445227,"/Users/muhammad/workspace/folly/src/View/Traits/TemplateRendererTrait.php":1455140452835},"keybinding-resolver":{},"metrics":{"sessionLength":3544581},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/muhammad/workspace/folly":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}},"docs":{"isExpanded":false,"entries":{}},"src":{"isExpanded":true,"entries":{"Controller":{"isExpanded":true,"entries":{"Exception":{"isExpanded":false,"entries":{}}}},"Exception":{"isExpanded":false,"entries":{}},"Network":{"isExpanded":false,"entries":{}},"Routing":{"isExpanded":false,"entries":{}},"View":{"isExpanded":true,"entries":{"Exception":{"isExpanded":false,"entries":{}},"Traits":{"isExpanded":false,"entries":{}}}}}},"tests":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/muhammad/workspace/folly/src/View/View.php","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}},"fullScreen":false}